/* The following code was generated by JFlex 1.4.3 on 9/29/12 1:55 AM */

import java.lang.System;
import java.util.ArrayList;
import java_cup.runtime.*;


 
 

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/29/12 1:55 AM from the specification file
 * <tt>LexyM.lex</tt>
 */
public class Yylex2 implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\52\1\51\2\0\1\52\22\0\1\36\6\0\1\40\4\0"+
    "\1\41\1\0\1\3\1\27\1\2\1\5\1\6\1\7\1\10\1\10"+
    "\1\1\1\1\1\1\1\1\1\37\1\50\1\11\1\47\1\26\2\0"+
    "\1\23\1\31\1\32\1\34\1\13\1\30\1\12\1\44\1\16\1\45"+
    "\1\42\1\25\1\22\1\20\1\17\1\33\1\4\1\24\1\14\1\15"+
    "\1\35\1\46\3\4\1\43\4\4\1\21\1\4\1\23\1\31\1\32"+
    "\1\34\1\13\1\30\1\12\1\44\1\16\1\45\1\42\1\25\1\22"+
    "\1\20\1\17\1\33\1\4\1\24\1\14\1\15\1\35\1\46\3\4"+
    "\1\43\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\3\2\1\1"+
    "\14\4\1\5\1\6\3\4\1\7\1\10\1\11\3\0"+
    "\2\2\10\0\1\4\2\12\24\4\1\13\3\4\1\14"+
    "\2\0\1\15\16\0\34\4\21\0\1\4\1\16\11\4"+
    "\1\17\1\4\1\20\12\4\1\21\1\4\1\22\1\4"+
    "\20\0\3\4\1\23\3\4\1\24\1\4\1\25\1\4"+
    "\1\26\1\27\1\30\4\4\1\31\3\4\1\32\1\4"+
    "\20\0\3\4\1\33\1\34\1\35\1\4\1\36\1\37"+
    "\1\4\1\40\4\4\1\41\1\4\3\0\1\42\14\0"+
    "\1\43\4\4\1\44\2\4\1\45\1\4\1\46\1\0"+
    "\1\13\3\0\1\47\1\50\10\0\6\4\1\51\10\0"+
    "\1\52\3\0\1\4\1\53\4\4\1\54\3\0\1\55"+
    "\4\0\1\56\1\0\1\57\1\60\3\4\4\0\1\61"+
    "\3\0\1\62\1\4\1\63\7\0\1\64\24\0\1\65"+
    "\4\0\1\66\5\0\1\67\3\0\1\70\3\0\1\71"+
    "\2\0\1\72\1\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\53\0\254\0\327\0\u0102"+
    "\0\u012d\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a"+
    "\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387\0\53"+
    "\0\u03b2\0\u03dd\0\u0408\0\53\0\53\0\53\0\u0433\0\u045e"+
    "\0\u0489\0\u04b4\0\u04df\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6"+
    "\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d\0\254\0\u06b8\0\u06e3"+
    "\0\u070e\0\u0739\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b"+
    "\0\u0866\0\u0891\0\u08bc\0\u08e7\0\u0912\0\u093d\0\u0968\0\u0993"+
    "\0\u09be\0\u09e9\0\254\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0"+
    "\0\u0aeb\0\u0489\0\u0b16\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed"+
    "\0\u0c18\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45"+
    "\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d"+
    "\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5"+
    "\0\u1020\0\u104b\0\u1076\0\u10a1\0\u10cc\0\u10f7\0\u1122\0\u114d"+
    "\0\u1178\0\u11a3\0\u11ce\0\u11f9\0\u1224\0\u124f\0\u127a\0\u12a5"+
    "\0\u12d0\0\u12fb\0\u1326\0\u1351\0\u137c\0\u13a7\0\u13d2\0\u13fd"+
    "\0\u1428\0\u1453\0\u147e\0\u14a9\0\u14d4\0\u14ff\0\254\0\u152a"+
    "\0\u1555\0\u1580\0\u15ab\0\u15d6\0\u1601\0\u162c\0\u1657\0\u1682"+
    "\0\254\0\u16ad\0\254\0\u16d8\0\u1703\0\u172e\0\u1759\0\u1784"+
    "\0\u17af\0\u17da\0\u1805\0\u1830\0\u185b\0\254\0\u1886\0\254"+
    "\0\u18b1\0\u18dc\0\u1907\0\u1932\0\u195d\0\u1988\0\u19b3\0\u19de"+
    "\0\u1a09\0\u1a34\0\u1a5f\0\u1a8a\0\u1ab5\0\u1ae0\0\u1b0b\0\u1b36"+
    "\0\u1b61\0\u1b8c\0\u1bb7\0\u1be2\0\254\0\u1c0d\0\u1c38\0\u1c63"+
    "\0\254\0\u1c8e\0\254\0\u1cb9\0\254\0\254\0\254\0\u1ce4"+
    "\0\u1d0f\0\u1d3a\0\u1d65\0\u1d90\0\u1dbb\0\u1de6\0\u1e11\0\254"+
    "\0\u1e3c\0\u1e67\0\u1e92\0\u1ebd\0\u1ee8\0\u1f13\0\u1f3e\0\u1f69"+
    "\0\u1f94\0\u1fbf\0\u1fea\0\u2015\0\u2040\0\u206b\0\u2096\0\u20c1"+
    "\0\u20ec\0\u2117\0\u2142\0\u216d\0\254\0\254\0\254\0\u2198"+
    "\0\254\0\254\0\u21c3\0\254\0\u21ee\0\u2219\0\u2244\0\u226f"+
    "\0\254\0\u229a\0\u22c5\0\u22f0\0\u231b\0\53\0\u2346\0\u2371"+
    "\0\u239c\0\u23c7\0\u23f2\0\u241d\0\u2448\0\u2473\0\u249e\0\u24c9"+
    "\0\u24f4\0\u251f\0\254\0\u254a\0\u2575\0\u25a0\0\u25cb\0\254"+
    "\0\u25f6\0\u2621\0\254\0\u264c\0\254\0\u2677\0\53\0\u26a2"+
    "\0\u26cd\0\u26f8\0\53\0\53\0\u2723\0\u274e\0\u2779\0\u27a4"+
    "\0\u27cf\0\u27fa\0\u2825\0\u2850\0\u287b\0\u28a6\0\u28d1\0\u28fc"+
    "\0\u2927\0\u2952\0\254\0\u297d\0\u29a8\0\u29d3\0\u29fe\0\u2a29"+
    "\0\u2a54\0\u2a7f\0\u2aaa\0\53\0\u2ad5\0\u2b00\0\u2b2b\0\u2b56"+
    "\0\254\0\u2b81\0\u2bac\0\u2bd7\0\u2c02\0\53\0\u2c2d\0\u2c58"+
    "\0\u2c83\0\53\0\u2cae\0\u2cd9\0\u2d04\0\u2d2f\0\53\0\u2d5a"+
    "\0\254\0\254\0\u2d85\0\u2db0\0\u2ddb\0\u2e06\0\u2e31\0\u2e5c"+
    "\0\u2e87\0\53\0\u2eb2\0\u2edd\0\u2f08\0\254\0\u2f33\0\254"+
    "\0\u2f5e\0\u2f89\0\u2fb4\0\u2fdf\0\u300a\0\u3035\0\u3060\0\254"+
    "\0\u308b\0\u30b6\0\u30e1\0\u310c\0\u3137\0\u3162\0\u318d\0\u31b8"+
    "\0\u31e3\0\u320e\0\u3239\0\u3264\0\u328f\0\u32ba\0\u32e5\0\u3310"+
    "\0\u333b\0\u3366\0\u3391\0\u33bc\0\53\0\u33e7\0\u3412\0\u343d"+
    "\0\u3468\0\53\0\u3493\0\u34be\0\u34e9\0\u3514\0\u353f\0\53"+
    "\0\u356a\0\u3595\0\u35c0\0\53\0\u35eb\0\u3616\0\u3641\0\53"+
    "\0\u366c\0\u3697\0\53\0\53";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\3\1\12\1\13\2\6\1\14\1\6\1\15\1\16"+
    "\1\6\1\17\1\20\1\21\1\22\2\2\1\23\1\24"+
    "\1\25\1\26\2\6\1\27\1\2\1\30\1\2\1\31"+
    "\1\6\1\32\1\6\1\33\1\34\1\35\1\36\1\27"+
    "\54\0\2\3\1\37\1\0\4\3\43\0\1\40\3\0"+
    "\4\40\46\0\1\6\5\0\14\6\2\0\6\6\3\0"+
    "\1\41\5\6\5\0\1\42\1\43\1\37\1\0\2\43"+
    "\2\42\43\0\2\42\1\37\1\0\4\42\43\0\1\3"+
    "\1\42\1\37\1\0\1\42\3\3\54\0\1\44\2\0"+
    "\1\45\7\0\1\46\1\0\1\47\1\50\1\0\1\51"+
    "\1\52\1\53\22\0\1\6\5\0\1\6\1\54\10\6"+
    "\1\55\1\6\2\0\6\6\3\0\1\41\5\6\10\0"+
    "\1\6\5\0\6\6\1\56\2\6\1\57\1\60\1\6"+
    "\2\0\6\6\3\0\1\41\5\6\10\0\1\6\5\0"+
    "\14\6\2\0\6\6\3\0\1\41\1\6\1\56\3\6"+
    "\10\0\1\6\5\0\1\6\1\61\3\6\1\62\6\6"+
    "\2\0\6\6\3\0\1\41\5\6\10\0\1\6\5\0"+
    "\5\6\1\63\3\6\1\64\2\6\2\0\6\6\3\0"+
    "\1\41\5\6\10\0\1\6\5\0\6\6\1\65\3\6"+
    "\1\66\1\6\2\0\6\6\3\0\1\41\1\6\1\67"+
    "\3\6\10\0\1\6\5\0\5\6\1\70\6\6\2\0"+
    "\6\6\3\0\1\41\5\6\10\0\1\6\5\0\14\6"+
    "\2\0\1\6\1\56\3\6\1\71\3\0\1\41\5\6"+
    "\10\0\1\6\5\0\1\6\1\72\3\6\1\73\6\6"+
    "\2\0\5\6\1\74\3\0\1\41\5\6\10\0\1\6"+
    "\5\0\5\6\1\75\5\6\1\76\2\0\6\6\3\0"+
    "\1\41\5\6\10\0\1\6\5\0\1\6\1\77\3\6"+
    "\1\100\3\6\1\101\2\6\2\0\6\6\3\0\1\41"+
    "\5\6\10\0\1\6\5\0\1\6\1\102\6\6\1\103"+
    "\1\6\1\104\1\6\2\0\6\6\3\0\1\41\5\6"+
    "\42\0\1\27\13\0\1\27\4\0\1\6\5\0\1\56"+
    "\13\6\2\0\6\6\3\0\1\41\5\6\10\0\1\6"+
    "\5\0\5\6\1\105\6\6\2\0\6\6\3\0\1\41"+
    "\5\6\10\0\1\6\5\0\1\6\1\106\12\6\2\0"+
    "\6\6\3\0\1\41\5\6\5\0\1\107\3\0\4\107"+
    "\71\0\1\110\7\0\1\111\17\0\1\112\5\0\14\112"+
    "\2\0\6\112\4\0\5\112\5\0\2\3\1\37\1\0"+
    "\4\3\16\0\1\110\24\0\2\3\1\37\1\0\4\3"+
    "\16\0\1\110\7\0\1\111\26\0\1\113\62\0\1\114"+
    "\45\0\1\115\46\0\1\116\2\0\1\117\7\0\1\120"+
    "\2\0\1\121\1\0\1\122\1\123\1\124\35\0\1\125"+
    "\56\0\1\126\53\0\1\127\41\0\1\130\43\0\1\6"+
    "\5\0\5\6\1\131\6\6\2\0\6\6\3\0\1\41"+
    "\5\6\10\0\1\6\5\0\4\6\1\132\7\6\2\0"+
    "\6\6\3\0\1\41\5\6\10\0\1\6\5\0\10\6"+
    "\1\133\3\6\2\0\6\6\3\0\1\41\5\6\10\0"+
    "\1\6\5\0\1\6\1\134\12\6\2\0\6\6\3\0"+
    "\1\41\5\6\10\0\1\6\5\0\1\135\13\6\2\0"+
    "\6\6\3\0\1\41\5\6\10\0\1\6\5\0\10\6"+
    "\1\136\3\6\2\0\6\6\3\0\1\41\5\6\10\0"+
    "\1\6\5\0\12\6\1\137\1\6\2\0\4\6\1\140"+
    "\1\6\3\0\1\41\5\6\10\0\1\6\5\0\12\6"+
    "\1\141\1\6\2\0\6\6\3\0\1\41\5\6\10\0"+
    "\1\6\5\0\11\6\1\142\2\6\2\0\6\6\3\0"+
    "\1\41\5\6\10\0\1\6\5\0\4\6\1\143\7\6"+
    "\2\0\6\6\3\0\1\41\5\6\10\0\1\6\5\0"+
    "\14\6\2\0\5\6\1\144\3\0\1\41\5\6\10\0"+
    "\1\6\5\0\2\6\1\145\11\6\2\0\6\6\3\0"+
    "\1\41\3\6\1\146\1\6\10\0\1\6\5\0\1\147"+
    "\13\6\2\0\6\6\3\0\1\41\5\6\10\0\1\6"+
    "\5\0\14\6\2\0\2\6\1\150\3\6\3\0\1\41"+
    "\5\6\10\0\1\6\5\0\6\6\1\151\5\6\2\0"+
    "\6\6\3\0\1\41\5\6\10\0\1\6\5\0\1\6"+
    "\1\152\12\6\2\0\6\6\3\0\1\41\5\6\10\0"+
    "\1\6\5\0\12\6\1\153\1\6\2\0\6\6\3\0"+
    "\1\41\5\6\10\0\1\6\5\0\11\6\1\154\2\6"+
    "\2\0\6\6\3\0\1\41\5\6\10\0\1\6\5\0"+
    "\13\6\1\155\2\0\6\6\3\0\1\41\5\6\10\0"+
    "\1\6\5\0\13\6\1\156\2\0\5\6\1\157\3\0"+
    "\1\41\5\6\10\0\1\6\5\0\6\6\1\160\5\6"+
    "\2\0\6\6\3\0\1\41\5\6\10\0\1\6\5\0"+
    "\2\6\1\161\11\6\2\0\6\6\3\0\1\41\5\6"+
    "\10\0\1\6\5\0\1\6\1\162\12\6\2\0\6\6"+
    "\3\0\1\41\5\6\10\0\1\6\5\0\12\6\1\163"+
    "\1\6\2\0\6\6\3\0\1\41\5\6\10\0\1\6"+
    "\5\0\12\6\1\164\1\6\2\0\6\6\3\0\1\41"+
    "\5\6\5\0\2\107\2\0\4\107\44\0\1\165\2\0"+
    "\1\166\47\0\1\167\2\0\4\167\56\0\1\170\67\0"+
    "\1\171\41\0\1\172\45\0\1\173\62\0\1\174\45\0"+
    "\1\175\53\0\1\176\56\0\1\177\53\0\1\200\41\0"+
    "\1\201\63\0\1\202\52\0\1\203\45\0\1\204\63\0"+
    "\1\205\26\0\1\6\5\0\12\6\1\206\1\6\2\0"+
    "\6\6\3\0\1\41\5\6\10\0\1\6\5\0\2\6"+
    "\1\207\11\6\2\0\6\6\3\0\1\41\5\6\10\0"+
    "\1\6\5\0\7\6\1\210\4\6\2\0\6\6\3\0"+
    "\1\41\5\6\10\0\1\6\5\0\14\6\2\0\1\6"+
    "\1\211\4\6\3\0\1\41\5\6\10\0\1\6\5\0"+
    "\12\6\1\212\1\6\2\0\6\6\3\0\1\41\5\6"+
    "\10\0\1\6\5\0\14\6\2\0\1\6\1\213\4\6"+
    "\3\0\1\41\5\6\10\0\1\6\5\0\11\6\1\214"+
    "\2\6\2\0\6\6\3\0\1\41\5\6\10\0\1\6"+
    "\5\0\1\6\1\215\12\6\2\0\6\6\3\0\1\41"+
    "\5\6\10\0\1\6\5\0\14\6\2\0\2\6\1\216"+
    "\3\6\3\0\1\41\5\6\10\0\1\6\5\0\12\6"+
    "\1\217\1\6\2\0\6\6\3\0\1\41\5\6\10\0"+
    "\1\6\5\0\11\6\1\220\2\6\2\0\6\6\3\0"+
    "\1\41\5\6\10\0\1\6\5\0\13\6\1\221\2\0"+
    "\6\6\3\0\1\41\5\6\10\0\1\6\5\0\11\6"+
    "\1\222\2\6\2\0\6\6\3\0\1\41\5\6\10\0"+
    "\1\6\5\0\5\6\1\223\6\6\2\0\6\6\3\0"+
    "\1\41\5\6\10\0\1\6\5\0\11\6\1\224\2\6"+
    "\2\0\6\6\3\0\1\41\5\6\10\0\1\6\5\0"+
    "\14\6\2\0\6\6\3\0\1\41\2\6\1\225\2\6"+
    "\10\0\1\6\5\0\14\6\2\0\4\6\1\226\1\6"+
    "\3\0\1\41\5\6\10\0\1\6\5\0\6\6\1\227"+
    "\5\6\2\0\6\6\3\0\1\41\5\6\10\0\1\6"+
    "\5\0\14\6\2\0\4\6\1\230\1\6\3\0\1\41"+
    "\5\6\10\0\1\6\5\0\6\6\1\231\5\6\2\0"+
    "\6\6\3\0\1\41\5\6\10\0\1\6\5\0\1\6"+
    "\1\232\12\6\2\0\6\6\3\0\1\41\5\6\10\0"+
    "\1\6\5\0\5\6\1\233\6\6\2\0\6\6\3\0"+
    "\1\41\5\6\10\0\1\6\5\0\12\6\1\234\1\6"+
    "\2\0\6\6\3\0\1\41\5\6\10\0\1\6\5\0"+
    "\3\6\1\235\10\6\2\0\6\6\3\0\1\41\5\6"+
    "\10\0\1\6\5\0\5\6\1\236\6\6\2\0\6\6"+
    "\3\0\1\41\5\6\10\0\1\6\5\0\14\6\2\0"+
    "\2\6\1\237\3\6\3\0\1\41\5\6\10\0\1\6"+
    "\5\0\11\6\1\240\2\6\2\0\6\6\3\0\1\41"+
    "\5\6\10\0\1\6\5\0\14\6\2\0\4\6\1\241"+
    "\1\6\3\0\1\41\5\6\5\0\1\242\3\0\4\242"+
    "\44\0\1\242\2\0\2\242\45\0\2\243\2\0\4\243"+
    "\57\0\1\244\62\0\1\245\40\0\1\246\53\0\1\247"+
    "\67\0\1\250\41\0\1\251\56\0\1\252\52\0\1\253"+
    "\45\0\1\254\63\0\1\255\44\0\1\256\53\0\1\257"+
    "\63\0\1\260\37\0\1\261\35\0\1\6\5\0\1\262"+
    "\13\6\2\0\6\6\3\0\1\41\5\6\10\0\1\6"+
    "\5\0\14\6\2\0\1\263\5\6\3\0\1\41\5\6"+
    "\10\0\1\6\5\0\14\6\2\0\5\6\1\264\3\0"+
    "\1\41\5\6\10\0\1\6\5\0\5\6\1\265\6\6"+
    "\2\0\6\6\3\0\1\41\5\6\10\0\1\6\5\0"+
    "\12\6\1\266\1\6\2\0\6\6\3\0\1\41\5\6"+
    "\10\0\1\6\5\0\14\6\2\0\4\6\1\267\1\6"+
    "\3\0\1\41\5\6\10\0\1\6\5\0\13\6\1\270"+
    "\2\0\6\6\3\0\1\41\5\6\10\0\1\6\5\0"+
    "\11\6\1\271\2\6\2\0\6\6\3\0\1\41\5\6"+
    "\10\0\1\6\5\0\11\6\1\272\2\6\2\0\6\6"+
    "\3\0\1\41\5\6\10\0\1\6\5\0\13\6\1\273"+
    "\2\0\6\6\3\0\1\41\5\6\10\0\1\6\5\0"+
    "\14\6\2\0\4\6\1\274\1\6\3\0\1\41\5\6"+
    "\10\0\1\6\5\0\12\6\1\275\1\6\2\0\6\6"+
    "\3\0\1\41\5\6\10\0\1\6\5\0\11\6\1\276"+
    "\2\6\2\0\6\6\3\0\1\41\5\6\10\0\1\6"+
    "\5\0\5\6\1\277\6\6\2\0\6\6\3\0\1\41"+
    "\5\6\10\0\1\6\5\0\3\6\1\300\10\6\2\0"+
    "\6\6\3\0\1\41\5\6\10\0\1\6\5\0\1\6"+
    "\1\301\12\6\2\0\6\6\3\0\1\41\5\6\10\0"+
    "\1\6\5\0\14\6\2\0\2\6\1\302\3\6\3\0"+
    "\1\41\5\6\10\0\1\6\5\0\2\6\1\303\11\6"+
    "\2\0\6\6\3\0\1\41\5\6\10\0\1\6\5\0"+
    "\12\6\1\304\1\6\2\0\6\6\3\0\1\41\5\6"+
    "\10\0\1\6\5\0\4\6\1\305\7\6\2\0\6\6"+
    "\3\0\1\41\5\6\10\0\1\6\5\0\4\6\1\306"+
    "\7\6\2\0\6\6\3\0\1\41\5\6\10\0\1\6"+
    "\5\0\4\6\1\307\7\6\2\0\6\6\3\0\1\41"+
    "\5\6\10\0\1\6\5\0\1\6\1\310\7\6\1\311"+
    "\2\6\2\0\6\6\3\0\1\41\5\6\33\0\1\312"+
    "\61\0\1\313\32\0\1\314\57\0\1\315\52\0\1\316"+
    "\44\0\1\317\62\0\1\320\40\0\1\321\61\0\1\322"+
    "\53\0\1\323\63\0\1\324\37\0\1\325\54\0\1\326"+
    "\61\0\1\327\55\0\1\330\50\0\1\331\23\0\1\6"+
    "\5\0\4\6\1\332\7\6\2\0\6\6\3\0\1\41"+
    "\5\6\10\0\1\6\5\0\14\6\2\0\5\6\1\333"+
    "\3\0\1\41\5\6\10\0\1\6\5\0\14\6\2\0"+
    "\2\6\1\334\3\6\3\0\1\41\5\6\10\0\1\6"+
    "\5\0\1\6\1\335\12\6\2\0\6\6\3\0\1\41"+
    "\5\6\10\0\1\6\5\0\5\6\1\336\6\6\2\0"+
    "\6\6\3\0\1\41\5\6\10\0\1\6\5\0\5\6"+
    "\1\337\6\6\2\0\6\6\3\0\1\41\5\6\10\0"+
    "\1\6\5\0\6\6\1\340\5\6\2\0\6\6\3\0"+
    "\1\41\5\6\10\0\1\6\5\0\5\6\1\341\6\6"+
    "\2\0\6\6\3\0\1\41\5\6\10\0\1\6\5\0"+
    "\1\6\1\342\12\6\2\0\6\6\3\0\1\41\5\6"+
    "\10\0\1\6\5\0\7\6\1\343\4\6\2\0\6\6"+
    "\3\0\1\41\5\6\10\0\1\6\5\0\5\6\1\344"+
    "\6\6\2\0\6\6\3\0\1\41\5\6\10\0\1\6"+
    "\5\0\3\6\1\345\10\6\2\0\6\6\3\0\1\41"+
    "\5\6\10\0\1\6\5\0\7\6\1\346\4\6\2\0"+
    "\6\6\3\0\1\41\5\6\10\0\1\6\5\0\1\6"+
    "\1\347\12\6\2\0\6\6\3\0\1\41\5\6\10\0"+
    "\1\6\5\0\14\6\2\0\4\6\1\350\1\6\3\0"+
    "\1\41\5\6\10\0\1\6\5\0\5\6\1\351\6\6"+
    "\2\0\6\6\3\0\1\41\5\6\10\0\1\6\5\0"+
    "\6\6\1\352\5\6\2\0\6\6\3\0\1\41\5\6"+
    "\5\0\2\353\2\0\4\353\65\0\1\354\46\0\1\355"+
    "\61\0\1\356\62\0\1\357\32\0\1\360\57\0\1\361"+
    "\52\0\1\362\52\0\1\363\61\0\1\364\55\0\1\365"+
    "\50\0\1\366\34\0\1\367\52\0\1\370\67\0\1\371"+
    "\44\0\1\372\32\0\1\6\5\0\11\6\1\373\2\6"+
    "\2\0\6\6\3\0\1\41\5\6\10\0\1\6\5\0"+
    "\1\6\1\374\12\6\2\0\6\6\3\0\1\41\5\6"+
    "\10\0\1\6\5\0\14\6\2\0\6\6\3\0\1\41"+
    "\2\6\1\375\2\6\10\0\1\6\5\0\14\6\2\0"+
    "\6\6\3\0\1\41\3\6\1\376\1\6\10\0\1\6"+
    "\5\0\3\6\1\377\10\6\2\0\6\6\3\0\1\41"+
    "\5\6\10\0\1\6\5\0\1\6\1\u0100\12\6\2\0"+
    "\6\6\3\0\1\41\5\6\10\0\1\6\5\0\14\6"+
    "\2\0\1\u0101\1\u0102\4\6\3\0\1\41\5\6\10\0"+
    "\1\6\5\0\12\6\1\u0103\1\6\2\0\6\6\3\0"+
    "\1\41\5\6\10\0\1\6\5\0\11\6\1\u0104\2\6"+
    "\2\0\6\6\3\0\1\41\5\6\10\0\1\6\5\0"+
    "\11\6\1\u0105\2\6\2\0\6\6\3\0\1\41\5\6"+
    "\5\0\2\u0106\2\0\4\u0106\64\0\1\u0107\50\0\1\u0108"+
    "\52\0\1\u0109\51\0\1\u010a\61\0\1\u010b\52\0\1\u010c"+
    "\41\0\1\u010d\52\0\1\u010e\67\0\1\u010f\44\0\1\u0110"+
    "\45\0\1\u0111\46\0\1\u0112\54\0\1\u0113\54\0\1\u0114"+
    "\37\0\1\6\5\0\6\6\1\u0115\5\6\2\0\6\6"+
    "\3\0\1\41\5\6\10\0\1\6\5\0\1\6\1\u0116"+
    "\12\6\2\0\6\6\3\0\1\41\5\6\10\0\1\6"+
    "\5\0\11\6\1\u0117\2\6\2\0\6\6\3\0\1\41"+
    "\5\6\10\0\1\6\5\0\11\6\1\u0118\2\6\2\0"+
    "\6\6\3\0\1\41\5\6\10\0\1\6\5\0\14\6"+
    "\2\0\5\6\1\u0119\3\0\1\41\5\6\10\0\1\6"+
    "\5\0\5\6\1\u011a\6\6\2\0\6\6\3\0\1\41"+
    "\5\6\10\0\1\6\5\0\14\6\2\0\4\6\1\u011b"+
    "\1\6\3\0\1\41\5\6\5\0\2\u011c\2\0\4\u011c"+
    "\63\0\1\u011d\50\0\1\u011e\53\0\1\u011f\51\0\1\u0120"+
    "\46\0\1\u0121\54\0\1\u0122\54\0\1\u0123\61\0\1\u0124"+
    "\50\0\1\u0125\45\0\1\u0126\67\0\1\u0127\22\0\1\6"+
    "\5\0\3\6\1\u0128\10\6\2\0\6\6\3\0\1\41"+
    "\5\6\10\0\1\6\5\0\3\6\1\u0129\10\6\2\0"+
    "\6\6\3\0\1\41\5\6\10\0\1\6\5\0\14\6"+
    "\2\0\4\6\1\u012a\1\6\3\0\1\41\5\6\10\0"+
    "\1\6\5\0\14\6\2\0\1\6\1\u012b\4\6\3\0"+
    "\1\41\5\6\10\0\1\6\5\0\1\6\1\u012c\12\6"+
    "\2\0\6\6\3\0\1\41\5\6\10\0\1\6\5\0"+
    "\12\6\1\u012d\1\6\2\0\6\6\3\0\1\41\5\6"+
    "\5\0\2\u012e\2\0\4\u012e\64\0\1\u012f\52\0\1\u0130"+
    "\51\0\1\u0131\57\0\1\u0132\50\0\1\u0133\45\0\1\u0134"+
    "\67\0\1\u0135\34\0\1\u0136\62\0\1\u0137\61\0\1\u0138"+
    "\21\0\1\6\5\0\1\6\1\u0139\12\6\2\0\6\6"+
    "\3\0\1\41\5\6\10\0\1\6\5\0\5\6\1\u013a"+
    "\6\6\2\0\6\6\3\0\1\41\5\6\10\0\1\6"+
    "\5\0\13\6\1\u013b\2\0\6\6\3\0\1\41\5\6"+
    "\10\0\1\6\5\0\6\6\1\u013c\5\6\2\0\6\6"+
    "\3\0\1\41\5\6\10\0\1\6\5\0\14\6\2\0"+
    "\4\6\1\u013d\1\6\3\0\1\41\5\6\27\0\1\u013e"+
    "\50\0\1\u013f\53\0\1\u0140\46\0\1\u0141\62\0\1\u0142"+
    "\61\0\1\u0143\31\0\1\u0144\70\0\1\u0145\24\0\1\6"+
    "\5\0\11\6\1\u0146\2\6\2\0\6\6\3\0\1\41"+
    "\5\6\10\0\1\6\5\0\3\6\1\u0147\10\6\2\0"+
    "\6\6\3\0\1\41\5\6\10\0\1\6\5\0\1\6"+
    "\1\u0148\12\6\2\0\6\6\3\0\1\41\5\6\21\0"+
    "\1\u0149\62\0\1\u014a\50\0\1\u014b\43\0\1\u014c\70\0"+
    "\1\u014d\35\0\1\u014e\52\0\1\u014f\41\0\1\6\5\0"+
    "\1\6\1\u0150\12\6\2\0\6\6\3\0\1\41\5\6"+
    "\17\0\1\u0151\55\0\1\u0152\51\0\1\u0153\52\0\1\u0154"+
    "\52\0\1\u0155\53\0\1\u0156\53\0\1\u0157\57\0\1\u0158"+
    "\46\0\1\u0159\45\0\1\u015a\55\0\1\u015b\53\0\1\u015c"+
    "\65\0\1\u015d\34\0\1\u015e\54\0\1\u015f\47\0\1\u0160"+
    "\63\0\1\u0161\60\0\1\u0162\34\0\1\u0163\61\0\1\u0164"+
    "\55\0\1\u0165\47\0\1\u0166\52\0\1\u0167\45\0\1\u0168"+
    "\57\0\1\u0169\55\0\1\u016a\40\0\1\u016b\63\0\1\u016c"+
    "\64\0\1\u016d\36\0\1\u016e\43\0\1\u016f\64\0\1\u0170"+
    "\37\0\1\u0171\77\0\1\u0172\37\0\1\u0173\53\0\1\u0174"+
    "\40\0\1\u0175\42\0\1\u0176\5\0\14\u0176\2\0\6\u0176"+
    "\4\0\5\u0176\17\0\1\u0177\65\0\1\u0178\30\0\1\u0176"+
    "\5\0\14\u0176\2\0\6\u0176\2\0\1\u0179\1\0\5\u0176"+
    "\20\0\1\u017a\64\0\1\u017b\52\0\1\u017c\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14018];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\22\1\1\11\3\1\3\11"+
    "\3\0\2\1\10\0\34\1\2\0\1\1\16\0\34\1"+
    "\21\0\34\1\20\0\30\1\20\0\21\1\3\0\1\11"+
    "\14\0\13\1\1\0\1\11\3\0\2\11\10\0\7\1"+
    "\10\0\1\11\3\0\6\1\1\11\3\0\1\11\4\0"+
    "\1\11\1\0\5\1\4\0\1\11\3\0\3\1\7\0"+
    "\1\1\24\0\1\11\4\0\1\11\5\0\1\11\3\0"+
    "\1\11\3\0\1\11\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public static void llamar()
{
    proyecto1_compi1.html.CUP$parser$actions.tablita();
}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex2(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Yylex2(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 53: 
          { return new Symbol(sym.DpA,new String(yytext()));
          }
        case 60: break;
        case 59: 
          { return new Symbol(sym.GMC,new String(yytext()));
          }
        case 61: break;
        case 49: 
          { return new Symbol(sym.PrC,new String(yytext()));
          }
        case 62: break;
        case 38: 
          { return new Symbol(sym.verdana,new String(yytext()));
          }
        case 63: break;
        case 15: 
          { return new Symbol(sym.blu,new String(yytext()));
          }
        case 64: break;
        case 55: 
          { return new Symbol(sym.CaA,new String(yytext()));
          }
        case 65: break;
        case 7: 
          { return new Symbol(sym.equal,new String(yytext()));
          }
        case 66: break;
        case 24: 
          { return new Symbol(sym.fondo,new String(yytext()));
          }
        case 67: break;
        case 47: 
          { return new Symbol(sym.tmfont,new String(yytext()));
          }
        case 68: break;
        case 16: 
          { return new Symbol(sym.rossa,new String(yytext()));
          }
        case 69: break;
        case 42: 
          { return new Symbol(sym.FA,new String(yytext()));
          }
        case 70: break;
        case 4: 
          { return new Symbol(sym.letters,new String(yytext()));
          }
        case 71: break;
        case 31: 
          { return new Symbol(sym.font,new String(yytext()));
          }
        case 72: break;
        case 1: 
          { System.out.println("error lexico en "  + yyline + "," + yychar + " No se reconoce " + yytext());
    yychar=0;
          }
        case 73: break;
        case 52: 
          { return new Symbol(sym.colfont,new String(yytext()));
          }
        case 74: break;
        case 10: 
          { return new Symbol(sym.abrv,new String(yytext()));
          }
        case 75: break;
        case 34: 
          { return new Symbol(sym.TaA,new String(yytext()));
          }
        case 76: break;
        case 2: 
          { return new Symbol(sym.numb,new String(yytext()));
          }
        case 77: break;
        case 20: 
          { return new Symbol(sym.mark,new String(yytext()));
          }
        case 78: break;
        case 58: 
          { return new Symbol(sym.LiA,new String(yytext()));
          }
        case 79: break;
        case 19: 
          { return new Symbol(sym.nero,new String(yytext()));
          }
        case 80: break;
        case 51: 
          { return new Symbol(sym.coltable,new String(yytext()));
          }
        case 81: break;
        case 50: 
          { return new Symbol(sym.btable,new String(yytext()));
          }
        case 82: break;
        case 13: 
          { return new Symbol(sym.place2,new String(yytext()));
          }
        case 83: break;
        case 12: 
          { return new Symbol(sym.real,new String(yytext()));
          }
        case 84: break;
        case 18: 
          { return new Symbol(sym.hours,new String(yytext()));
          }
        case 85: break;
        case 36: 
          { return new Symbol(sym.celeste,new String(yytext()));
          }
        case 86: break;
        case 33: 
          { return new Symbol(sym.price,new String(yytext()));
          }
        case 87: break;
        case 54: 
          { return new Symbol(sym.DpC,new String(yytext()));
          }
        case 88: break;
        case 23: 
          { return new Symbol(sym.dates,new String(yytext()));
          }
        case 89: break;
        case 37: 
          { return new Symbol(sym.courier,new String(yytext()));
          }
        case 90: break;
        case 22: 
          { return new Symbol(sym.place,new String(yytext()));
          }
        case 91: break;
        case 21: 
          { return new Symbol(sym.arial,new String(yytext()));
          }
        case 92: break;
        case 43: 
          { return new Symbol(sym.trebuchet,new String(yytext()));
          }
        case 93: break;
        case 25: 
          { return new Symbol(sym.colo,new String(yytext()));
          }
        case 94: break;
        case 57: 
          { return new Symbol(sym.GMA,new String(yytext()));
          }
        case 95: break;
        case 11: 
          { return new Symbol(sym.hora2,new String(yytext()));
          }
        case 96: break;
        case 46: 
          { return new Symbol(sym.PrA,new String(yytext()));
          }
        case 97: break;
        case 27: 
          { return new Symbol(sym.names,new String(yytext()));
          }
        case 98: break;
        case 41: 
          { return new Symbol(sym.cant,new String(yytext()));
          }
        case 99: break;
        case 26: 
          { return new Symbol(sym.verde,new String(yytext()));
          }
        case 100: break;
        case 8: 
          { return new Symbol(sym.semi,new String(yytext()));
          }
        case 101: break;
        case 56: 
          { return new Symbol(sym.CaC,new String(yytext()));
          }
        case 102: break;
        case 6: 
          { return new Symbol(sym.Apos,new String(yytext()));
          }
        case 103: break;
        case 48: 
          { return new Symbol(sym.arancione,new String(yytext()));
          }
        case 104: break;
        case 32: 
          { return new Symbol(sym.bianco,new String(yytext()));
          }
        case 105: break;
        case 3: 
          { return new Symbol(sym.dot,new String(yytext()));
          }
        case 106: break;
        case 45: 
          { return new Symbol(sym.FC,new String(yytext()));
          }
        case 107: break;
        case 35: 
          { return new Symbol(sym.georgia,new String(yytext()));
          }
        case 108: break;
        case 14: 
          { return new Symbol(sym.griggio,new String(yytext()));
          }
        case 109: break;
        case 30: 
          { return new Symbol(sym.rosato,new String(yytext()));
          }
        case 110: break;
        case 39: 
          { return new Symbol(sym.TaC,new String(yytext()));
          }
        case 111: break;
        case 17: 
          { return new Symbol(sym.weight,new String(yytext()));
          }
        case 112: break;
        case 9: 
          { yychar=0;
          }
        case 113: break;
        case 28: 
          { return new Symbol(sym.porpora,new String(yytext()));
          }
        case 114: break;
        case 40: 
          { return new Symbol(sym.LiC,new String(yytext()));
          }
        case 115: break;
        case 44: 
          { return new Symbol(sym.dates2,new String(yytext()));
          }
        case 116: break;
        case 5: 
          { 
          }
        case 117: break;
        case 29: 
          { return new Symbol(sym.model,new String(yytext()));
          }
        case 118: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
