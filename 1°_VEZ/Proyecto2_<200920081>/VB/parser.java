
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Nov 02 16:50:10 CST 2012
//----------------------------------------------------

import java_cup.runtime.*;
import java.lang.*;
import java.util.*;
import javax.swing.*;
import java.awt.Desktop;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Nov 02 16:50:10 CST 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\004\000\002\002\005\000\002\002" +
    "\003\000\002\004\004\000\002\004\003\000\002\007\006" +
    "\000\002\007\003\000\002\006\004\000\002\006\003\000" +
    "\002\011\011\000\002\012\004\000\002\012\003\000\002" +
    "\013\006\000\002\013\004\000\002\015\006\000\002\016" +
    "\003\000\002\016\006\000\002\016\005\000\002\017\004" +
    "\000\002\017\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\021\017\000\002" +
    "\021\003\000\002\022\004\000\002\022\003\000\002\023" +
    "\010\000\002\023\005\000\002\005\004\000\002\005\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\006\003\006\004\010\001\002\000\004\002" +
    "\123\001\002\000\010\003\ufffd\004\ufffd\027\ufffd\001\002" +
    "\000\012\002\uffff\003\ufffb\004\ufffb\027\ufffb\001\002\000" +
    "\010\003\027\004\010\027\031\001\002\000\012\003\011" +
    "\021\012\025\014\026\013\001\002\000\026\003\uffde\005" +
    "\uffde\007\uffde\016\uffde\020\uffde\021\uffde\022\uffde\023\uffde" +
    "\025\uffde\026\uffde\001\002\000\026\003\uffe0\005\uffe0\007" +
    "\uffe0\016\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\025\uffe0" +
    "\026\uffe0\001\002\000\026\003\uffdf\005\uffdf\007\uffdf\016" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\025\uffdf\026\uffdf" +
    "\001\002\000\026\003\uffe1\005\uffe1\007\uffe1\016\uffe1\020" +
    "\uffe1\021\uffe1\022\uffe1\023\uffe1\025\uffe1\026\uffe1\001\002" +
    "\000\026\003\uffe2\005\uffe2\007\uffe2\016\uffe2\020\uffe2\021" +
    "\uffe2\022\uffe2\023\uffe2\025\uffe2\026\uffe2\001\002\000\014" +
    "\003\011\016\017\021\012\025\014\026\013\001\002\000" +
    "\012\003\022\013\023\014\025\015\021\001\002\000\026" +
    "\003\uffe3\005\uffe3\007\uffe3\016\uffe3\020\uffe3\021\uffe3\022" +
    "\uffe3\023\uffe3\025\uffe3\026\uffe3\001\002\000\010\003\uffdd" +
    "\004\uffdd\027\uffdd\001\002\000\010\003\uffda\004\uffda\027" +
    "\uffda\001\002\000\010\003\uffdc\004\uffdc\027\uffdc\001\002" +
    "\000\010\003\ufffc\004\ufffc\027\ufffc\001\002\000\010\003" +
    "\uffdb\004\uffdb\027\uffdb\001\002\000\010\003\ufffe\004\ufffe" +
    "\027\ufffe\001\002\000\010\003\ufffb\004\ufffb\027\ufffb\001" +
    "\002\000\006\003\ufff9\027\ufff9\001\002\000\012\003\011" +
    "\021\012\025\014\026\013\001\002\000\006\003\033\027" +
    "\036\001\002\000\004\002\uffe8\001\002\000\004\002\000" +
    "\001\002\000\006\003\ufffa\027\ufffa\001\002\000\014\003" +
    "\011\010\037\021\012\025\014\026\013\001\002\000\004" +
    "\022\075\001\002\000\014\003\011\021\012\022\041\025" +
    "\014\026\013\001\002\000\004\023\042\001\002\000\004" +
    "\017\043\001\002\000\006\005\044\007\046\001\002\000" +
    "\012\003\011\021\012\025\014\026\013\001\002\000\010" +
    "\005\ufff6\007\ufff6\020\ufff6\001\002\000\004\022\052\001" +
    "\002\000\010\005\044\007\046\020\051\001\002\000\010" +
    "\005\ufff7\007\ufff7\020\ufff7\001\002\000\006\003\ufff8\027" +
    "\ufff8\001\002\000\004\006\054\001\002\000\004\023\073" +
    "\001\002\000\004\022\055\001\002\000\012\003\011\021" +
    "\012\025\014\026\013\001\002\000\004\023\072\001\002" +
    "\000\024\003\011\005\ufff2\007\ufff2\020\ufff2\021\012\022" +
    "\060\023\ufff2\025\014\026\013\001\002\000\014\003\064" +
    "\023\063\024\062\025\067\026\065\001\002\000\014\003" +
    "\064\023\070\024\062\025\067\026\065\001\002\000\014" +
    "\003\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\001\002\000" +
    "\012\005\ufff0\007\ufff0\020\ufff0\023\ufff0\001\002\000\014" +
    "\003\uffea\023\uffea\024\uffea\025\uffea\026\uffea\001\002\000" +
    "\014\003\uffec\023\uffec\024\uffec\025\uffec\026\uffec\001\002" +
    "\000\014\003\uffee\023\uffee\024\uffee\025\uffee\026\uffee\001" +
    "\002\000\014\003\uffed\023\uffed\024\uffed\025\uffed\026\uffed" +
    "\001\002\000\012\005\ufff1\007\ufff1\020\ufff1\023\ufff1\001" +
    "\002\000\014\003\uffef\023\uffef\024\uffef\025\uffef\026\uffef" +
    "\001\002\000\004\023\ufff3\001\002\000\010\005\ufff5\007" +
    "\ufff5\020\ufff5\001\002\000\010\005\ufff4\007\ufff4\020\ufff4" +
    "\001\002\000\004\023\076\001\002\000\004\017\077\001" +
    "\002\000\004\011\100\001\002\000\004\022\101\001\002" +
    "\000\012\003\011\021\012\025\014\026\013\001\002\000" +
    "\014\003\011\016\103\021\012\025\014\026\013\001\002" +
    "\000\004\013\104\001\002\000\004\023\105\001\002\000" +
    "\014\003\011\012\107\021\012\025\014\026\013\001\002" +
    "\000\014\003\011\021\012\022\121\025\014\026\013\001" +
    "\002\000\004\022\114\001\002\000\016\003\011\012\107" +
    "\020\112\021\012\025\014\026\013\001\002\000\016\003" +
    "\uffe6\012\uffe6\020\uffe6\021\uffe6\025\uffe6\026\uffe6\001\002" +
    "\000\004\002\uffe9\001\002\000\016\003\uffe7\012\uffe7\020" +
    "\uffe7\021\uffe7\025\uffe7\026\uffe7\001\002\000\012\003\011" +
    "\021\012\025\014\026\013\001\002\000\014\003\011\016" +
    "\116\021\012\025\014\026\013\001\002\000\004\014\117" +
    "\001\002\000\004\023\120\001\002\000\016\003\uffe5\012" +
    "\uffe5\020\uffe5\021\uffe5\025\uffe5\026\uffe5\001\002\000\004" +
    "\023\122\001\002\000\016\003\uffe4\012\uffe4\020\uffe4\021" +
    "\uffe4\025\uffe4\026\uffe4\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\010\002\003\004\006\007\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\031\007\025\011\027\001\001\000\006\005\015\010" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\017\001\001\000\004\014\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\037\010\014\001" +
    "\001\000\006\011\034\021\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\037\010" +
    "\014\001\001\000\002\001\001\000\004\010\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\046\013" +
    "\044\001\001\000\010\005\056\010\014\016\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\056\010\014\016\055\001\001\000\002\001\001\000\004" +
    "\010\017\001\001\000\006\017\060\020\065\001\001\000" +
    "\004\020\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\101\010\014\001\001\000\004\010\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\105" +
    "\010\014\022\107\023\110\001\001\000\004\010\017\001" +
    "\001\000\002\001\001\000\010\005\105\010\014\023\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\114\010\014\001\001\000\004\010\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public static void main(String args[]) throws Exception {

// La clase Yylex es creada por el analizador l√©xico

new parser(new Yylex(System.in)).parse();
}

public void syntax_error(Symbol s){ 
        System.out.println("Error en la L√≠nea " + (s.left+1) +" Columna "+s.right+ ". Identificador " 
+s.value  ); 
}
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error en la L√≠nea " + (s.right+1)+ "Columna "+s.left+". Identificador " + 
s.value + " no reconocido.");}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Bexte ::= error 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bexte",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Bexte ::= pg 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bexte",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Bexte ::= kb 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bexte",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Bexte ::= abap 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bexte",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Bidr ::= error 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Bidr ::= numerito 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Bidr ::= s1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Bidr ::= let 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Bid ::= Bidr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bid",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Bid ::= Bid Bidr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bid",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Bamr ::= Bid s2 s3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bamr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Bamr ::= cp s2 Bid dot pg s3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bamr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Bam ::= Bamr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bam",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Bam ::= Bam Bamr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bam",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Bvmain ::= error 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bvmain",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Bvmain ::= voids princ s2 s3 ya cc s2 Bid dot kb s3 Bam yc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bvmain",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Bparar ::= error 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bparar",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Bparar ::= com 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bparar",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Bparar ::= numerito 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bparar",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Bparar ::= let 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bparar",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Bpara ::= Bparar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bpara",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Bpara ::= Bpara Bparar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bpara",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Bgad ::= Bid s2 s3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bgad",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Bgad ::= Bid s2 Bpara s3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bgad",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Bgad ::= Bid 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bgad",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Bgval ::= gv s2 Bgad s3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bgval",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Badr ::= chama Bgad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Badr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Badr ::= escrivir s2 Bgval s3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Badr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Bad ::= Badr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bad",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Bad ::= Bad Badr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bad",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Bvoidsr ::= voids Bid s2 s3 ya Bad yc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bvoidsr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Bvoids ::= Bvoidsr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bvoids",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Bvoids ::= Bvoids Bvoidsr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bvoids",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Br1 ::= error 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Br1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Br1 ::= imps Bid dot Bexte 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Br1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Bext ::= Br1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bext",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Bext ::= Bext Br1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bext",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // gramatica ::= error 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gramatica",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // gramatica ::= Bext Bvoids Bvmain 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("gramatica",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= gramatica EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

