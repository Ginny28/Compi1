
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jun 03 22:09:56 CST 2013
//----------------------------------------------------

package proy2_compi.estrutura;

import java_cup.runtime.*;
import java.lang.*;
import java.util.*;
import javax.swing.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jun 03 22:09:56 CST 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\177\000\002\002\004\000\002\052\002\000\002\053" +
    "\002\000\002\002\017\000\002\003\004\000\002\003\003" +
    "\000\002\004\007\000\002\005\004\000\002\005\003\000" +
    "\002\010\006\000\002\054\002\000\002\010\012\000\002" +
    "\010\011\000\002\010\011\000\002\010\011\000\002\010" +
    "\010\000\002\010\006\000\002\010\011\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\007\000\002" +
    "\022\005\000\002\022\010\000\002\022\013\000\002\022" +
    "\006\000\002\022\011\000\002\022\003\000\002\014\004" +
    "\000\002\014\003\000\002\015\006\000\002\015\011\000" +
    "\002\015\003\000\002\016\003\000\002\016\003\000\002" +
    "\020\004\000\002\020\003\000\002\017\006\000\002\012" +
    "\004\000\002\012\003\000\002\011\003\000\002\011\003" +
    "\000\002\030\004\000\002\030\003\000\002\006\015\000" +
    "\002\055\002\000\002\056\002\000\002\057\002\000\002" +
    "\006\017\000\002\024\004\000\002\024\003\000\002\025" +
    "\004\000\002\025\003\000\002\031\004\000\002\031\003" +
    "\000\002\060\002\000\002\026\006\000\002\026\003\000" +
    "\002\026\003\000\002\027\010\000\002\027\013\000\002" +
    "\027\005\000\002\027\011\000\002\027\003\000\002\027" +
    "\003\000\002\037\004\000\002\037\003\000\002\040\006" +
    "\000\002\040\011\000\002\040\011\000\002\040\011\000" +
    "\002\040\011\000\002\040\010\000\002\040\006\000\002" +
    "\023\003\000\002\023\003\000\002\042\012\000\002\043" +
    "\004\000\002\043\003\000\002\044\006\000\002\044\012" +
    "\000\002\045\012\000\002\046\004\000\002\046\003\000" +
    "\002\041\005\000\002\041\005\000\002\041\003\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\033\004\000\002\033\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\006\000\002\034\003" +
    "\000\002\034\007\000\002\034\003\000\002\035\004\000" +
    "\002\035\003\000\002\036\003\000\002\036\006\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012a\000\004\042\005\001\002\000\004\002\u012c\001" +
    "\002\000\004\045\007\001\002\000\006\045\ufffc\046\ufffc" +
    "\001\002\000\004\037\u0128\001\002\000\006\045\007\046" +
    "\012\001\002\000\006\045\ufffd\046\ufffd\001\002\000\004" +
    "\042\000\001\002\000\004\042\014\001\002\000\024\013" +
    "\023\016\025\017\027\020\022\047\017\050\030\051\021" +
    "\052\016\053\024\001\002\000\026\013\023\016\025\017" +
    "\027\020\022\043\160\047\017\050\030\051\021\052\016" +
    "\053\024\001\002\000\006\006\135\035\134\001\002\000" +
    "\004\037\106\001\002\000\004\035\103\001\002\000\004" +
    "\006\075\001\002\000\010\004\uff88\013\uff88\035\uff88\001" +
    "\002\000\006\035\uff87\036\057\001\002\000\004\035\044" +
    "\001\002\000\010\004\uff8a\013\uff8a\035\uff8a\001\002\000" +
    "\026\013\ufff9\016\ufff9\017\ufff9\020\ufff9\043\ufff9\047\ufff9" +
    "\050\ufff9\051\ufff9\052\ufff9\053\ufff9\001\002\000\010\004" +
    "\uff89\013\uff89\035\uff89\001\002\000\004\006\031\001\002" +
    "\000\012\013\033\016\025\017\027\020\022\001\002\000" +
    "\004\004\034\001\002\000\010\004\uff87\013\uff87\035\uff87" +
    "\001\002\000\004\035\035\001\002\000\006\013\040\041" +
    "\036\001\002\000\010\006\uffd5\013\uffd5\041\uffd5\001\002" +
    "\000\010\006\uffd7\013\uffd7\041\uffd7\001\002\000\010\006" +
    "\uffd6\013\uffd6\041\uffd6\001\002\000\010\006\043\013\040" +
    "\041\036\001\002\000\010\006\uffd8\013\uffd8\041\uffd8\001" +
    "\002\000\026\013\ufff5\016\ufff5\017\ufff5\020\ufff5\043\ufff5" +
    "\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\001\002\000" +
    "\004\013\045\001\002\000\004\042\046\001\002\000\012" +
    "\013\033\016\025\017\027\020\022\001\002\000\014\013" +
    "\033\016\025\017\027\020\022\043\056\001\002\000\014" +
    "\013\uffda\016\uffda\017\uffda\020\uffda\043\uffda\001\002\000" +
    "\004\035\052\001\002\000\006\013\040\041\036\001\002" +
    "\000\010\006\054\013\040\041\036\001\002\000\014\013" +
    "\uffd9\016\uffd9\017\uffd9\020\uffd9\043\uffd9\001\002\000\014" +
    "\013\uffdb\016\uffdb\017\uffdb\020\uffdb\043\uffdb\001\002\000" +
    "\026\013\ufff2\016\ufff2\017\ufff2\020\ufff2\043\ufff2\047\ufff2" +
    "\050\ufff2\051\ufff2\052\ufff2\053\ufff2\001\002\000\004\023" +
    "\060\001\002\000\004\037\061\001\002\000\012\013\065" +
    "\014\062\015\066\044\063\001\002\000\004\040\uffeb\001" +
    "\002\000\004\040\uffea\001\002\000\004\040\073\001\002" +
    "\000\004\036\067\001\002\000\004\040\uffec\001\002\000" +
    "\004\024\070\001\002\000\004\037\071\001\002\000\004" +
    "\040\072\001\002\000\004\040\uffe9\001\002\000\004\006" +
    "\074\001\002\000\026\013\ufff0\016\ufff0\017\ufff0\020\ufff0" +
    "\043\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\001" +
    "\002\000\012\013\033\016\025\017\027\020\022\001\002" +
    "\000\004\004\077\001\002\000\004\035\100\001\002\000" +
    "\006\013\040\041\036\001\002\000\010\006\102\013\040" +
    "\041\036\001\002\000\026\013\ufff4\016\ufff4\017\ufff4\020" +
    "\ufff4\043\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4" +
    "\001\002\000\006\013\040\041\036\001\002\000\010\006" +
    "\105\013\040\041\036\001\002\000\026\013\ufff8\016\ufff8" +
    "\017\ufff8\020\ufff8\043\ufff8\047\ufff8\050\ufff8\051\ufff8\052" +
    "\ufff8\053\ufff8\001\002\000\004\013\110\001\002\000\004" +
    "\041\127\001\002\000\010\032\112\034\111\041\uffe3\001" +
    "\002\000\004\013\126\001\002\000\006\013\114\014\113" +
    "\001\002\000\004\033\uffdd\001\002\000\004\033\uffdc\001" +
    "\002\000\004\033\116\001\002\000\010\032\120\034\117" +
    "\041\uffe5\001\002\000\004\013\125\001\002\000\006\013" +
    "\114\014\113\001\002\000\004\033\122\001\002\000\006" +
    "\034\123\041\uffe4\001\002\000\004\013\124\001\002\000" +
    "\004\041\uffe6\001\002\000\004\041\uffe7\001\002\000\004" +
    "\041\uffe8\001\002\000\012\013\065\014\062\015\066\044" +
    "\063\001\002\000\004\040\ufff7\001\002\000\004\040\132" +
    "\001\002\000\004\006\133\001\002\000\026\013\ufff6\016" +
    "\ufff6\017\ufff6\020\ufff6\043\ufff6\047\ufff6\050\ufff6\051\ufff6" +
    "\052\ufff6\053\ufff6\001\002\000\006\013\142\041\141\001" +
    "\002\000\012\013\033\016\025\017\027\020\022\001\002" +
    "\000\004\004\137\001\002\000\004\035\140\001\002\000" +
    "\006\013\142\041\141\001\002\000\010\006\uffde\013\uffde" +
    "\041\uffde\001\002\000\004\032\147\001\002\000\010\006" +
    "\145\013\142\041\141\001\002\000\010\006\uffe1\013\uffe1" +
    "\041\uffe1\001\002\000\026\013\ufff3\016\ufff3\017\ufff3\020" +
    "\ufff3\043\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3" +
    "\001\002\000\010\006\uffe2\013\uffe2\041\uffe2\001\002\000" +
    "\006\013\114\014\113\001\002\000\004\033\151\001\002" +
    "\000\012\006\uffe0\013\uffe0\032\152\041\uffe0\001\002\000" +
    "\006\013\114\014\113\001\002\000\004\033\154\001\002" +
    "\000\010\006\uffdf\013\uffdf\041\uffdf\001\002\000\010\006" +
    "\156\013\142\041\141\001\002\000\026\013\ufff1\016\ufff1" +
    "\017\ufff1\020\ufff1\043\ufff1\047\ufff1\050\ufff1\051\ufff1\052" +
    "\ufff1\053\ufff1\001\002\000\026\013\ufffa\016\ufffa\017\ufffa" +
    "\020\ufffa\043\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\053" +
    "\ufffa\001\002\000\004\060\uffff\001\002\000\004\060\162" +
    "\001\002\000\004\042\163\001\002\000\004\061\166\001" +
    "\002\000\006\043\uffd3\061\uffd3\001\002\000\006\043\u0126" +
    "\061\166\001\002\000\004\035\167\001\002\000\004\013" +
    "\170\001\002\000\004\037\171\001\002\000\016\013\033" +
    "\016\025\017\027\020\022\040\173\041\172\001\002\000" +
    "\016\013\uffca\016\uffca\017\uffca\020\uffca\040\uffca\041\uffca" +
    "\001\002\000\004\035\u011d\001\002\000\004\013\u011c\001" +
    "\002\000\016\013\033\016\025\017\027\020\022\040\200" +
    "\041\172\001\002\000\016\013\uffcc\016\uffcc\017\uffcc\020" +
    "\uffcc\040\uffcc\041\uffcc\001\002\000\016\013\uffcd\016\uffcd" +
    "\017\uffcd\020\uffcd\040\uffcd\041\uffcd\001\002\000\004\035" +
    "\201\001\002\000\012\016\205\017\203\020\202\021\206" +
    "\001\002\000\004\042\uff84\001\002\000\004\042\uff85\001" +
    "\002\000\004\042\207\001\002\000\004\042\uff86\001\002" +
    "\000\004\042\uff83\001\002\000\042\013\224\014\215\015" +
    "\230\016\025\017\027\020\022\031\234\041\213\044\216" +
    "\047\231\050\232\051\225\052\226\053\210\054\220\056" +
    "\211\001\002\000\004\035\u0117\001\002\000\004\042\u010e" +
    "\001\002\000\044\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017" +
    "\uffc8\020\uffc8\031\uffc8\041\uffc8\043\uffc8\044\uffc8\047\uffc8" +
    "\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\056\uffc8\001" +
    "\002\000\050\006\uff92\013\uff92\014\uff92\015\uff92\016\uff92" +
    "\017\uff92\020\uff92\031\uff92\040\uff92\041\uff92\043\uff92\044" +
    "\uff92\047\uff92\050\uff92\051\uff92\052\uff92\053\uff92\054\uff92" +
    "\056\uff92\001\002\000\044\013\uffb3\014\uffb3\015\uffb3\016" +
    "\uffb3\017\uffb3\020\uffb3\031\uffb3\041\uffb3\043\uffb3\044\uffb3" +
    "\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\056" +
    "\uffb3\001\002\000\050\006\uff97\013\uff97\014\uff97\015\uff97" +
    "\016\uff97\017\uff97\020\uff97\031\uff97\040\uff97\041\uff97\043" +
    "\uff97\044\uff97\047\uff97\050\uff97\051\uff97\052\uff97\053\uff97" +
    "\054\uff97\056\uff97\001\002\000\050\006\uff94\013\uff94\014" +
    "\uff94\015\uff94\016\uff94\017\uff94\020\uff94\031\uff94\040\uff94" +
    "\041\uff94\043\uff94\044\uff94\047\uff94\050\uff94\051\uff94\052" +
    "\uff94\053\uff94\054\uff94\056\uff94\001\002\000\044\013\uffb4" +
    "\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\031\uffb4\041" +
    "\uffb4\043\uffb4\044\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4" +
    "\053\uffb4\054\uffb4\056\uffb4\001\002\000\004\037\345\001" +
    "\002\000\044\013\224\014\215\015\230\016\025\017\027" +
    "\020\022\031\234\041\213\043\343\044\216\047\231\050" +
    "\232\051\225\052\226\053\210\054\220\056\211\001\002" +
    "\000\046\006\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017" +
    "\uffbf\020\uffbf\031\uffbf\041\uffbf\043\uffbf\044\uffbf\047\uffbf" +
    "\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\056\uffbf\001" +
    "\002\000\004\035\340\001\002\000\056\006\uff98\013\uff98" +
    "\014\uff98\015\uff98\016\uff98\017\uff98\020\uff98\031\uff98\032" +
    "\315\035\uff87\036\316\037\254\041\uff98\043\uff98\044\uff98" +
    "\047\uff98\050\uff98\051\uff98\052\uff98\053\uff98\054\uff98\056" +
    "\uff98\001\002\000\004\006\307\001\002\000\006\006\277" +
    "\035\276\001\002\000\046\006\uffbe\013\uffbe\014\uffbe\015" +
    "\uffbe\016\uffbe\017\uffbe\020\uffbe\031\uffbe\041\uffbe\043\uffbe" +
    "\044\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054" +
    "\uffbe\056\uffbe\001\002\000\050\006\uff96\013\uff96\014\uff96" +
    "\015\uff96\016\uff96\017\uff96\020\uff96\031\uff96\040\uff96\041" +
    "\uff96\043\uff96\044\uff96\047\uff96\050\uff96\051\uff96\052\uff96" +
    "\053\uff96\054\uff96\056\uff96\001\002\000\004\037\247\001" +
    "\002\000\004\006\241\001\002\000\044\013\uffc5\014\uffc5" +
    "\015\uffc5\016\uffc5\017\uffc5\020\uffc5\031\uffc5\041\uffc5\043" +
    "\uffc5\044\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5" +
    "\054\uffc5\056\uffc5\001\002\000\034\013\224\014\215\015" +
    "\230\016\025\017\027\020\022\041\213\044\216\047\231" +
    "\050\232\051\225\052\226\053\210\001\002\000\044\013" +
    "\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\031\uffc4" +
    "\041\uffc4\043\uffc4\044\uffc4\047\uffc4\050\uffc4\051\uffc4\052" +
    "\uffc4\053\uffc4\054\uffc4\056\uffc4\001\002\000\004\006\uffc7" +
    "\001\002\000\004\006\240\001\002\000\044\013\uffc6\014" +
    "\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\031\uffc6\041\uffc6" +
    "\043\uffc6\044\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053" +
    "\uffc6\054\uffc6\056\uffc6\001\002\000\012\013\033\016\025" +
    "\017\027\020\022\001\002\000\004\004\243\001\002\000" +
    "\004\035\244\001\002\000\006\013\040\041\036\001\002" +
    "\000\010\006\246\013\040\041\036\001\002\000\046\006" +
    "\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9" +
    "\031\uffb9\041\uffb9\043\uffb9\044\uffb9\047\uffb9\050\uffb9\051" +
    "\uffb9\052\uffb9\053\uffb9\054\uffb9\056\uffb9\001\002\000\004" +
    "\013\110\001\002\000\004\041\251\001\002\000\014\013" +
    "\253\014\215\015\230\041\213\044\216\001\002\000\004" +
    "\040\274\001\002\000\022\013\uff98\014\uff98\015\uff98\036" +
    "\255\037\254\040\uff98\041\uff98\044\uff98\001\002\000\012" +
    "\013\265\014\262\015\266\041\264\001\002\000\004\024" +
    "\256\001\002\000\004\037\257\001\002\000\004\040\260" +
    "\001\002\000\050\006\uff93\013\uff93\014\uff93\015\uff93\016" +
    "\uff93\017\uff93\020\uff93\031\uff93\040\uff93\041\uff93\043\uff93" +
    "\044\uff93\047\uff93\050\uff93\051\uff93\052\uff93\053\uff93\054" +
    "\uff93\056\uff93\001\002\000\014\013\uff90\014\uff90\015\uff90" +
    "\040\uff90\041\uff90\001\002\000\014\013\uff8d\014\uff8d\015" +
    "\uff8d\040\uff8d\041\uff8d\001\002\000\014\013\265\014\262" +
    "\015\266\040\273\041\264\001\002\000\014\013\uff8b\014" +
    "\uff8b\015\uff8b\040\uff8b\041\uff8b\001\002\000\016\013\uff8f" +
    "\014\uff8f\015\uff8f\037\267\040\uff8f\041\uff8f\001\002\000" +
    "\014\013\uff8c\014\uff8c\015\uff8c\040\uff8c\041\uff8c\001\002" +
    "\000\012\013\265\014\262\015\266\041\264\001\002\000" +
    "\014\013\265\014\262\015\266\040\272\041\264\001\002" +
    "\000\014\013\uff91\014\uff91\015\uff91\040\uff91\041\uff91\001" +
    "\002\000\014\013\uff8e\014\uff8e\015\uff8e\040\uff8e\041\uff8e" +
    "\001\002\000\050\006\uff95\013\uff95\014\uff95\015\uff95\016" +
    "\uff95\017\uff95\020\uff95\031\uff95\040\uff95\041\uff95\043\uff95" +
    "\044\uff95\047\uff95\050\uff95\051\uff95\052\uff95\053\uff95\054" +
    "\uff95\056\uff95\001\002\000\004\006\275\001\002\000\046" +
    "\006\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020" +
    "\uffba\031\uffba\041\uffba\043\uffba\044\uffba\047\uffba\050\uffba" +
    "\051\uffba\052\uffba\053\uffba\054\uffba\056\uffba\001\002\000" +
    "\006\013\142\041\141\001\002\000\012\013\033\016\025" +
    "\017\027\020\022\001\002\000\004\004\301\001\002\000" +
    "\004\035\302\001\002\000\006\013\142\041\141\001\002" +
    "\000\010\006\304\013\142\041\141\001\002\000\046\006" +
    "\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7" +
    "\031\uffb7\041\uffb7\043\uffb7\044\uffb7\047\uffb7\050\uffb7\051" +
    "\uffb7\052\uffb7\053\uffb7\054\uffb7\056\uffb7\001\002\000\010" +
    "\006\306\013\142\041\141\001\002\000\046\006\uffb5\013" +
    "\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\031\uffb5" +
    "\041\uffb5\043\uffb5\044\uffb5\047\uffb5\050\uffb5\051\uffb5\052" +
    "\uffb5\053\uffb5\054\uffb5\056\uffb5\001\002\000\012\013\033" +
    "\016\025\017\027\020\022\001\002\000\004\004\311\001" +
    "\002\000\004\035\312\001\002\000\006\013\040\041\036" +
    "\001\002\000\010\006\314\013\040\041\036\001\002\000" +
    "\046\006\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8" +
    "\020\uffb8\031\uffb8\041\uffb8\043\uffb8\044\uffb8\047\uffb8\050" +
    "\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\056\uffb8\001\002" +
    "\000\006\013\114\014\113\001\002\000\010\022\320\023" +
    "\317\024\256\001\002\000\004\037\321\001\002\000\046" +
    "\006\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020" +
    "\uffc1\031\uffc1\041\uffc1\043\uffc1\044\uffc1\047\uffc1\050\uffc1" +
    "\051\uffc1\052\uffc1\053\uffc1\054\uffc1\056\uffc1\001\002\000" +
    "\014\013\253\014\215\015\230\041\213\044\216\001\002" +
    "\000\016\013\uff99\014\uff99\015\uff99\040\uff99\041\uff99\044" +
    "\uff99\001\002\000\016\013\253\014\215\015\230\040\325" +
    "\041\213\044\216\001\002\000\016\013\uff9a\014\uff9a\015" +
    "\uff9a\040\uff9a\041\uff9a\044\uff9a\001\002\000\004\006\326" +
    "\001\002\000\046\006\uffc0\013\uffc0\014\uffc0\015\uffc0\016" +
    "\uffc0\017\uffc0\020\uffc0\031\uffc0\041\uffc0\043\uffc0\044\uffc0" +
    "\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\056" +
    "\uffc0\001\002\000\004\033\330\001\002\000\006\032\331" +
    "\036\332\001\002\000\006\013\114\014\113\001\002\000" +
    "\004\013\333\001\002\000\046\006\uffc3\013\uffc3\014\uffc3" +
    "\015\uffc3\016\uffc3\017\uffc3\020\uffc3\031\uffc3\041\uffc3\043" +
    "\uffc3\044\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3" +
    "\054\uffc3\056\uffc3\001\002\000\004\033\335\001\002\000" +
    "\004\036\336\001\002\000\004\013\337\001\002\000\046" +
    "\006\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020" +
    "\uffc2\031\uffc2\041\uffc2\043\uffc2\044\uffc2\047\uffc2\050\uffc2" +
    "\051\uffc2\052\uffc2\053\uffc2\054\uffc2\056\uffc2\001\002\000" +
    "\006\013\040\041\036\001\002\000\010\006\342\013\040" +
    "\041\036\001\002\000\046\006\uffbb\013\uffbb\014\uffbb\015" +
    "\uffbb\016\uffbb\017\uffbb\020\uffbb\031\uffbb\041\uffbb\043\uffbb" +
    "\044\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054" +
    "\uffbb\056\uffbb\001\002\000\006\043\uffd2\061\uffd2\001\002" +
    "\000\044\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\031\uffc9\041\uffc9\043\uffc9\044\uffc9\047\uffc9\050\uffc9" +
    "\051\uffc9\052\uffc9\053\uffc9\054\uffc9\056\uffc9\001\002\000" +
    "\012\013\353\026\354\027\350\030\351\001\002\000\014" +
    "\013\353\026\354\027\350\030\351\040\373\001\002\000" +
    "\014\013\uffa8\026\uffa8\027\uffa8\030\uffa8\040\uffa8\001\002" +
    "\000\014\013\uff9c\026\uff9c\027\uff9c\030\uff9c\040\uff9c\001" +
    "\002\000\014\013\uff9d\026\uff9d\027\uff9d\030\uff9d\040\uff9d" +
    "\001\002\000\014\013\uffab\026\uffab\027\uffab\030\uffab\040" +
    "\uffab\001\002\000\020\004\361\005\356\006\363\007\355" +
    "\010\357\011\360\036\364\001\002\000\014\013\uff9b\026" +
    "\uff9b\027\uff9b\030\uff9b\040\uff9b\001\002\000\012\013\uffa0" +
    "\014\uffa0\015\uffa0\044\uffa0\001\002\000\012\013\uffa2\014" +
    "\uffa2\015\uffa2\044\uffa2\001\002\000\012\013\uff9e\014\uff9e" +
    "\015\uff9e\044\uff9e\001\002\000\012\013\uff9f\014\uff9f\015" +
    "\uff9f\044\uff9f\001\002\000\012\013\uffa3\014\uffa3\015\uffa3" +
    "\044\uffa3\001\002\000\012\013\370\014\366\015\372\044" +
    "\371\001\002\000\012\013\uffa1\014\uffa1\015\uffa1\044\uffa1" +
    "\001\002\000\004\025\365\001\002\000\014\013\uffa9\026" +
    "\uffa9\027\uffa9\030\uffa9\040\uffa9\001\002\000\014\013\uffa7" +
    "\026\uffa7\027\uffa7\030\uffa7\040\uffa7\001\002\000\014\013" +
    "\uffaa\026\uffaa\027\uffaa\030\uffaa\040\uffaa\001\002\000\014" +
    "\013\uffa5\026\uffa5\027\uffa5\030\uffa5\040\uffa5\001\002\000" +
    "\014\013\uffa4\026\uffa4\027\uffa4\030\uffa4\040\uffa4\001\002" +
    "\000\014\013\uffa6\026\uffa6\027\uffa6\030\uffa6\040\uffa6\001" +
    "\002\000\004\042\375\001\002\000\014\013\uffac\026\uffac" +
    "\027\uffac\030\uffac\040\uffac\001\002\000\042\013\224\014" +
    "\215\015\230\016\025\017\027\020\022\031\234\041\213" +
    "\044\216\047\231\050\232\051\225\052\226\053\210\054" +
    "\220\056\211\001\002\000\004\043\377\001\002\000\004" +
    "\055\u0102\001\002\000\046\013\uffb0\014\uffb0\015\uffb0\016" +
    "\uffb0\017\uffb0\020\uffb0\031\uffb0\041\uffb0\043\uffb0\044\uffb0" +
    "\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055" +
    "\uffb0\056\uffb0\001\002\000\046\013\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\017\uffb2\020\uffb2\031\uffb2\041\uffb2\043\uffb2\044" +
    "\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2" +
    "\055\u0102\056\uffb2\001\002\000\006\042\u0103\054\u0104\001" +
    "\002\000\042\013\224\014\215\015\230\016\025\017\027" +
    "\020\022\031\234\041\213\044\216\047\231\050\232\051" +
    "\225\052\226\053\210\054\220\056\211\001\002\000\004" +
    "\037\u0105\001\002\000\012\013\353\026\354\027\350\030" +
    "\351\001\002\000\014\013\353\026\354\027\350\030\351" +
    "\040\u0107\001\002\000\004\042\u0108\001\002\000\042\013" +
    "\224\014\215\015\230\016\025\017\027\020\022\031\234" +
    "\041\213\044\216\047\231\050\232\051\225\052\226\053" +
    "\210\054\220\056\211\001\002\000\004\043\u010a\001\002" +
    "\000\046\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020" +
    "\uffae\031\uffae\041\uffae\043\uffae\044\uffae\047\uffae\050\uffae" +
    "\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae\001" +
    "\002\000\004\043\u010c\001\002\000\046\013\uffaf\014\uffaf" +
    "\015\uffaf\016\uffaf\017\uffaf\020\uffaf\031\uffaf\041\uffaf\043" +
    "\uffaf\044\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf" +
    "\054\uffaf\055\uffaf\056\uffaf\001\002\000\046\013\uffb1\014" +
    "\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\031\uffb1\041\uffb1" +
    "\043\uffb1\044\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053" +
    "\uffb1\054\uffb1\055\uffb1\056\uffb1\001\002\000\024\013\033" +
    "\016\025\017\027\020\022\047\231\050\232\051\225\052" +
    "\226\053\210\001\002\000\026\013\033\016\025\017\027" +
    "\020\022\043\u0112\047\231\050\232\051\225\052\226\053" +
    "\210\001\002\000\026\013\uffbc\016\uffbc\017\uffbc\020\uffbc" +
    "\043\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\001" +
    "\002\000\026\013\uffbd\016\uffbd\017\uffbd\020\uffbd\043\uffbd" +
    "\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\001\002\000" +
    "\004\057\u0113\001\002\000\004\037\u0114\001\002\000\012" +
    "\013\353\026\354\027\350\030\351\001\002\000\014\013" +
    "\353\026\354\027\350\030\351\040\u0116\001\002\000\044" +
    "\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad\031" +
    "\uffad\041\uffad\043\uffad\044\uffad\047\uffad\050\uffad\051\uffad" +
    "\052\uffad\053\uffad\054\uffad\056\uffad\001\002\000\004\013" +
    "\u0118\001\002\000\004\042\u0119\001\002\000\012\013\033" +
    "\016\025\017\027\020\022\001\002\000\014\013\033\016" +
    "\025\017\027\020\022\043\u011b\001\002\000\046\006\uffb6" +
    "\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\031" +
    "\uffb6\041\uffb6\043\uffb6\044\uffb6\047\uffb6\050\uffb6\051\uffb6" +
    "\052\uffb6\053\uffb6\054\uffb6\056\uffb6\001\002\000\016\013" +
    "\uffcb\016\uffcb\017\uffcb\020\uffcb\040\uffcb\041\uffcb\001\002" +
    "\000\012\016\uffd1\017\uffd1\020\uffd1\021\uffd1\001\002\000" +
    "\012\016\205\017\203\020\202\021\206\001\002\000\004" +
    "\042\uffd0\001\002\000\004\042\u0121\001\002\000\042\013" +
    "\224\014\215\015\230\016\025\017\027\020\022\031\234" +
    "\041\213\044\216\047\231\050\232\051\225\052\226\053" +
    "\210\054\220\056\211\001\002\000\044\013\224\014\215" +
    "\015\230\016\025\017\027\020\022\031\234\041\213\043" +
    "\uffcf\044\216\047\231\050\232\051\225\052\226\053\210" +
    "\054\220\056\211\001\002\000\004\043\u0124\001\002\000" +
    "\006\043\uffce\061\uffce\001\002\000\006\043\uffd4\061\uffd4" +
    "\001\002\000\004\043\u0127\001\002\000\004\002\ufffe\001" +
    "\002\000\004\012\u0129\001\002\000\004\040\u012a\001\002" +
    "\000\004\006\u012b\001\002\000\006\045\ufffb\046\ufffb\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012a\000\004\002\003\001\001\000\002\001\001\000" +
    "\006\003\007\004\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\010\001\001\000\002\001\001\000" +
    "\004\052\012\001\001\000\002\001\001\000\010\005\014" +
    "\007\017\010\025\001\001\000\006\007\017\010\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\036\012\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\050\017\047\020\046\001\001\000\006" +
    "\007\050\017\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\036\012\052\001\001\000\004\011\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\036\012" +
    "\100\001\001\000\004\011\041\001\001\000\002\001\001" +
    "\000\006\011\036\012\103\001\001\000\004\011\041\001" +
    "\001\000\002\001\001\000\004\022\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\127\001\001\000\004\054\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\154\015\143\001\001\000\004\007\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\142\015" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\163\030\164" +
    "\001\001\000\002\001\001\000\004\006\u0124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\173\024\174\025\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\173\025\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\007\222\023\234\026\211\027\232\031\220" +
    "\034\226\040\221\042\213\045\216\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\007\222\023\234" +
    "\026\343\027\232\034\226\040\221\042\213\045\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\007\222\027\235\034\226\040\221\001" +
    "\001\000\002\001\001\000\004\060\236\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\241\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\036\012\244" +
    "\001\001\000\004\011\041\001\001\000\002\001\001\000" +
    "\004\022\247\001\001\000\002\001\001\000\004\034\251" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\035" +
    "\262\036\260\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\270\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\035\267\036" +
    "\260\001\001\000\004\036\270\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\304\015\143\001\001\000\004" +
    "\007\277\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\302\015\143\001\001\000\004\015\145\001\001" +
    "\000\002\001\001\000\004\015\145\001\001\000\002\001" +
    "\001\000\004\007\307\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\036\012\312\001\001\000\004\011" +
    "\041\001\001\000\002\001\001\000\004\016\326\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\033\322\034\321\001\001\000\002\001\001\000\004" +
    "\034\323\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\333\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\036\012\340\001\001\000\004\011" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\041\351\046\345\051\346\001\001\000" +
    "\006\041\373\051\346\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\361\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\366\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\007\222\023" +
    "\234\026\375\027\232\034\226\040\221\042\213\045\216" +
    "\001\001\000\002\001\001\000\006\043\u0100\044\377\001" +
    "\001\000\002\001\001\000\004\044\u010c\001\001\000\002" +
    "\001\001\000\022\007\222\023\234\026\u010a\027\232\034" +
    "\226\040\221\042\213\045\216\001\001\000\002\001\001" +
    "\000\010\041\351\046\u0105\051\346\001\001\000\006\041" +
    "\373\051\346\001\001\000\002\001\001\000\022\007\222" +
    "\023\234\026\u0108\027\232\034\226\040\221\042\213\045" +
    "\216\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\222\037\u010e\040\u010f\001\001\000\006\007\222\040\u0110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\041\351\046\u0114\051\346" +
    "\001\001\000\006\041\373\051\346\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\050" +
    "\017\047\020\u0119\001\001\000\006\007\050\017\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\055\u011d" +
    "\001\001\000\004\021\u011e\001\001\000\004\056\u011f\001" +
    "\001\000\002\001\001\000\024\007\222\023\234\026\211" +
    "\027\232\031\u0121\034\226\040\221\042\213\045\216\001" +
    "\001\000\024\007\222\023\234\026\343\027\232\034\226" +
    "\040\221\042\213\045\216\057\u0122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public static void main(String args[]) throws Exception {

// La clase Yylex es creada por el analizador léxico

new parser(new Yylex(System.in)).parse();
}
public static ArrayList first = new ArrayList();
public static ArrayList second = new ArrayList();
public static ArrayList third = new ArrayList();
public static ArrayList  four = new ArrayList();

public void syntax_error(Symbol s){ 

System.out.println("Error en la Línea " + (s.left+1) +" Columna "+s.right+ ". Identificador " 
+s.value  ); 
first.add(s.left+1);
second.add(s.right);
third.add(s.value);
four.add("Sintactico");


}

public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " + 
s.value + " no reconocido.");}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


ArrayList varia = new ArrayList();
ArrayList  dts = new ArrayList();
static ArrayList fun = new ArrayList();
static ArrayList  retfun = new ArrayList();
String [] vectorx;
String cadena ="";

public int position(Object  var,ArrayList varis)
{
  for(int j =0;j<varis.size();j++)
  {
	if(varis.get(j).toString().equals(var))
	{
	  return j;
	  
	}
  }
  return 0;

}





  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // tipos1 ::= voids 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // tipos1 ::= decimal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // tipos1 ::= strng 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // tipos1 ::= intgr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // tipos ::= ident 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // tipos ::= decimal 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // tipos ::= strng 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // tipos ::= intgr 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // para3 ::= coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("para3",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // para3 ::= real 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("para3",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // para3 ::= numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("para3",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // para3 ::= ident pabi Bpara3 pcer 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("para3",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // para3 ::= ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("para3",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Bpara3 ::= para3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bpara3",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Bpara3 ::= Bpara3 para3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bpara3",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // para2 ::= coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("para2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // para2 ::= ident ponto extr pabi pcer 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("para2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // para2 ::= cade 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("para2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // para2 ::= ident pabi Bpara3 pcer 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("para2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // para2 ::= real 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("para2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // para2 ::= numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("para2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // para2 ::= ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("para2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Bpara2 ::= para2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bpara2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Bpara2 ::= Bpara2 para2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bpara2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // logicos ::= y 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicos",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // logicos ::= ou 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicos",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // logicos ::= nao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicos",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operad ::= dif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operad",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operad ::= igual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operad",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operad ::= menori 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operad",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operad ::= menor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operad",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operad ::= maiori 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operad",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operad ::= maior 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operad",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tipo2 ::= cade 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tipo2 ::= ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // tipo2 ::= real 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // tipo2 ::= numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // condicion ::= logicos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // condicion ::= ident ponto empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // condicion ::= ident operad tipo2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // rcondicion ::= condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rcondicion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // rcondicion ::= rcondicion condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rcondicion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // suntil ::= rep abrir Bvari2 cerrar until pabi rcondicion pcer 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("suntil",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // asif ::= elses ifs pabi rcondicion pcer abrir Bafun cerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asif",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // asif ::= elses abrir Bafun cerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asif",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // rasif ::= asif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rasif",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // rasif ::= rasif asif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rasif",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sif ::= ifs pabi rcondicion pcer abrir Bafun cerrar rasif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sif",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sent ::= sif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sent ::= suntil 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // varis2 ::= arrays dpts rarray menor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varis2",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // varis2 ::= struc dpts ident abrir radentrito cerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varis2",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // varis2 ::= arrays menor tipos maior dpts rarray menor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varis2",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // varis2 ::= lifo menor tipos maior dpts rvari menor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varis2",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // varis2 ::= fifo menor tipos maior dpts rvari menor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varis2",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // varis2 ::= setvar pabi va coma para2 pcer menor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varis2",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // varis2 ::= tipos dpts rvari menor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varis2",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Bvari2 ::= varis2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bvari2",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Bvari2 ::= Bvari2 varis2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bvari2",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Breto ::= para2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Breto",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Breto ::= varis2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Breto",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Breto ::= ident ponto inser pabi Bpara2 pcer menor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Breto",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Breto ::= ident ponto tam 
            {
              Object RESULT =null;
		 int val = vectorx.length; RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Breto",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Breto ::= ident ab vaden fechar ab vaden fechar ponto ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Breto",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Breto ::= ident ab vaden fechar ponto ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Breto",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Bafun ::= sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bafun",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Bafun ::= Breto 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bafun",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Bafun ::= reto Breto NT$6 menor 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bafun",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$6 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Btudo ::= Bafun 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Btudo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Btudo ::= Btudo Bafun 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Btudo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // para ::= coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("para",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // para ::= tipos ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("para",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Bpara ::= para 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bpara",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Bpara ::= Bpara para 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bpara",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Bfuncoes ::= fu dpts ident pabi pcer dpts NT$3 tipos1 NT$4 abrir Btudo NT$5 cerrar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bfuncoes",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                fun.add(cadena); cadena="";
                retfun.add(v);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$3 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
                cadena += id; 
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                 cadena += pa; 
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                cadena += pc;
             System.out.println(cadena);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Bfuncoes ::= fu dpts ident pabi Bpara pcer dpts tipos1 abrir Btudo cerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bfuncoes",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Brfuncoes ::= Bfuncoes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Brfuncoes",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Brfuncoes ::= Brfuncoes Bfuncoes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Brfuncoes",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // vari ::= coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vari",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // vari ::= ident 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		varia.add(v); dts.add(0);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vari",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // rvari ::= vari 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvari",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // rvari ::= rvari vari 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvari",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // adentrito ::= tipos dpts rvari menor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adentrito",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // radentrito ::= adentrito 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("radentrito",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // radentrito ::= radentrito adentrito 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("radentrito",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // vaden ::= ident 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 int p =position(r,varia);     RESULT= dts.get(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vaden",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // vaden ::= numero 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = r;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vaden",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // array ::= coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // array ::= ident ab vaden fechar ab vaden fechar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // array ::= ident ab vaden fechar 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                System.out.println(p);
		vectorx = new String[Integer.parseInt(p.toString().trim())];
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // rarray ::= array 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rarray",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // rarray ::= rarray array 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rarray",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // va ::= ident 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=id;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("va",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // va ::= ident ab vaden fechar ab vaden fechar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("va",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // va ::= ident ab vaden fechar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("va",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // va ::= ident ab vaden fechar ab vaden fechar cosito ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("va",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // va ::= ident ab vaden fechar cosito ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("va",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // va ::= ident cosito ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("va",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sti ::= ident ponto extr pabi pcer 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sti",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sti ::= cade 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=r;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sti",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sti ::= numero 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=r;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sti",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sti ::= real 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=r;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sti",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fucoes ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fucoes",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // fucoes ::= extr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fucoes",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // fucoes ::= inser 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fucoes",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // varis ::= ident ponto inser pabi sti pcer menor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varis",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // varis ::= arrays dpts rarray menor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varis",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // varis ::= struc dpts ident abrir radentrito cerrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varis",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // varis ::= arrays menor tipos maior dpts rarray menor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varis",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // varis ::= lifo menor tipos maior dpts rvari menor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varis",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // varis ::= fifo menor tipos maior dpts rvari menor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varis",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // varis ::= setvar pabi va coma sti NT$2 pcer menor 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varis",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$2 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
int p = position(v,varia); dts.set(p,r);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // varis ::= tipos dpts rvari menor 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varis",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Bvariables ::= varis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bvariables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Bvariables ::= Bvariables varis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bvariables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inclu ::= inc pabi incluish pcer menor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inclu",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Binc ::= inclu 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Binc",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Binc ::= Binc inclu 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Binc",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lengua ::= abrir Binc vars NT$0 abrir Bvariables cerrar NT$1 func abrir Brfuncoes cerrar cerrar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lengua",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 for(int i=0 ; i<varia.size();i++)
                {
                 System.out.println(varia.get(i)+"->"+dts.get(i));
                
                }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
varia.clear(); dts.clear();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= lengua EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

