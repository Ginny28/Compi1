package proy2.Abap;
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 14 18:54:53 CST 2012
//----------------------------------------------------

import java.awt.Desktop;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java_cup.runtime.*;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 14 18:54:53 CST 2012
  */
public class parser1 extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser1() {super();}

  /** Constructor which sets the default scanner. */
  public parser1(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser1(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\007\000\002\011\004\000\002\012\005\000\002" +
    "\012\002\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\006\007" +
    "\000\002\014\007\000\002\015\004\000\002\015\002\000" +
    "\002\016\007\000\002\016\004\000\002\007\007\000\002" +
    "\017\012\000\002\020\004\000\002\020\002\000\002\021" +
    "\012\000\002\021\004\000\002\021\007\000\002\026\003" +
    "\000\002\026\003\000\002\022\005\000\002\022\010\000" +
    "\002\022\013\000\002\027\007\000\002\027\004\000\002" +
    "\024\005\000\002\024\002\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\006" +
    "\000\002\023\011\000\002\023\003\000\002\023\006\000" +
    "\002\023\006\000\002\023\006\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\010" +
    "\013\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\031\003\000\002\031\002\000\002\032\005\000\002" +
    "\034\006\000\002\034\002\000\002\033\004\000\002\033" +
    "\002\000\002\036\004\000\002\036\002\000\002\037\011" +
    "\000\002\037\011\000\002\037\012\000\002\037\025\000" +
    "\002\037\015\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\010\000\002\037" +
    "\011\000\002\037\006\000\002\037\007\000\002\037\007" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\044\005\000\002\044\003\000\002\045\007\000\002" +
    "\045\005\000\002\045\004\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\050\004\000\002\050\004" +
    "\000\002\050\003\000\002\050\003\000\002\050\004\000" +
    "\002\050\004\000\002\046\004\000\002\046\004\000\002" +
    "\051\004\000\002\053\004\000\002\053\002\000\002\052" +
    "\010\000\002\055\003\000\002\055\003\000\002\054\005" +
    "\000\002\054\002\000\002\035\003\000\002\035\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\022\004\005\010\022\012\010\013\016\014" +
    "\012\015\006\016\023\071\011\001\002\000\024\002\ufffd" +
    "\004\ufffd\010\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016" +
    "\ufffd\071\ufffd\001\002\000\006\045\326\052\325\001\002" +
    "\000\004\004\uffc7\001\002\000\024\002\ufffc\004\ufffc\010" +
    "\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\071\ufffc" +
    "\001\002\000\004\004\uffca\001\002\000\004\004\uffc5\001" +
    "\002\000\004\004\uffc8\001\002\000\004\004\111\001\002" +
    "\000\024\002\ufff9\004\ufff9\010\ufff9\012\ufff9\013\ufff9\014" +
    "\ufff9\015\ufff9\016\ufff9\071\ufff9\001\002\000\004\002\110" +
    "\001\002\000\004\004\uffc9\001\002\000\024\002\ufffa\004" +
    "\ufffa\010\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa" +
    "\071\ufffa\001\002\000\024\002\ufffe\004\005\010\022\012" +
    "\010\013\016\014\012\015\006\016\023\071\011\001\002" +
    "\000\024\002\ufffb\004\ufffb\010\ufffb\012\ufffb\013\ufffb\014" +
    "\ufffb\015\ufffb\016\ufffb\071\ufffb\001\002\000\004\004\027" +
    "\001\002\000\004\004\uffc6\001\002\000\004\011\102\001" +
    "\002\000\004\011\077\001\002\000\004\011\067\001\002" +
    "\000\010\011\ufff5\044\031\045\032\001\002\000\004\011" +
    "\ufff7\001\002\000\004\004\065\001\002\000\006\004\035" +
    "\006\033\001\002\000\006\046\uffe1\070\uffe1\001\002\000" +
    "\004\046\036\001\002\000\006\046\uffe2\070\uffe2\001\002" +
    "\000\010\011\uffec\044\040\045\042\001\002\000\006\011" +
    "\uffec\044\040\001\002\000\004\004\060\001\002\000\004" +
    "\011\uffee\001\002\000\006\004\035\006\033\001\002\000" +
    "\004\046\044\001\002\000\006\011\uffe6\044\046\001\002" +
    "\000\006\011\uffe6\044\046\001\002\000\004\004\050\001" +
    "\002\000\004\011\uffe8\001\002\000\010\011\uffe4\044\uffe4" +
    "\045\051\001\002\000\006\004\035\006\033\001\002\000" +
    "\004\046\053\001\002\000\010\011\uffe3\044\uffe3\045\054" +
    "\001\002\000\006\004\035\006\033\001\002\000\004\046" +
    "\056\001\002\000\006\011\uffe5\044\uffe5\001\002\000\004" +
    "\011\uffe7\001\002\000\010\011\uffea\044\uffea\045\061\001" +
    "\002\000\006\004\035\006\033\001\002\000\004\046\063" +
    "\001\002\000\006\011\uffeb\044\uffeb\001\002\000\004\011" +
    "\uffed\001\002\000\006\011\ufff5\044\031\001\002\000\004" +
    "\011\ufff6\001\002\000\014\012\074\013\072\014\071\015" +
    "\073\016\075\001\002\000\004\042\076\001\002\000\010" +
    "\042\ufff2\044\ufff2\070\ufff2\001\002\000\010\042\ufff3\044" +
    "\ufff3\070\ufff3\001\002\000\010\042\ufff1\044\ufff1\070\ufff1" +
    "\001\002\000\010\042\ufff4\044\ufff4\070\ufff4\001\002\000" +
    "\010\042\ufff0\044\ufff0\070\ufff0\001\002\000\052\002\uffe9" +
    "\004\uffe9\010\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016" +
    "\uffe9\017\uffe9\021\uffe9\022\uffe9\023\uffe9\025\uffe9\030\uffe9" +
    "\031\uffe9\033\uffe9\034\uffe9\050\uffe9\071\uffe9\072\uffe9\001" +
    "\002\000\014\012\074\013\072\014\071\015\073\016\075" +
    "\001\002\000\004\042\101\001\002\000\052\002\uffef\004" +
    "\uffef\010\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef" +
    "\017\uffef\021\uffef\022\uffef\023\uffef\025\uffef\030\uffef\031" +
    "\uffef\033\uffef\034\uffef\050\uffef\071\uffef\072\uffef\001\002" +
    "\000\014\012\074\013\072\014\071\015\073\016\075\001" +
    "\002\000\004\042\104\001\002\000\052\002\ufff8\004\ufff8" +
    "\010\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017" +
    "\ufff8\021\ufff8\022\ufff8\023\ufff8\025\ufff8\030\ufff8\031\ufff8" +
    "\033\ufff8\034\ufff8\050\ufff8\071\ufff8\072\ufff8\001\002\000" +
    "\004\002\000\001\002\000\024\002\ufffe\004\005\010\022" +
    "\012\010\013\016\014\012\015\006\016\023\071\011\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\001\001\002" +
    "\000\004\067\112\001\002\000\006\004\115\070\uffc3\001" +
    "\002\000\004\070\uffc4\001\002\000\004\070\124\001\002" +
    "\000\014\012\074\013\072\014\071\015\073\016\075\001" +
    "\002\000\006\044\120\070\uffc0\001\002\000\004\070\uffc2" +
    "\001\002\000\004\004\121\001\002\000\014\012\074\013" +
    "\072\014\071\015\073\016\075\001\002\000\006\044\120" +
    "\070\uffc0\001\002\000\004\070\uffc1\001\002\000\004\047" +
    "\125\001\002\000\032\004\005\010\022\017\130\021\131" +
    "\022\140\023\134\030\143\031\133\033\132\034\137\050" +
    "\uffbe\072\uffbe\001\002\000\034\004\uffb6\010\uffb6\017\uffb6" +
    "\021\uffb6\022\uffb6\023\uffb6\025\uffb6\030\uffb6\031\uffb6\033" +
    "\uffb6\034\uffb6\050\uffb6\072\uffb6\001\002\000\034\004\uffb5" +
    "\010\uffb5\017\uffb5\021\uffb5\022\uffb5\023\uffb5\025\uffb5\030" +
    "\uffb5\031\uffb5\033\uffb5\034\uffb5\050\uffb5\072\uffb5\001\002" +
    "\000\004\067\313\001\002\000\004\067\271\001\002\000" +
    "\004\067\265\001\002\000\004\064\256\001\002\000\004" +
    "\067\230\001\002\000\034\004\uffb3\010\uffb3\017\uffb3\021" +
    "\uffb3\022\uffb3\023\uffb3\025\uffb3\030\uffb3\031\uffb3\033\uffb3" +
    "\034\uffb3\050\uffb3\072\uffb3\001\002\000\032\004\005\010" +
    "\022\017\130\021\131\022\140\023\134\030\143\031\133" +
    "\033\132\034\137\050\uffbc\072\uffbc\001\002\000\004\067" +
    "\220\001\002\000\004\067\154\001\002\000\006\050\uff91" +
    "\072\152\001\002\000\034\004\uffb4\010\uffb4\017\uffb4\021" +
    "\uffb4\022\uffb4\023\uffb4\025\uffb4\030\uffb4\031\uffb4\033\uffb4" +
    "\034\uffb4\050\uffb4\072\uffb4\001\002\000\004\004\144\001" +
    "\002\000\004\067\145\001\002\000\006\004\115\070\uffc3" +
    "\001\002\000\004\070\147\001\002\000\004\042\150\001" +
    "\002\000\034\004\uffb2\010\uffb2\017\uffb2\021\uffb2\022\uffb2" +
    "\023\uffb2\025\uffb2\030\uffb2\031\uffb2\033\uffb2\034\uffb2\050" +
    "\uffb2\072\uffb2\001\002\000\004\050\153\001\002\000\004" +
    "\050\uff92\001\002\000\024\002\uffcb\004\uffcb\010\uffcb\012" +
    "\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\071\uffcb\001\002" +
    "\000\014\004\164\005\156\006\160\061\163\067\157\001" +
    "\002\000\012\052\204\061\207\062\206\063\205\001\002" +
    "\000\020\052\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063" +
    "\uffa4\070\uffa4\001\002\000\010\004\164\005\156\006\160" +
    "\001\002\000\020\052\uffa5\057\uffa5\060\uffa5\061\uffa5\062" +
    "\uffa5\063\uffa5\070\uffa5\001\002\000\004\070\174\001\002" +
    "\000\010\057\170\060\166\070\uffa9\001\002\000\010\004" +
    "\164\005\156\006\160\001\002\000\020\052\uffa3\057\uffa3" +
    "\060\uffa3\061\uffa3\062\uffa3\063\uffa3\070\uffa3\001\002\000" +
    "\010\057\uffa6\060\uffa6\070\uffa6\001\002\000\004\060\173" +
    "\001\002\000\014\004\164\005\156\006\160\061\163\067" +
    "\157\001\002\000\004\057\171\001\002\000\014\004\uff9b" +
    "\005\uff9b\006\uff9b\061\uff9b\067\uff9b\001\002\000\004\070" +
    "\uffaa\001\002\000\014\004\uff9c\005\uff9c\006\uff9c\061\uff9c" +
    "\067\uff9c\001\002\000\004\047\175\001\002\000\030\004" +
    "\005\010\022\017\130\021\131\022\140\023\134\030\143" +
    "\031\133\033\132\034\137\050\uffbc\001\002\000\004\050" +
    "\201\001\002\000\034\004\005\010\022\017\130\021\131" +
    "\022\140\023\134\025\uffbc\030\143\031\133\033\132\034" +
    "\137\050\uffbc\072\uffbc\001\002\000\010\025\uffbd\050\uffbd" +
    "\072\uffbd\001\002\000\034\004\uffba\010\uffba\017\uffba\021" +
    "\uffba\022\uffba\023\uffba\025\uffba\030\uffba\031\uffba\033\uffba" +
    "\034\uffba\050\uffba\072\uffba\001\002\000\012\052\204\061" +
    "\207\062\206\063\205\001\002\000\010\004\164\005\156" +
    "\006\160\001\002\000\004\052\213\001\002\000\012\004" +
    "\uff9f\005\uff9f\006\uff9f\052\212\001\002\000\012\004\uffa0" +
    "\005\uffa0\006\uffa0\052\211\001\002\000\004\052\210\001" +
    "\002\000\010\004\uffa1\005\uffa1\006\uffa1\001\002\000\010" +
    "\004\uff9d\005\uff9d\006\uff9d\001\002\000\010\004\uff9e\005" +
    "\uff9e\006\uff9e\001\002\000\010\004\uffa2\005\uffa2\006\uffa2" +
    "\001\002\000\004\070\215\001\002\000\010\057\uffa8\060" +
    "\uffa8\070\uffa8\001\002\000\010\004\164\005\156\006\160" +
    "\001\002\000\010\057\uffa7\060\uffa7\070\uffa7\001\002\000" +
    "\010\004\223\007\222\043\224\001\002\000\004\070\225" +
    "\001\002\000\004\070\uffad\001\002\000\004\070\uffab\001" +
    "\002\000\004\070\uffac\001\002\000\004\042\226\001\002" +
    "\000\034\004\uffae\010\uffae\017\uffae\021\uffae\022\uffae\023" +
    "\uffae\025\uffae\030\uffae\031\uffae\033\uffae\034\uffae\050\uffae" +
    "\072\uffae\001\002\000\006\050\uffbf\072\uffbf\001\002\000" +
    "\004\004\231\001\002\000\004\070\232\001\002\000\004" +
    "\047\233\001\002\000\004\024\234\001\002\000\006\006" +
    "\250\043\251\001\002\000\010\024\234\026\uff98\050\uff98" +
    "\001\002\000\006\026\237\050\uff93\001\002\000\004\051" +
    "\242\001\002\000\004\050\241\001\002\000\034\004\uffb9" +
    "\010\uffb9\017\uffb9\021\uffb9\022\uffb9\023\uffb9\025\uffb9\030" +
    "\uffb9\031\uffb9\033\uffb9\034\uffb9\050\uffb9\072\uffb9\001\002" +
    "\000\030\004\005\010\022\017\130\021\131\022\140\023" +
    "\134\030\143\031\133\033\132\034\137\050\uffbc\001\002" +
    "\000\004\050\uff94\001\002\000\010\024\234\026\uff98\050" +
    "\uff98\001\002\000\006\026\uff9a\050\uff9a\001\002\000\006" +
    "\026\uff99\050\uff99\001\002\000\004\051\252\001\002\000" +
    "\004\051\uff96\001\002\000\004\051\uff95\001\002\000\030" +
    "\004\005\010\022\017\130\021\131\022\140\023\134\025" +
    "\uffbc\030\143\031\133\033\132\034\137\001\002\000\004" +
    "\025\254\001\002\000\004\042\255\001\002\000\010\024" +
    "\uff97\026\uff97\050\uff97\001\002\000\004\004\257\001\002" +
    "\000\006\042\261\067\260\001\002\000\006\004\115\070" +
    "\uffc3\001\002\000\034\004\uffb0\010\uffb0\017\uffb0\021\uffb0" +
    "\022\uffb0\023\uffb0\025\uffb0\030\uffb0\031\uffb0\033\uffb0\034" +
    "\uffb0\050\uffb0\072\uffb0\001\002\000\004\070\263\001\002" +
    "\000\004\042\264\001\002\000\034\004\uffb1\010\uffb1\017" +
    "\uffb1\021\uffb1\022\uffb1\023\uffb1\025\uffb1\030\uffb1\031\uffb1" +
    "\033\uffb1\034\uffb1\050\uffb1\072\uffb1\001\002\000\010\004" +
    "\223\007\222\043\224\001\002\000\004\070\267\001\002" +
    "\000\004\042\270\001\002\000\034\004\uffaf\010\uffaf\017" +
    "\uffaf\021\uffaf\022\uffaf\023\uffaf\025\uffaf\030\uffaf\031\uffaf" +
    "\033\uffaf\034\uffaf\050\uffaf\072\uffaf\001\002\000\004\004" +
    "\272\001\002\000\004\052\273\001\002\000\004\006\274" +
    "\001\002\000\004\042\275\001\002\000\004\004\276\001" +
    "\002\000\012\052\204\061\207\062\206\063\205\001\002" +
    "\000\004\006\300\001\002\000\004\042\301\001\002\000" +
    "\004\004\302\001\002\000\004\052\303\001\002\000\004" +
    "\004\304\001\002\000\004\053\305\001\002\000\004\006" +
    "\306\001\002\000\004\070\307\001\002\000\004\047\310" +
    "\001\002\000\030\004\005\010\022\017\130\021\131\022" +
    "\140\023\134\030\143\031\133\033\132\034\137\050\uffbc" +
    "\001\002\000\004\050\312\001\002\000\034\004\uffb8\010" +
    "\uffb8\017\uffb8\021\uffb8\022\uffb8\023\uffb8\025\uffb8\030\uffb8" +
    "\031\uffb8\033\uffb8\034\uffb8\050\uffb8\072\uffb8\001\002\000" +
    "\014\004\164\005\156\006\160\061\163\067\157\001\002" +
    "\000\004\070\315\001\002\000\004\047\316\001\002\000" +
    "\030\004\005\010\022\017\130\021\131\022\140\023\134" +
    "\030\143\031\133\033\132\034\137\050\uffbc\001\002\000" +
    "\004\050\320\001\002\000\036\004\uffbb\010\uffbb\017\uffbb" +
    "\020\321\021\uffbb\022\uffbb\023\uffbb\025\uffbb\030\uffbb\031" +
    "\uffbb\033\uffbb\034\uffbb\050\uffbb\072\uffbb\001\002\000\004" +
    "\047\322\001\002\000\030\004\005\010\022\017\130\021" +
    "\131\022\140\023\134\030\143\031\133\033\132\034\137" +
    "\050\uffbc\001\002\000\004\050\324\001\002\000\034\004" +
    "\uffb7\010\uffb7\017\uffb7\021\uffb7\022\uffb7\023\uffb7\025\uffb7" +
    "\030\uffb7\031\uffb7\033\uffb7\034\uffb7\050\uffb7\072\uffb7\001" +
    "\002\000\022\004\337\005\340\006\345\007\336\035\346" +
    "\036\341\037\342\043\343\001\002\000\006\004\035\006" +
    "\033\001\002\000\004\046\330\001\002\000\006\045\332" +
    "\052\331\001\002\000\022\004\337\005\340\006\345\007" +
    "\336\035\346\036\341\037\342\043\343\001\002\000\006" +
    "\004\035\006\033\001\002\000\004\046\334\001\002\000" +
    "\004\052\335\001\002\000\022\004\337\005\340\006\345" +
    "\007\336\035\346\036\341\037\342\043\343\001\002\000" +
    "\014\042\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\001\002" +
    "\000\016\042\uffd7\045\375\053\uffd7\054\uffd7\055\uffd7\056" +
    "\uffd7\001\002\000\014\042\uffd8\053\uffd8\054\uffd8\055\uffd8" +
    "\056\uffd8\001\002\000\004\067\372\001\002\000\004\067" +
    "\367\001\002\000\014\042\uffd6\053\uffd6\054\uffd6\055\uffd6" +
    "\056\uffd6\001\002\000\014\042\360\053\354\054\356\055" +
    "\355\056\353\001\002\000\014\042\uffd9\053\uffd9\054\uffd9" +
    "\055\uffd9\056\uffd9\001\002\000\004\067\350\001\002\000" +
    "\052\002\uffde\004\uffde\010\uffde\012\uffde\013\uffde\014\uffde" +
    "\015\uffde\016\uffde\017\uffde\021\uffde\022\uffde\023\uffde\025" +
    "\uffde\030\uffde\031\uffde\033\uffde\034\uffde\050\uffde\071\uffde" +
    "\072\uffde\001\002\000\006\004\035\006\033\001\002\000" +
    "\004\070\352\001\002\000\014\042\uffd2\053\uffd2\054\uffd2" +
    "\055\uffd2\056\uffd2\001\002\000\022\004\uffcc\005\uffcc\006" +
    "\uffcc\007\uffcc\035\uffcc\036\uffcc\037\uffcc\043\uffcc\001\002" +
    "\000\022\004\uffcf\005\uffcf\006\uffcf\007\uffcf\035\uffcf\036" +
    "\uffcf\037\uffcf\043\uffcf\001\002\000\022\004\uffcd\005\uffcd" +
    "\006\uffcd\007\uffcd\035\uffcd\036\uffcd\037\uffcd\043\uffcd\001" +
    "\002\000\022\004\uffce\005\uffce\006\uffce\007\uffce\035\uffce" +
    "\036\uffce\037\uffce\043\uffce\001\002\000\022\004\337\005" +
    "\340\006\345\007\336\035\346\036\341\037\342\043\343" +
    "\001\002\000\052\002\uffdc\004\uffdc\010\uffdc\012\uffdc\013" +
    "\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\021\uffdc\022\uffdc" +
    "\023\uffdc\025\uffdc\030\uffdc\031\uffdc\033\uffdc\034\uffdc\050" +
    "\uffdc\071\uffdc\072\uffdc\001\002\000\014\042\uffda\053\354" +
    "\054\356\055\355\056\353\001\002\000\022\004\337\005" +
    "\340\006\345\007\336\035\346\036\341\037\342\043\343" +
    "\001\002\000\004\042\364\001\002\000\052\002\uffdd\004" +
    "\uffdd\010\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd" +
    "\017\uffdd\021\uffdd\022\uffdd\023\uffdd\025\uffdd\030\uffdd\031" +
    "\uffdd\033\uffdd\034\uffdd\050\uffdd\071\uffdd\072\uffdd\001\002" +
    "\000\014\042\uffda\053\354\054\356\055\355\056\353\001" +
    "\002\000\004\042\uffdb\001\002\000\006\004\035\006\033" +
    "\001\002\000\004\070\371\001\002\000\014\042\uffd0\053" +
    "\uffd0\054\uffd0\055\uffd0\056\uffd0\001\002\000\006\004\035" +
    "\006\033\001\002\000\004\070\374\001\002\000\014\042" +
    "\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\001\002\000\006" +
    "\004\035\006\033\001\002\000\004\046\377\001\002\000" +
    "\016\042\uffd5\045\u0100\053\uffd5\054\uffd5\055\uffd5\056\uffd5" +
    "\001\002\000\006\004\035\006\033\001\002\000\004\046" +
    "\u0102\001\002\000\014\042\uffd4\053\uffd4\054\uffd4\055\uffd4" +
    "\056\uffd4\001\002\000\052\002\uffdf\004\uffdf\010\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\021\uffdf" +
    "\022\uffdf\023\uffdf\025\uffdf\030\uffdf\031\uffdf\033\uffdf\034" +
    "\uffdf\050\uffdf\071\uffdf\072\uffdf\001\002\000\052\002\uffe0" +
    "\004\uffe0\010\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\017\uffe0\021\uffe0\022\uffe0\023\uffe0\025\uffe0\030\uffe0" +
    "\031\uffe0\033\uffe0\034\uffe0\050\uffe0\071\uffe0\072\uffe0\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\022\002\014\004\017\005\003\006\006\007" +
    "\020\010\016\022\013\030\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\104\004\105\005\003" +
    "\006\006\007\020\010\016\022\013\030\012\001\001\000" +
    "\002\001\001\000\010\011\023\014\024\017\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\040" +
    "\016\036\001\001\000\006\015\063\016\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\042\001\001" +
    "\000\002\001\001\000\006\020\046\021\044\001\001\000" +
    "\006\020\056\021\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\065\001" +
    "\001\000\002\001\001\000\004\013\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\106\004\105\005" +
    "\003\006\006\007\020\010\016\022\013\030\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\031\113\032\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\115\001\001\000\004\034\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\121" +
    "\001\001\000\004\034\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\125\006\126\007\141\022\134" +
    "\033\140\037\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\125\006\126\007\141\022\134\036\226\037\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\145\032\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\044\160\045" +
    "\161\047\154\001\001\000\004\050\215\001\001\000\002" +
    "\001\001\000\004\047\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\166\001\001\000\004\047\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\045\171\047\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\125\006\126\007\141\022\134" +
    "\036\175\037\176\001\001\000\002\001\001\000\016\005" +
    "\125\006\126\007\141\022\134\036\177\037\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\202\001" +
    "\001\000\004\047\213\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\216\001" +
    "\001\000\002\001\001\000\004\040\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\051\235\052\234\001\001\000\004\055\246\001\001" +
    "\000\006\052\243\053\244\001\001\000\004\054\237\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\005\125\006\126\007\141\022\134\036\242\037" +
    "\176\001\001\000\002\001\001\000\006\052\243\053\245" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\125" +
    "\006\126\007\141\022\134\036\252\037\176\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\261\032\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\265\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\276\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\005\125\006\126\007" +
    "\141\022\134\036\310\037\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\044\313\045\161\047\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\125" +
    "\006\126\007\141\022\134\036\316\037\176\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\005\125\006\126\007\141\022\134\036\322\037\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\343" +
    "\027\u0103\001\001\000\004\026\326\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\343\027\u0102\001\001" +
    "\000\004\026\332\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\343\027\346\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\356\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\350\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\360\001\001\000\002\001\001" +
    "\000\006\024\362\025\361\001\001\000\004\023\364\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\365" +
    "\025\361\001\001\000\002\001\001\000\004\026\367\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\372" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\375\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\u0100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  

    public static void main(String args[]) throws Exception {
	new parser1(new Yylex1(System.in)).parse();
     
    }
      public static ArrayList first = new ArrayList();
public static ArrayList second = new ArrayList();
public static ArrayList third = new ArrayList();
    //public static ErrorSintactico es = new ErrorSintactico();
    
    public void syntax_error(Symbol t) {
	//es.GuardarErrorSintactico(t.value.toString(), t.left, t.right);
	report_error("Error Sintactico "+t.value.toString()+" linea: "+t.left+" Fila: "+t.right, t);
           first.add(t.left+1);
second.add(t.right);
third.add(t.value);
    }        
   public static void sinta1()
{
String Reporte= "Sinta1.html";
FileWriter fw = null;
try {
fw = new FileWriter(Reporte);
BufferedWriter bw = new BufferedWriter(fw);
PrintWriter salArch = new PrintWriter(bw);
salArch.println();

//aqui empezas a escribir el html
salArch.print("<html>");
salArch.print("<head>Errores</head>");
salArch.print("<body>");
//definis tu tabla con cada una de las columnas
salArch.print("<table width='200' border='1'><tr><th scope='col'>Numero</th><th scope='col'>Linea</th><th scope='col'>Columna</th><th scope='col'>Error</th></tr>");
int n=0;
//errores,alinea,posicion  son un arrayList del mismo tamano
        for (int i = 0; i<first.size(); i++)
        {
            salArch.print("<tr><td>"+(n+1)+"</td><td>"+first.get(i)+"</td><td>"+second.get(i)+"</td><td>"+third.get(i)+"</td></tr>");
n= n+1;

        }

salArch.println("</table><p>&nbsp;</p><p>&nbsp;</p></body></html>");
salArch.close();
                }
                catch (IOException ex) {
}


try {

            File path = new File("Sinta2.html");
            Desktop.getDesktop().open(path);
        } catch (IOException ex) {
         
        }

}

    
    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

  
    
    
    
      public void ImprimirTokens(String t){
	System.out.println(t);
      }
     

  private final parser1 parser;

  /** Constructor */
  CUP$parser$actions(parser1 parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Def_return ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_return",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Def_return ::= treturn 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_return",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Def_default ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_default",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Def_default ::= tdefault dosPunto Ciclos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_default",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Def_condiSwit ::= caracter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_condiSwit",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Def_condiSwit ::= numEnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_condiSwit",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Z ::= tcase Def_condiSwit dosPunto Ciclos tbreak PuntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Z",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Y ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Y",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Y ::= Z Y 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Y",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Def_st ::= Z Y 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_st",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Def_op ::= and and 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_op",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Def_op ::= ord ord 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_op",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Def_Comp ::= mayor igual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_Comp",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Def_Comp ::= menor igual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_Comp",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Def_Comp ::= menor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_Comp",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Def_Comp ::= mayor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_Comp",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Def_Comp ::= admiracion igual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_Comp",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Def_Comp ::= igual igual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_Comp",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Def_I ::= id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_I",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Def_I ::= numReal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_I",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Def_I ::= numEnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_I",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Cond_1 ::= admiracion Def_I 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cond_1",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Cond_1 ::= Def_I Def_Comp Def_I 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cond_1",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Cond_1 ::= parenA Def_I Def_Comp Def_I parenC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cond_1",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Condicion ::= Cond_1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Condicion ::= Cond_1 Def_op Cond_1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Def_mayus_minus ::= id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_mayus_minus",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Def_mayus_minus ::= caracter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_mayus_minus",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Def_mayus_minus ::= cade 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_mayus_minus",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // I ::= mayus parenA Def_mayus_minus parenC PuntoComa 
            {
              Object RESULT =null;
		 ImprimirTokens("Declaracion Funcion Mayus"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // I ::= minus parenA Def_mayus_minus parenC PuntoComa 
            {
              Object RESULT =null;
		 ImprimirTokens("Declaracion Funcion Minus"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // I ::= tthis punto id PuntoComa 
            {
              Object RESULT =null;
		 ImprimirTokens("Declaracion Funcion this 2"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // I ::= tthis punto id parenA Parametros parenC PuntoComa 
            {
              Object RESULT =null;
		 ImprimirTokens("Declaracion Funcion This"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // I ::= call id parenA Parametros parenC PuntoComa 
            {
              Object RESULT =null;
		 ImprimirTokens("Declaracion Funcion Call"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // I ::= Operacion_Asig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // I ::= Matriz 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // I ::= Vectores 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // I ::= Variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // I ::= tif parenA Condicion parenC llaveA Ciclos llaveC telse llaveA Ciclos llaveC 
            {
              Object RESULT =null;
		 ImprimirTokens("Declaracion if else"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // I ::= tfor parenA id igual numEnt PuntoComa id Def_Comp numEnt PuntoComa id igual id mas numEnt parenC llaveA Ciclos llaveC 
            {
              Object RESULT =null;
		 ImprimirTokens("Declaracion for"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // I ::= tswitch parenA id parenC llaveA Def_st Def_default llaveC 
            {
              Object RESULT =null;
		 ImprimirTokens("Declaracion switch"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // I ::= twhile parenA Condicion parenC llaveA Ciclos llaveC 
            {
              Object RESULT =null;
		 ImprimirTokens("Declaracion while"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // I ::= tif parenA Condicion parenC llaveA Ciclos llaveC 
            {
              Object RESULT =null;
		 ImprimirTokens("Declaracion If"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Ciclos ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ciclos",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Ciclos ::= I Ciclos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ciclos",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Def_Fun ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_Fun",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Def_Fun ::= I Ciclos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_Fun",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // H ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // H ::= coma id Tipo_var H 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // F ::= id Tipo_var H 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Parametros ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parametros",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Parametros ::= F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parametros",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Tipo_Fun ::= tvoid 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Tipo_Fun ::= tchar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Tipo_Fun ::= tbool 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Tipo_Fun ::= tstring 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Tipo_Fun ::= tfloat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Tipo_Fun ::= tint 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Funciones ::= Tipo_Fun id parenA Parametros parenC llaveA Def_Fun Def_return llaveC 
            {
              Object RESULT =null;
		 ImprimirTokens("Declaracion Funcion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Funciones",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Tipo_Op ::= dividir 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo_Op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Tipo_Op ::= multiplicar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo_Op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Tipo_Op ::= menos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo_Op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Tipo_Op ::= mas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo_Op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Valores ::= castString parenA Tam_vec parenC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valores",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Valores ::= castFloat parenA Tam_vec parenC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valores",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Valores ::= castEnt parenA Tam_vec parenC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valores",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Valores ::= cade 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valores",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Valores ::= id corcheteA Tam_vec corcheteC corcheteA Tam_vec corcheteC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valores",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Valores ::= id corcheteA Tam_vec corcheteC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valores",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Valores ::= caracter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valores",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Valores ::= id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valores",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Valores ::= numReal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valores",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Valores ::= numEnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valores",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // D ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // D ::= Tipo_Op Valores D 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E ::= Valores PuntoComa 
            {
              Object RESULT =null;
		 ImprimirTokens("Declaracion Asignacion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E ::= Valores Tipo_Op Valores D PuntoComa 
            {
              Object RESULT =null;
		 ImprimirTokens("Declaracion Operacion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Operacion_Asig ::= id corcheteA Tam_vec corcheteC corcheteA Tam_vec corcheteC igual E 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operacion_Asig",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Operacion_Asig ::= id corcheteA Tam_vec corcheteC igual E 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operacion_Asig",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Operacion_Asig ::= id igual E 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operacion_Asig",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Tam_vec ::= numEnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tam_vec",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Tam_vec ::= id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tam_vec",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Def_Matriz_2 ::= coma id corcheteA Tam_vec corcheteC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_Matriz_2",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Def_Matriz_2 ::= coma id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_Matriz_2",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Def_Matriz_2 ::= coma id corcheteA Tam_vec corcheteC corcheteA Tam_vec corcheteC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_Matriz_2",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // C ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // C ::= Def_Matriz_2 C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Def_Matriz ::= id corcheteA Tam_vec corcheteC corcheteA Tam_vec corcheteC C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_Matriz",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Matriz ::= var Def_Matriz as Tipo_var PuntoComa 
            {
              Object RESULT =null;
		 ImprimirTokens("Declaracion Matriz"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Matriz",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Def_Vec_2 ::= coma id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_Vec_2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Def_Vec_2 ::= coma id corcheteA Tam_vec corcheteC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_Vec_2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // B ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // B ::= Def_Vec_2 B 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Def_Vec ::= id corcheteA Tam_vec corcheteC B 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_Vec",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Vectores ::= var Def_Vec as Tipo_var PuntoComa 
            {
              Object RESULT =null;
		 ImprimirTokens("Declaracion Vector"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Vectores",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Tipo_var ::= tchar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo_var",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Tipo_var ::= tbool 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo_var",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Tipo_var ::= tstring 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo_var",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Tipo_var ::= tfloat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo_var",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Tipo_var ::= tint 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo_var",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // A ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // A ::= coma id A 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Def_Var ::= id A 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_Var",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Variables ::= var Def_Var as Tipo_var PuntoComa 
            {
              Object RESULT =null;
		 ImprimirTokens("Declaracion Variable"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // G ::= Operacion_Asig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // G ::= Funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // G ::= Matriz 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // G ::= Vectores 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // G ::= Variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Gprima ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Gprima",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Gprima ::= G Gprima 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Gprima",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Gramatica ::= G Gprima 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Gramatica",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Gramatica EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

