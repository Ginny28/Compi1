package proy2;


//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 18 22:42:46 CST 2012
//----------------------------------------------------

import java_cup.runtime.*;
import java.lang.*;
import java.util.*;
import javax.swing.*;
import java.awt.Desktop;
import java.io.*;
import java.awt.Color;
import java.awt.image.BufferedImage;
import javax.swing.*;
import java.io.OutputStream;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 18 22:42:46 CST 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\004\000\002\002\005\000\002\003" +
    "\013\000\002\003\003\000\002\004\004\000\002\004\003" +
    "\000\002\021\002\000\002\014\011\000\002\022\002\000" +
    "\002\014\007\000\002\014\010\000\002\023\002\000\002" +
    "\014\007\000\002\024\002\000\002\014\011\000\002\025" +
    "\002\000\002\014\007\000\002\026\002\000\002\014\011" +
    "\000\002\014\003\000\002\027\002\000\002\030\002\000" +
    "\002\031\002\000\002\005\030\000\002\005\003\000\002" +
    "\010\004\000\002\010\003\000\002\015\010\000\002\015" +
    "\010\000\002\015\010\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\032\002\000\002\033\002\000" +
    "\002\006\012\000\002\034\002\000\002\007\006\000\002" +
    "\011\004\000\002\011\003\000\002\035\002\000\002\016" +
    "\010\000\002\016\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\017\004\000" +
    "\002\017\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\004\004\005\001\002\000\004\002\244\001" +
    "\002\000\006\003\006\006\010\001\002\000\004\005\ufffe" +
    "\001\002\000\004\005\243\001\002\000\022\003\021\021" +
    "\015\022\014\024\016\025\022\026\013\027\020\031\012" +
    "\001\002\000\026\003\ufffc\007\ufffc\011\ufffc\021\ufffc\022" +
    "\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\031\ufffc\001\002" +
    "\000\004\060\236\001\002\000\004\060\230\001\002\000" +
    "\004\060\224\001\002\000\004\060\216\001\002\000\004" +
    "\060\212\001\002\000\024\003\021\007\051\021\015\022" +
    "\014\024\016\025\022\026\013\027\020\031\012\001\002" +
    "\000\004\060\044\001\002\000\026\003\uffee\007\uffee\011" +
    "\uffee\021\uffee\022\uffee\024\uffee\025\uffee\026\uffee\027\uffee" +
    "\031\uffee\001\002\000\004\060\023\001\002\000\004\063" +
    "\024\001\002\000\030\003\034\041\033\042\036\043\040" +
    "\044\031\045\025\046\030\047\032\050\035\051\037\052" +
    "\026\001\002\000\004\063\uffd2\001\002\000\004\063\uffcd" +
    "\001\002\000\004\063\ufff4\001\002\000\004\063\uffd1\001" +
    "\002\000\004\063\uffd3\001\002\000\004\063\uffd0\001\002" +
    "\000\004\063\uffd6\001\002\000\004\063\uffcc\001\002\000" +
    "\004\063\uffcf\001\002\000\004\063\uffd5\001\002\000\004" +
    "\063\uffce\001\002\000\004\063\uffd4\001\002\000\004\063" +
    "\042\001\002\000\004\065\043\001\002\000\026\003\ufff3" +
    "\007\ufff3\011\ufff3\021\ufff3\022\ufff3\024\ufff3\025\ufff3\026" +
    "\ufff3\027\ufff3\031\ufff3\001\002\000\004\030\045\001\002" +
    "\000\004\065\ufff2\001\002\000\004\065\047\001\002\000" +
    "\026\003\ufff1\007\ufff1\011\ufff1\021\ufff1\022\ufff1\024\ufff1" +
    "\025\ufff1\026\ufff1\027\ufff1\031\ufff1\001\002\000\026\003" +
    "\ufffd\007\ufffd\011\ufffd\021\ufffd\022\ufffd\024\ufffd\025\ufffd" +
    "\026\ufffd\027\ufffd\031\ufffd\001\002\000\004\010\052\001" +
    "\002\000\022\003\021\021\015\022\014\024\016\025\022" +
    "\026\013\027\020\031\012\001\002\000\024\003\021\011" +
    "\054\021\015\022\014\024\016\025\022\026\013\027\020" +
    "\031\012\001\002\000\004\012\055\001\002\000\006\003" +
    "\060\034\056\001\002\000\004\060\062\001\002\000\004" +
    "\013\061\001\002\000\004\013\uffe9\001\002\000\004\005" +
    "\uffff\001\002\000\004\063\063\001\002\000\004\040\064" +
    "\001\002\000\004\063\uffed\001\002\000\004\063\066\001" +
    "\002\000\004\065\067\001\002\000\004\035\070\001\002" +
    "\000\004\061\uffec\001\002\000\004\061\072\001\002\000" +
    "\004\063\073\001\002\000\040\003\104\062\076\064\075" +
    "\067\114\070\110\071\107\072\106\073\105\074\103\075" +
    "\102\076\101\077\100\100\113\101\111\102\074\001\002" +
    "\000\042\003\uffb7\062\uffb7\063\uffb7\064\uffb7\067\uffb7\070" +
    "\uffb7\071\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7" +
    "\077\uffb7\100\uffb7\101\uffb7\102\uffb7\001\002\000\042\003" +
    "\uffc3\062\uffc3\063\uffc3\064\uffc3\067\uffc3\070\uffc3\071\uffc3" +
    "\072\uffc3\073\uffc3\074\uffc3\075\uffc3\076\uffc3\077\uffc3\100" +
    "\uffc3\101\uffc3\102\uffc3\001\002\000\042\003\uffb6\062\uffb6" +
    "\063\uffb6\064\uffb6\067\uffb6\070\uffb6\071\uffb6\072\uffb6\073" +
    "\uffb6\074\uffb6\075\uffb6\076\uffb6\077\uffb6\100\uffb6\101\uffb6" +
    "\102\uffb6\001\002\000\042\003\104\062\076\063\uffeb\064" +
    "\075\067\114\070\110\071\107\072\106\073\105\074\103" +
    "\075\102\076\101\077\100\100\113\101\111\102\074\001" +
    "\002\000\042\003\uffba\062\uffba\063\uffba\064\uffba\067\uffba" +
    "\070\uffba\071\uffba\072\uffba\073\uffba\074\uffba\075\uffba\076" +
    "\uffba\077\uffba\100\uffba\101\uffba\102\uffba\001\002\000\042" +
    "\003\uffbb\062\uffbb\063\uffbb\064\uffbb\067\uffbb\070\uffbb\071" +
    "\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb\077\uffbb" +
    "\100\uffbb\101\uffbb\102\uffbb\001\002\000\042\003\uffbc\062" +
    "\uffbc\063\uffbc\064\uffbc\067\uffbc\070\uffbc\071\uffbc\072\uffbc" +
    "\073\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc\100\uffbc\101" +
    "\uffbc\102\uffbc\001\002\000\042\003\uffbd\062\uffbd\063\uffbd" +
    "\064\uffbd\067\uffbd\070\uffbd\071\uffbd\072\uffbd\073\uffbd\074" +
    "\uffbd\075\uffbd\076\uffbd\077\uffbd\100\uffbd\101\uffbd\102\uffbd" +
    "\001\002\000\042\003\uffb5\062\uffb5\063\uffb5\064\uffb5\067" +
    "\uffb5\070\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5" +
    "\076\uffb5\077\uffb5\100\uffb5\101\uffb5\102\uffb5\001\002\000" +
    "\042\003\uffbe\062\uffbe\063\uffbe\064\uffbe\067\uffbe\070\uffbe" +
    "\071\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe\077" +
    "\uffbe\100\uffbe\101\uffbe\102\uffbe\001\002\000\042\003\uffbf" +
    "\062\uffbf\063\uffbf\064\uffbf\067\uffbf\070\uffbf\071\uffbf\072" +
    "\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf" +
    "\101\uffbf\102\uffbf\001\002\000\042\003\uffc0\062\uffc0\063" +
    "\uffc0\064\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0" +
    "\074\uffc0\075\uffc0\076\uffc0\077\uffc0\100\uffc0\101\uffc0\102" +
    "\uffc0\001\002\000\042\003\uffc1\062\uffc1\063\uffc1\064\uffc1" +
    "\067\uffc1\070\uffc1\071\uffc1\072\uffc1\073\uffc1\074\uffc1\075" +
    "\uffc1\076\uffc1\077\uffc1\100\uffc1\101\uffc1\102\uffc1\001\002" +
    "\000\042\003\uffb8\062\uffb8\063\uffb8\064\uffb8\067\uffb8\070" +
    "\uffb8\071\uffb8\072\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8" +
    "\077\uffb8\100\uffb8\101\uffb8\102\uffb8\001\002\000\042\003" +
    "\uffc4\062\uffc4\063\uffc4\064\uffc4\067\uffc4\070\uffc4\071\uffc4" +
    "\072\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4\077\uffc4\100" +
    "\uffc4\101\uffc4\102\uffc4\001\002\000\042\003\uffb9\062\uffb9" +
    "\063\uffb9\064\uffb9\067\uffb9\070\uffb9\071\uffb9\072\uffb9\073" +
    "\uffb9\074\uffb9\075\uffb9\076\uffb9\077\uffb9\100\uffb9\101\uffb9" +
    "\102\uffb9\001\002\000\042\003\uffc2\062\uffc2\063\uffc2\064" +
    "\uffc2\067\uffc2\070\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2" +
    "\075\uffc2\076\uffc2\077\uffc2\100\uffc2\101\uffc2\102\uffc2\001" +
    "\002\000\042\003\uffc5\062\uffc5\063\uffc5\064\uffc5\067\uffc5" +
    "\070\uffc5\071\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5\076" +
    "\uffc5\077\uffc5\100\uffc5\101\uffc5\102\uffc5\001\002\000\004" +
    "\063\117\001\002\000\004\065\120\001\002\000\004\036" +
    "\121\001\002\000\004\060\122\001\002\000\004\063\123" +
    "\001\002\000\004\037\124\001\002\000\004\063\125\001" +
    "\002\000\004\065\126\001\002\000\016\003\136\014\140" +
    "\016\133\021\131\023\137\031\130\001\002\000\020\003" +
    "\136\013\uffea\014\140\016\133\021\131\023\137\031\130" +
    "\001\002\000\004\060\204\001\002\000\004\060\177\001" +
    "\002\000\020\003\uffe3\013\uffe3\014\uffe3\016\uffe3\021\uffe3" +
    "\023\uffe3\031\uffe3\001\002\000\006\003\uffdd\020\uffdd\001" +
    "\002\000\020\003\uffe7\013\uffe7\014\uffe7\016\uffe7\021\uffe7" +
    "\023\uffe7\031\uffe7\001\002\000\020\003\uffe2\013\uffe2\014" +
    "\uffe2\016\uffe2\021\uffe2\023\uffe2\031\uffe2\001\002\000\020" +
    "\003\uffe1\013\uffe1\014\uffe1\016\uffe1\021\uffe1\023\uffe1\031" +
    "\uffe1\001\002\000\004\060\150\001\002\000\004\063\uffe0" +
    "\001\002\000\004\063\142\001\002\000\040\003\104\062" +
    "\076\064\075\067\114\070\110\071\107\072\106\073\105" +
    "\074\103\075\102\076\101\077\100\100\113\101\111\102" +
    "\074\001\002\000\042\003\104\062\076\063\uffdf\064\075" +
    "\067\114\070\110\071\107\072\106\073\105\074\103\075" +
    "\102\076\101\077\100\100\113\101\111\102\074\001\002" +
    "\000\004\063\145\001\002\000\004\065\146\001\002\000" +
    "\004\015\147\001\002\000\020\003\uffde\013\uffde\014\uffde" +
    "\016\uffde\021\uffde\023\uffde\031\uffde\001\002\000\004\063" +
    "\151\001\002\000\016\003\154\053\155\054\156\055\160" +
    "\056\153\057\152\001\002\000\004\063\uffc7\001\002\000" +
    "\004\063\uffc8\001\002\000\004\063\uffc6\001\002\000\004" +
    "\063\uffcb\001\002\000\004\063\uffca\001\002\000\004\063" +
    "\161\001\002\000\004\063\uffc9\001\002\000\004\065\162" +
    "\001\002\000\020\003\uffe5\013\uffe5\014\uffe5\016\uffe5\021" +
    "\uffe5\023\uffe5\031\uffe5\001\002\000\006\003\164\020\165" +
    "\001\002\000\010\003\uffd7\017\uffd7\020\uffd7\001\002\000" +
    "\004\063\172\001\002\000\010\003\uffda\017\uffda\020\uffda" +
    "\001\002\000\010\003\164\017\170\020\165\001\002\000" +
    "\020\003\uffdc\013\uffdc\014\uffdc\016\uffdc\021\uffdc\023\uffdc" +
    "\031\uffdc\001\002\000\010\003\uffdb\017\uffdb\020\uffdb\001" +
    "\002\000\040\003\104\062\076\064\075\067\114\070\110" +
    "\071\107\072\106\073\105\074\103\075\102\076\101\077" +
    "\100\100\113\101\111\102\074\001\002\000\042\003\104" +
    "\062\076\063\uffd9\064\075\067\114\070\110\071\107\072" +
    "\106\073\105\074\103\075\102\076\101\077\100\100\113" +
    "\101\111\102\074\001\002\000\004\063\175\001\002\000" +
    "\004\065\176\001\002\000\010\003\uffd8\017\uffd8\020\uffd8" +
    "\001\002\000\004\063\200\001\002\000\030\003\034\041" +
    "\033\042\036\043\040\044\031\045\025\046\030\047\032" +
    "\050\035\051\037\052\026\001\002\000\004\063\202\001" +
    "\002\000\004\065\203\001\002\000\020\003\uffe6\013\uffe6" +
    "\014\uffe6\016\uffe6\021\uffe6\023\uffe6\031\uffe6\001\002\000" +
    "\004\063\205\001\002\000\030\003\034\041\033\042\036" +
    "\043\040\044\031\045\025\046\030\047\032\050\035\051" +
    "\037\052\026\001\002\000\004\063\207\001\002\000\004" +
    "\065\210\001\002\000\020\003\uffe4\013\uffe4\014\uffe4\016" +
    "\uffe4\021\uffe4\023\uffe4\031\uffe4\001\002\000\020\003\uffe8" +
    "\013\uffe8\014\uffe8\016\uffe8\021\uffe8\023\uffe8\031\uffe8\001" +
    "\002\000\004\032\213\001\002\000\004\065\ufff6\001\002" +
    "\000\004\065\215\001\002\000\026\003\ufff5\007\ufff5\011" +
    "\ufff5\021\ufff5\022\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5" +
    "\031\ufff5\001\002\000\004\063\217\001\002\000\030\003" +
    "\034\041\033\042\036\043\040\044\031\045\025\046\030" +
    "\047\032\050\035\051\037\052\026\001\002\000\004\063" +
    "\ufffb\001\002\000\004\063\222\001\002\000\004\065\223" +
    "\001\002\000\026\003\ufffa\007\ufffa\011\ufffa\021\ufffa\022" +
    "\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\031\ufffa\001\002" +
    "\000\004\062\225\001\002\000\004\065\ufff9\001\002\000" +
    "\004\065\227\001\002\000\026\003\ufff8\007\ufff8\011\ufff8" +
    "\021\ufff8\022\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\031" +
    "\ufff8\001\002\000\004\063\231\001\002\000\004\033\232" +
    "\001\002\000\004\063\ufff0\001\002\000\004\063\234\001" +
    "\002\000\004\065\235\001\002\000\026\003\uffef\007\uffef" +
    "\011\uffef\021\uffef\022\uffef\024\uffef\025\uffef\026\uffef\027" +
    "\uffef\031\uffef\001\002\000\004\063\237\001\002\000\030" +
    "\003\034\041\033\042\036\043\040\044\031\045\025\046" +
    "\030\047\032\050\035\051\037\052\026\001\002\000\004" +
    "\063\241\001\002\000\004\065\242\001\002\000\026\003" +
    "\ufff7\007\ufff7\011\ufff7\021\ufff7\022\ufff7\024\ufff7\025\ufff7" +
    "\026\ufff7\027\ufff7\031\ufff7\001\002\000\004\002\000\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\016\014\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\052\014\010\001\001" +
    "\000\004\014\047\001\001\000\002\001\001\000\004\005" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\076\020\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\114\031\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\131\007\134\010" +
    "\126\015\133\001\001\000\010\006\131\007\134\015\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\140\001\001\000\002\001\001\000\006\017\142\020\111" +
    "\001\001\000\006\020\114\033\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\166\016\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\172\020\111\001\001\000\006\020" +
    "\114\035\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\213\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\217" +
    "\001\001\000\004\021\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\225\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\232\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\237\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public static void main(String args[]) throws Exception {

// La clase Yylex es creada por el analizador léxico

new parser(new Yylex(System.in)).parse();
}
public static ArrayList first = new ArrayList();
public static ArrayList second = new ArrayList();
public static ArrayList third = new ArrayList();

public void syntax_error(Symbol s){ 

        System.out.println("Error en la Línea " + (s.left+1) +" Columna "+s.right+ ". Identificador " 
+s.value  ); 
first.add(s.left+1);
second.add(s.right);
third.add(s.value);



}
 public static void sinta2()
{
String Reporte= "Sinta2.html";
FileWriter fw = null;
try {
fw = new FileWriter(Reporte);
BufferedWriter bw = new BufferedWriter(fw);
PrintWriter salArch = new PrintWriter(bw);
salArch.println();

//aqui empezas a escribir el html
salArch.print("<html>");
salArch.print("<head>Errores</head>");
salArch.print("<body>");
//definis tu tabla con cada una de las columnas
salArch.print("<table width='200' border='1'><tr><th scope='col'>Numero</th><th scope='col'>Linea</th><th scope='col'>Columna</th><th scope='col'>Error</th></tr>");
int n=0;
//errores,alinea,posicion  son un arrayList del mismo tamano
        for (int i = 0; i<first.size(); i++)
        {
            salArch.print("<tr><td>"+(n+1)+"</td><td>"+first.get(i)+"</td><td>"+second.get(i)+"</td><td>"+third.get(i)+"</td></tr>");
n= n+1;

        }

salArch.println("</table><p>&nbsp;</p><p>&nbsp;</p></body></html>");
salArch.close();
                }
                catch (IOException ex) {
}


try {

            File path = new File("Sinta2.html");
            Desktop.getDesktop().open(path);
        } catch (IOException ex) {
         
        }

}


public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " + 
s.value + " no reconocido.");}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



public static ArrayList todo = new ArrayList();
public static Color cb;
public static int tf,bo,tm=0;
public static boolean tof;
public static String cadena="";
public static JPanel panel1;
public static JTextPane texto;
public static JPanel panel2;
public static JLabel label1;
public static JLabel label2;
public static JTextPane area2;
public static Color cf;
public static ArrayList c = new ArrayList();
public static ArrayList co2 = new ArrayList();
public static ArrayList paths = new ArrayList();
public static ArrayList bos = new ArrayList();
public static ArrayList vi = new ArrayList();
public static String s,cadenita,oh,ns,vs,vs2,vs3;
public static String aux="";


public static void colorborde(String color)
 {

 if(color.equalsIgnoreCase("azul"))
{
cb=new java.awt.Color(0,0,233);
}
else if(color.equalsIgnoreCase("rojo"))
{
cb=new java.awt.Color(219,15,27);
}
else if(color.equalsIgnoreCase("verde"))
{
cb=new java.awt.Color(67,161,133);
}
else if(color.equalsIgnoreCase("morado"))
{
cb=new java.awt.Color(99, 45,142);
}
else if(color.equalsIgnoreCase("rosado"))
{
cb=new java.awt.Color(2030, 34, 104);
}
else if(color.equalsIgnoreCase("negro"))
{
cb=new java.awt.Color(5,5,6);
}
else if(color.equalsIgnoreCase("blanco"))
{
cb=Color.white;
}
else if(color.equalsIgnoreCase("gris"))
{
cb=Color.gray;
}
else if(color.equalsIgnoreCase("anaranjado"))
{
cb=Color.orange;
}
else if(color.equalsIgnoreCase("celeste"))
{
cb=new java.awt.Color(42,196,221);
}

 }

public static void colorfondito(String color)
 {
 
 if(color.equalsIgnoreCase("azul"))
{
cf=Color.blue;
}
else if(color.equalsIgnoreCase("rojo"))
{
cf=Color.red;
}
else if(color.equalsIgnoreCase("verde"))
{
cf=Color.green;
}
else if(color.equalsIgnoreCase("morado"))
{
cf=new java.awt.Color(95,55,130);
}
else if(color.equalsIgnoreCase("rosado"))
{
cf=Color.pink;
}
else if(color.equalsIgnoreCase("negro"))
{
cf=Color.black;
}
else if(color.equalsIgnoreCase("blanco"))
{
cf=Color.white;
}
else if(color.equalsIgnoreCase("gris"))
{
cf=Color.gray;
}
else if(color.equalsIgnoreCase("anaranjado"))
{
cf=Color.orange;
}
else if(color.equalsIgnoreCase("celeste"))
{
cf=new java.awt.Color(42,196,221);
}

 }

 void bools (int val)
    {
        if (val== 0)
        {
            tof=false;
        }
        else if (val==1)
        {
            tof =true;
        }
 }

public static void crearInicio()
 {
   
 panel1.setBackground(cf);
 panel1.setBorder(new javax.swing.border.LineBorder(cb,Integer.parseInt(bos.get(0).toString()), tof));
 bos.remove(0);
 c.remove(0);
 ImageIcon icon = new ImageIcon("/home/andychaw/Public/Proy2/src/proy2/"+paths.get(0).toString().trim());

 icon = new ImageIcon(icon.getImage().getScaledInstance(80,80, BufferedImage.SCALE_SMOOTH));
 label1.setIcon(icon);
 


 }

public static void logo()
    {

    if(c.isEmpty())
    {
    cb = Color.white;
    }else
    {
    colorborde(c.get(0).toString());
    }
    if (co2.isEmpty())
    {
    cf = Color.white;
    }else{colorfondito(co2.get(0).toString());}

//System.out.println(cb);
panel2.setBackground(cf);
panel2.setBorder(new javax.swing.border.LineBorder(cb,Integer.parseInt(bos.get(0).toString()), tof));
ImageIcon icon2 = new ImageIcon("/home/andychaw/Public/Proy2/src/proy2/"+paths.get(1).toString().trim());
System.out.println("/home/andychaw/Public/Proy2/src/proy2/"+paths.get(1).toString().trim());
 icon2 = new ImageIcon(icon2.getImage().getScaledInstance(80,80, BufferedImage.SCALE_SMOOTH));
 label2.setIcon(icon2);


}

public static void barra()
{
System.out.println(s);
texto.setContentType("text/html");

 
for(int i=0; i<vi.size();i++){
  
  aux += "<LI>"+vi.get(i);
    }
texto.setText(oh+ ns+vs+aux);
texto.setText(texto.getText()+vs3);

}
public static void textarea()
{

}



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Bidr ::= error 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Bidr ::= numerito 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cadenita+=id+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Bidr ::= com 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cadenita+=id+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Bidr ::= s11 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cadenita+=id+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Bidr ::= s10 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cadenita+=id+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Bidr ::= s9 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cadenita+=id+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Bidr ::= s8 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cadenita+=id+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Bidr ::= s7 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cadenita+=id+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Bidr ::= s6 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cadenita+=id+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Bidr ::= s5 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cadenita+=id+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Bidr ::= s4 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cadenita+=id+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Bidr ::= s3 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cadenita+=id+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Bidr ::= s2 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cadenita+=id+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Bidr ::= s1 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cadenita+=id+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Bidr ::= let 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cadenita+=id+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Bid ::= Bidr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bid",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Bid ::= Bid Bidr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bid",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Bletras ::= error 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bletras",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Bletras ::= courier 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String le = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=le;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bletras",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Bletras ::= verdana 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String le = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=le;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bletras",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Bletras ::= geor 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String le = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=le;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bletras",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Bletras ::= arial 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String le = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=le;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bletras",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Bletras ::= tre 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String le = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=le;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bletras",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Bcolores ::= error 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolores",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Bcolores ::= celeste 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolores",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Bcolores ::= laranja 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolores",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Bcolores ::= nero 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolores",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Bcolores ::= branco 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolores",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Bcolores ::= gris 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolores",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Bcolores ::= rosa 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolores",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Bcolores ::= morado 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolores",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Bcolores ::= verde 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolores",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Bcolores ::= azul 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolores",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Bcolores ::= rojo 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolores",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Bvir ::= error 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bvir",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Bvir ::= vine comi Bid NT$12 comi semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int segleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int segright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object seg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bvir",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$12 ::= 
            {
              Object RESULT =null;
		int segleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int segright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object seg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                
                vi.add(cadenita);
                cadenita ="";
vs2="<LI>"+cadenita;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Bvi ::= Bvir 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bvi",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Bvi ::= Bvi Bvir 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bvi",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Bvine ::= vina NT$11 Bvi vinc 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		vs3="</UL>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bvine",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$11 ::= 
            {
              Object RESULT =null;
vs="<UL type = circle >"; cadenita ="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Bparr ::= para NT$9 comi Bid NT$10 comi semi parc 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int parrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int parrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object parr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bparr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object parr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                ns="<p align= center>"+cadenita+"<br></p>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$9 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Bdepoisr ::= error 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bdepoisr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Bdepoisr ::= Bvine 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bdepoisr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Bdepoisr ::= Bparr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bdepoisr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Bdepoisr ::= colf igual comi Bcolores comi semi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bdepoisr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Bdepoisr ::= fuente igual comi Bletras comi semi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bdepoisr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Bdepoisr ::= fondo igual comi Bcolores comi semi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bdepoisr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Bdepois ::= Bdepoisr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bdepois",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Bdepois ::= Bdepois Bdepoisr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bdepois",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Bbi ::= error 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bbi",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Bbi ::= tamtit igual comi typetxt NT$6 comi semi textti NT$7 dosp comi Bid NT$8 comi semi typefont igual comi typef comi semi Bdepois 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).right;
		String tt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-18)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bbi",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String tt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
oh = "<"+s+">"+ cadenita +"</"+ s +">"; cadenita="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String tt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
cadenita="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$6 ::= 
            {
              Object RESULT =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
s=tt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Biniylogr ::= error 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Biniylogr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Biniylogr ::= image igual comi path NT$5 comi semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Biniylogr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$5 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

	      paths.add(p);
	      System.out.println(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Biniylogr ::= redo igual typered NT$4 semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Biniylogr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$4 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 bools(Integer.parseInt(e));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Biniylogr ::= colbord igual comi Bcolores NT$3 comi semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Biniylogr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$3 ::= 
            {
              Object RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
c.add(col);colorborde(c.get(0).toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Biniylogr ::= bord igual typeb NT$2 semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Biniylogr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

	      bos.add(b);
	      bo=Integer.parseInt(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Biniylogr ::= colf igual comi Bcolores comi semi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Biniylogr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Biniylogr ::= tamf igual numerito NT$1 semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Biniylogr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Integer.parseInt(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Biniylogr ::= fondo igual comi Bcolores NT$0 comi semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object co = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Biniylogr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object co = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
colorfondito(co.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Biniylog ::= Biniylogr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Biniylog",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Biniylog ::= Biniylog Biniylogr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Biniylog",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Bp ::= error 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Bp ::= ina Biniylog inc loga Biniylog logc bia Bbi bic 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // lenguaje ::= xmla Bp xmlc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lenguaje",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= lenguaje EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

