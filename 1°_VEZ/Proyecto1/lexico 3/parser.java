
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Sep 30 23:53:46 CST 2012
//----------------------------------------------------

import java_cup.runtime.*;
import java.lang.*;
import java.util.*;
import javax.swing.*;
import java.awt.Desktop;
import java.io.*;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Sep 30 23:53:46 CST 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\003\000\002\011\004\000\002\011\003" +
    "\000\002\021\002\000\002\004\007\000\002\022\002\000" +
    "\002\004\007\000\002\004\005\000\002\012\004\000\002" +
    "\012\003\000\002\023\002\000\002\005\011\000\002\024" +
    "\002\000\002\005\011\000\002\025\002\000\002\005\011" +
    "\000\002\026\002\000\002\027\002\000\002\005\012\000" +
    "\002\030\002\000\002\005\007\000\002\031\002\000\002" +
    "\005\007\000\002\032\002\000\002\005\006\000\002\015" +
    "\004\000\002\015\003\000\002\017\003\000\002\016\004" +
    "\000\002\016\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\013\004\000\002\013\003\000\002\033" +
    "\002\000\002\006\007\000\002\034\002\000\002\006\007" +
    "\000\002\006\005\000\002\014\004\000\002\014\003\000" +
    "\002\035\002\000\002\007\007\000\002\036\002\000\002" +
    "\037\002\000\002\007\012\000\002\040\002\000\002\007" +
    "\007\000\002\041\002\000\002\042\002\000\002\007\012" +
    "\000\002\010\003\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\006\003\005\004\007\001\002\000\004\002" +
    "\000\001\002\000\004\002\ufffe\001\002\000\004\002\176" +
    "\001\002\000\010\006\014\014\012\016\010\001\002\000" +
    "\004\037\172\001\002\000\012\005\171\006\014\014\012" +
    "\016\010\001\002\000\004\037\164\001\002\000\012\005" +
    "\ufffc\006\ufffc\014\ufffc\016\ufffc\001\002\000\020\010\023" +
    "\020\024\021\017\022\021\023\016\024\020\025\025\001" +
    "\002\000\022\007\ufff5\010\ufff5\020\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\024\ufff5\025\ufff5\001\002\000\004\040\uffee\001" +
    "\002\000\004\040\147\001\002\000\004\040\143\001\002" +
    "\000\004\040\135\001\002\000\022\007\134\010\023\020" +
    "\024\021\017\022\021\023\016\024\020\025\025\001\002" +
    "\000\010\012\uffe7\030\uffe7\031\uffe7\001\002\000\004\040" +
    "\ufff4\001\002\000\004\040\026\001\002\000\004\044\027" +
    "\001\002\000\004\045\uffe9\001\002\000\004\045\031\001" +
    "\002\000\022\007\uffe8\010\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\001\002\000\004\040\033\001" +
    "\002\000\004\041\034\001\002\000\004\042\035\001\002" +
    "\000\006\041\uffe3\042\uffe3\001\002\000\006\041\uffe4\042" +
    "\uffe4\001\002\000\006\041\040\042\035\001\002\000\004" +
    "\045\042\001\002\000\006\041\uffe5\042\uffe5\001\002\000" +
    "\022\007\ufff3\010\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3" +
    "\024\ufff3\025\ufff3\001\002\000\010\012\047\030\046\031" +
    "\045\001\002\000\012\011\131\012\047\030\046\031\045" +
    "\001\002\000\004\037\125\001\002\000\004\037\121\001" +
    "\002\000\012\033\051\034\055\035\052\036\054\001\002" +
    "\000\012\011\uffd9\012\uffd9\030\uffd9\031\uffd9\001\002\000" +
    "\004\040\115\001\002\000\004\040\107\001\002\000\014" +
    "\013\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\001\002\000" +
    "\004\040\uffca\001\002\000\004\040\uffcf\001\002\000\014" +
    "\013\057\033\051\034\055\035\052\036\054\001\002\000" +
    "\012\011\uffd4\012\uffd4\030\uffd4\031\uffd4\001\002\000\014" +
    "\013\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\001\002\000" +
    "\004\040\062\001\002\000\004\041\063\001\002\000\004" +
    "\042\035\001\002\000\006\041\uffce\042\035\001\002\000" +
    "\004\041\066\001\002\000\004\045\067\001\002\000\014" +
    "\013\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\001\002\000" +
    "\004\040\071\001\002\000\004\041\072\001\002\000\016" +
    "\003\077\042\100\044\101\046\074\047\075\050\076\001" +
    "\002\000\020\003\uffe1\041\uffe1\042\uffe1\044\uffe1\046\uffe1" +
    "\047\uffe1\050\uffe1\001\002\000\020\003\uffde\041\uffde\042" +
    "\uffde\044\uffde\046\uffde\047\uffde\050\uffde\001\002\000\020" +
    "\003\uffdd\041\uffdd\042\uffdd\044\uffdd\046\uffdd\047\uffdd\050" +
    "\uffdd\001\002\000\020\003\uffdc\041\uffdc\042\uffdc\044\uffdc" +
    "\046\uffdc\047\uffdc\050\uffdc\001\002\000\020\003\uffdb\041" +
    "\uffdb\042\uffdb\044\uffdb\046\uffdb\047\uffdb\050\uffdb\001\002" +
    "\000\020\003\uffe0\041\uffe0\042\uffe0\044\uffe0\046\uffe0\047" +
    "\uffe0\050\uffe0\001\002\000\020\003\uffdf\041\uffdf\042\uffdf" +
    "\044\uffdf\046\uffdf\047\uffdf\050\uffdf\001\002\000\020\003" +
    "\077\041\uffc9\042\100\044\101\046\074\047\075\050\076" +
    "\001\002\000\020\003\uffe2\041\uffe2\042\uffe2\044\uffe2\046" +
    "\uffe2\047\uffe2\050\uffe2\001\002\000\004\041\105\001\002" +
    "\000\004\045\106\001\002\000\014\013\uffc8\033\uffc8\034" +
    "\uffc8\035\uffc8\036\uffc8\001\002\000\006\043\112\044\110" +
    "\001\002\000\004\045\uffc7\001\002\000\004\045\uffcc\001" +
    "\002\000\004\045\uffc6\001\002\000\004\045\114\001\002" +
    "\000\014\013\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\001" +
    "\002\000\004\044\116\001\002\000\004\045\uffd1\001\002" +
    "\000\004\045\120\001\002\000\014\013\uffd0\033\uffd0\034" +
    "\uffd0\035\uffd0\036\uffd0\001\002\000\004\044\122\001\002" +
    "\000\004\045\uffd8\001\002\000\004\045\124\001\002\000" +
    "\012\011\uffd7\012\uffd7\030\uffd7\031\uffd7\001\002\000\004" +
    "\032\126\001\002\000\004\045\uffd6\001\002\000\004\045" +
    "\130\001\002\000\012\011\uffd5\012\uffd5\030\uffd5\031\uffd5" +
    "\001\002\000\022\007\uffe6\010\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\023\uffe6\024\uffe6\025\uffe6\001\002\000\012\011\uffda" +
    "\012\uffda\030\uffda\031\uffda\001\002\000\022\007\ufff6\010" +
    "\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6" +
    "\001\002\000\012\005\ufff7\006\ufff7\014\ufff7\016\ufff7\001" +
    "\002\000\004\041\136\001\002\000\004\026\137\001\002" +
    "\000\004\041\ufff0\001\002\000\004\041\141\001\002\000" +
    "\004\045\142\001\002\000\022\007\uffef\010\uffef\020\uffef" +
    "\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\001\002\000" +
    "\004\027\144\001\002\000\004\045\uffeb\001\002\000\004" +
    "\045\146\001\002\000\022\007\uffea\010\uffea\020\uffea\021" +
    "\uffea\022\uffea\023\uffea\024\uffea\025\uffea\001\002\000\004" +
    "\041\150\001\002\000\004\042\035\001\002\000\006\041" +
    "\ufff2\042\035\001\002\000\004\041\153\001\002\000\004" +
    "\045\154\001\002\000\022\007\ufff1\010\ufff1\020\ufff1\021" +
    "\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\001\002\000\004" +
    "\040\156\001\002\000\004\041\157\001\002\000\016\003" +
    "\077\042\100\044\101\046\074\047\075\050\076\001\002" +
    "\000\020\003\077\041\uffed\042\100\044\101\046\074\047" +
    "\075\050\076\001\002\000\004\041\162\001\002\000\004" +
    "\045\163\001\002\000\022\007\uffec\010\uffec\020\uffec\021" +
    "\uffec\022\uffec\023\uffec\024\uffec\025\uffec\001\002\000\004" +
    "\015\165\001\002\000\004\045\ufffb\001\002\000\004\045" +
    "\167\001\002\000\012\005\ufffa\006\ufffa\014\ufffa\016\ufffa" +
    "\001\002\000\012\005\ufffd\006\ufffd\014\ufffd\016\ufffd\001" +
    "\002\000\004\002\uffff\001\002\000\004\017\173\001\002" +
    "\000\004\045\ufff9\001\002\000\004\045\175\001\002\000" +
    "\012\005\ufff8\006\ufff8\014\ufff8\016\ufff8\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\012" +
    "\011\010\001\001\000\002\001\001\000\004\004\167\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\014" +
    "\012\021\001\001\000\002\001\001\000\004\026\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\132\001\001\000\004\032\042\001\001\000" +
    "\004\023\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\036" +
    "\017\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\047\013\043\001\001\000" +
    "\004\006\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\052\014\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\067\001\001\000\004\036\060\001\001\000\004\007" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\063\017\035\001" +
    "\001\000\006\017\040\037\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\101\020\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\102\042\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\110\001\001\000\002\001\001\000\004\040\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\150\017\035\001\001\000\006\017\040" +
    "\024\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\157\020\072\001\001\000\006\020\102\027\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public static void main(String args[]) throws Exception {

// La clase Yylex es creada por el analizador léxico

new parser(new Yylex3(System.in)).parse();
}

public void syntax_error(Symbol s){ 
        System.out.println("Error en la Línea " + (s.right+1) +" Columna "+s.left+ ". Identificador " 
+s.value  ); 
}
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " + 
s.value + " no reconocido."); 
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


public static ArrayList first = new ArrayList();
public static ArrayList alls = new ArrayList();
public static String fact , fecha2 ="";
public static String concat="";
public static String concat2="";
public static double suma=0;
public static double total=0;



public static void pdfsito() throws FileNotFoundException, DocumentException
{
Document documento = new Document();

FileOutputStream ficheroPdf = new FileOutputStream("fichero.pdf");
PdfWriter.getInstance(documento,ficheroPdf).setInitialLeading(20);
documento.open();
Paragraph p1 = new Paragraph();
p1.setAlignment(Element.ALIGN_RIGHT);

Chunk ch = new Chunk("Fecha:"+first.get(0)+", Hora:"+first.get(1));

p1.add(ch);
Paragraph p2 = new Paragraph();

Chunk ch2 = new Chunk("Cliente: "+first.get(2)+"\n"+
                       "Nit: "+first.get(3)+"\n"+
                     "Direccion: "+first.get(4)+"\n"+
                     "Telefono: "+first.get(5)+"\n"+
                     "Edad: "+first.get(6)+"\n");
p2.add(ch2);

Paragraph p3 = new Paragraph();
p3.setAlignment(Element.ALIGN_CENTER);

Chunk ch3 = new Chunk("COMPRAS REALIZADAS");

p3.add(ch3);

Paragraph p4 = new Paragraph();

Chunk ch4 = new Chunk("Fact No."++);

p3.add(ch3);

documento.add(p1);
documento.add(p2);
documento.add(p3);

PdfPTable tab = new PdfPTable(5);

tab.addCell(new Paragraph("Cantidad"));
tab.addCell(new Paragraph("Producto"));
tab.addCell(new Paragraph("Precio"));
tab.addCell(new Paragraph("Descripcion"));
tab.addCell(new Paragraph("Subtotal"));
try{
for(int j=0;j<alls.size();j++)
{
    System.out.println(alls.get(j).toString());
    if(alls.get(j).equals("ends")){
    for(int g=j+1;j<alls.size();g=g+4)
        {
            if(alls.get(g) != "ends"){
                tab.addCell(new Paragraph(alls.get(g).toString()));
                tab.addCell(new Paragraph(alls.get(g+1).toString()));
                tab.addCell(new Paragraph(alls.get(g+2).toString()));
                tab.addCell(new Paragraph(alls.get(g+3).toString()));
                tab.addCell(new Paragraph(alls.get(g+2).toString()));
            }else{
                break;
            }


       }
    }

  }}
catch (Exception ex){ex.printStackTrace();}


documento.add(tab);
documento.close();

 

}

public static void totalito()
{
total +=suma;
}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Bnu ::= real 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bnu",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Bnu ::= numb 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bnu",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Bdf ::= desc NT$16 ddot Apos Br6 NT$17 Apos semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bdf",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
alls.add(concat);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$16 ::= 
            {
              Object RESULT =null;
concat ="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Bdf ::= pre ddot Bnu NT$15 semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bdf",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$15 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
alls.add(a);suma+=Double.parseDouble(a.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Bdf ::= pro NT$13 ddot Apos Br5 NT$14 Apos semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bdf",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
alls.add(concat2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$13 ::= 
            {
              Object RESULT =null;
concat2 ="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Bdf ::= can ddot numb NT$12 semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bdf",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$12 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
alls.add(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Br4 ::= Bdf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Br4",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Br4 ::= Br4 Bdf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Br4",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Bfa ::= DeA Br4 DeC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bfa",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Bfa ::= fve equal fech3 NT$11 semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int feleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int feright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String fe = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bfa",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$11 ::= 
            {
              Object RESULT =null;
		int feleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int feright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fe = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
fecha2 = fe;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Bfa ::= numy equal numb NT$10 semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bfa",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$10 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
fact = n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Br3 ::= Bfa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Br3",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Br3 ::= Br3 Bfa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Br3",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Btodo ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Btodo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Btodo ::= com 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		concat+=e+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Btodo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Btodo ::= dot 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		concat+=e+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Btodo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Btodo ::= gui 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		concat+=e+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Btodo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Btodo ::= numb 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		concat+=e+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Btodo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Btodo ::= lett 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		concat+=e+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Btodo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Br6 ::= Btodo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Br6",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Br6 ::= Br6 Btodo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Br6",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Bnap ::= lett 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		concat2+=l+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bnap",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Br5 ::= Bnap 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Br5",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Br5 ::= Br5 Bnap 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Br5",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Bcl ::= FaA NT$9 Br3 FaC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		facts.add("end");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$9 ::= 
            {
              Object RESULT =null;
alls.add("ends");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Bcl ::= age ddot numb NT$8 semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int agleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int agright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$8 ::= 
            {
              Object RESULT =null;
		int agleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int agright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
first.add(ag);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Bcl ::= tel ddot tel2 NT$7 semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String te = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$7 ::= 
            {
              Object RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String te = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
first.add(te);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Bcl ::= dir NT$5 ddot Apos Br6 NT$6 Apos semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
first.add(concat);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$5 ::= 
            {
              Object RESULT =null;
concat="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Bcl ::= nity ddot Apos nity2 NT$4 Apos semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$4 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
first.add(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Bcl ::= lstna ddot Apos Br5 NT$3 Apos semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$3 ::= 
            {
              Object RESULT =null;
first.add(concat2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Bcl ::= names NT$2 ddot Apos Br5 Apos semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$2 ::= 
            {
              Object RESULT =null;
concat2="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Br2 ::= Bcl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Br2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Br2 ::= Br2 Bcl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Br2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BAP ::= CliA Br2 CliC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BAP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BAP ::= hour equal hour2 NT$1 semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BAP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
first.add(h);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BAP ::= date equal fech2 NT$0 semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int feleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int feright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String fe = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BAP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              Object RESULT =null;
		int feleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int feright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fe = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
first.add(fe);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Br1 ::= BAP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Br1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Br1 ::= Br1 BAP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Br1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Bprin ::= error 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bprin",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Bprin ::= ModA Br1 ModC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bprin",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // lengua ::= Bprin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lengua",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= lengua EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

