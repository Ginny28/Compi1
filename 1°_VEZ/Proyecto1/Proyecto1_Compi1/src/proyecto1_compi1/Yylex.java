package proyecto1_compi1;

/* The following code was generated by JFlex 1.4.3 on 10/1/12 1:18 AM */

import java.awt.Desktop;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.lang.System;
import java.util.ArrayList;
import java_cup.runtime.*;

 

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/1/12 1:18 AM from the specification file
 * <tt>LexyT.lex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\54\1\53\2\0\1\54\22\0\1\54\3\0\1\35\2\0"+
    "\1\51\4\0\1\36\1\33\1\4\1\22\1\3\1\5\1\6\1\7"+
    "\1\10\1\10\1\2\1\2\1\2\1\2\1\30\1\52\1\11\1\50"+
    "\1\21\2\0\1\20\1\46\1\41\1\23\1\13\1\40\1\32\1\42"+
    "\1\17\1\45\1\1\1\37\1\26\1\31\1\15\1\43\1\34\1\16"+
    "\1\14\1\12\1\25\1\44\3\1\1\47\4\1\1\24\1\1\1\20"+
    "\1\46\1\41\1\23\1\13\1\40\1\32\1\42\1\17\1\45\1\1"+
    "\1\37\1\26\1\31\1\15\1\43\1\34\1\16\1\14\1\12\1\25"+
    "\1\44\3\1\1\47\126\0\1\27\37\0\1\27\uff0e\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\3\3\1\1\1\2"+
    "\1\4\5\2\1\5\2\2\1\4\7\2\1\6\1\7"+
    "\1\10\1\11\1\12\3\0\2\3\7\0\24\2\1\13"+
    "\1\14\17\0\26\2\21\0\17\2\1\15\1\16\5\2"+
    "\1\17\17\0\3\2\1\20\7\2\1\21\1\2\1\22"+
    "\5\2\1\23\6\0\1\24\1\0\1\25\7\0\7\2"+
    "\1\26\2\2\1\27\4\2\1\30\1\31\15\0\1\2"+
    "\1\32\1\2\1\33\6\2\1\34\2\2\12\0\1\35"+
    "\1\0\1\36\2\2\1\37\1\2\1\40\1\2\1\41"+
    "\3\2\10\0\1\42\1\0\1\43\1\2\1\44\4\2"+
    "\1\45\1\2\1\46\1\0\1\47\1\50\3\0\1\51"+
    "\1\0\6\2\1\52\1\0\1\53\2\0\3\2\1\54"+
    "\2\2\1\55\2\0\1\56\1\57\3\2\2\0\1\2"+
    "\1\60\1\61\1\0\1\62\1\2\1\63\1\2\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[324];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\132\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276"+
    "\0\55\0\u02a3\0\u02d0\0\55\0\u02fd\0\u032a\0\u0357\0\u0384"+
    "\0\u03b1\0\u03de\0\u040b\0\55\0\55\0\55\0\55\0\u0438"+
    "\0\u0465\0\u0492\0\u04bf\0\u04ec\0\u0519\0\u0546\0\u0573\0\u05a0"+
    "\0\u05cd\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db\0\u0708"+
    "\0\u0735\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0870"+
    "\0\u089d\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e\0\u09ab\0\u09d8"+
    "\0\u0465\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13"+
    "\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b"+
    "\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\u0de3"+
    "\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b"+
    "\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3"+
    "\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u121b"+
    "\0\u1248\0\u1275\0\u12a2\0\u12cf\0\u12fc\0\u1329\0\u1356\0\u1383"+
    "\0\u13b0\0\u13dd\0\u140a\0\u1437\0\u1464\0\u1491\0\u14be\0\u14eb"+
    "\0\u1518\0\u1545\0\u1572\0\u159f\0\u15cc\0\u15f9\0\u1626\0\132"+
    "\0\132\0\u1653\0\u1680\0\u16ad\0\u16da\0\u1707\0\55\0\u1734"+
    "\0\u1761\0\u178e\0\u17bb\0\u17e8\0\u1815\0\u1842\0\u186f\0\u189c"+
    "\0\u18c9\0\u18f6\0\u1923\0\u1950\0\u197d\0\u19aa\0\u19d7\0\u1a04"+
    "\0\u1a31\0\132\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ae5\0\u1b12\0\u1b3f"+
    "\0\u1b6c\0\132\0\u1b99\0\132\0\u1bc6\0\u1bf3\0\u1c20\0\u1c4d"+
    "\0\u1c7a\0\132\0\u1ca7\0\u1cd4\0\u1d01\0\u1d2e\0\u1d5b\0\u1d88"+
    "\0\55\0\u1db5\0\55\0\u1de2\0\u1e0f\0\u1e3c\0\u1e69\0\u1e96"+
    "\0\u1ec3\0\u1ef0\0\u1f1d\0\u1f4a\0\u1f77\0\u1fa4\0\u1fd1\0\u1ffe"+
    "\0\u202b\0\132\0\u2058\0\u2085\0\132\0\u20b2\0\u20df\0\u210c"+
    "\0\u2139\0\132\0\132\0\u2166\0\u2193\0\u21c0\0\u21ed\0\u221a"+
    "\0\u2247\0\u2274\0\u22a1\0\u22ce\0\u22fb\0\u2328\0\u2355\0\u2382"+
    "\0\u23af\0\132\0\u23dc\0\132\0\u2409\0\u2436\0\u2463\0\u2490"+
    "\0\u24bd\0\u24ea\0\132\0\u2517\0\u2544\0\u2571\0\u259e\0\u25cb"+
    "\0\u25f8\0\u2625\0\u2652\0\u267f\0\u26ac\0\u26d9\0\u2706\0\55"+
    "\0\u2733\0\55\0\u2760\0\u278d\0\132\0\u27ba\0\u27e7\0\u2814"+
    "\0\132\0\u2841\0\u286e\0\u289b\0\u28c8\0\u28f5\0\u2922\0\u294f"+
    "\0\u297c\0\u29a9\0\u29d6\0\u2a03\0\55\0\u2a30\0\55\0\u2a5d"+
    "\0\132\0\u2a8a\0\u2ab7\0\u2ae4\0\u2b11\0\132\0\u2b3e\0\55"+
    "\0\u2b6b\0\55\0\55\0\u2b98\0\u2bc5\0\u2bf2\0\55\0\u2c1f"+
    "\0\u2c4c\0\u2c79\0\u2ca6\0\u2cd3\0\u2d00\0\u2d2d\0\55\0\u2d5a"+
    "\0\55\0\u2d87\0\u2db4\0\u2de1\0\u2e0e\0\u2e3b\0\132\0\u2e68"+
    "\0\u2e95\0\55\0\u2ec2\0\u2eef\0\132\0\132\0\u2f1c\0\u2f49"+
    "\0\u2f76\0\u2fa3\0\u2fd0\0\u2ffd\0\132\0\132\0\u302a\0\55"+
    "\0\u3057\0\55\0\u3084\0\132";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[324];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\4\1\11\1\12\1\13\1\14\1\15\1\3\1\16"+
    "\1\17\2\2\3\3\1\20\1\2\1\21\1\22\1\23"+
    "\1\2\1\13\1\24\1\2\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\3\1\33\1\3\1\34\1\35\1\36"+
    "\1\37\1\40\56\0\1\3\10\0\7\3\2\0\4\3"+
    "\2\0\2\3\1\0\1\3\1\0\1\41\11\3\7\0"+
    "\2\4\1\42\4\4\46\0\1\43\2\0\4\43\46\0"+
    "\2\44\1\42\4\44\46\0\1\45\1\44\1\42\3\44"+
    "\1\45\46\0\1\4\1\45\1\42\1\45\3\4\56\0"+
    "\1\46\4\0\1\47\1\50\1\0\1\51\1\52\2\0"+
    "\1\53\3\0\1\54\23\0\1\3\10\0\5\3\1\55"+
    "\1\3\2\0\4\3\2\0\2\3\1\0\1\3\1\0"+
    "\1\41\11\3\6\0\1\3\10\0\1\3\1\56\5\3"+
    "\2\0\2\3\1\57\1\3\2\0\2\3\1\0\1\3"+
    "\1\0\1\41\11\3\6\0\1\3\10\0\1\60\6\3"+
    "\2\0\4\3\2\0\2\3\1\0\1\3\1\0\1\41"+
    "\11\3\6\0\1\3\10\0\7\3\2\0\3\3\1\61"+
    "\2\0\2\3\1\0\1\3\1\0\1\41\11\3\6\0"+
    "\1\3\10\0\7\3\2\0\4\3\2\0\1\3\1\62"+
    "\1\0\1\3\1\0\1\41\1\63\10\3\6\0\1\3"+
    "\10\0\3\3\1\64\3\3\2\0\4\3\2\0\2\3"+
    "\1\0\1\3\1\0\1\41\11\3\6\0\1\3\10\0"+
    "\3\3\1\65\3\3\2\0\4\3\2\0\2\3\1\0"+
    "\1\3\1\0\1\41\11\3\6\0\1\3\10\0\6\3"+
    "\1\66\2\0\4\3\2\0\2\3\1\0\1\3\1\0"+
    "\1\41\11\3\6\0\1\3\10\0\5\3\1\67\1\3"+
    "\2\0\2\3\1\70\1\3\2\0\2\3\1\0\1\3"+
    "\1\0\1\41\11\3\6\0\1\3\10\0\1\3\1\71"+
    "\5\3\2\0\4\3\2\0\2\3\1\0\1\3\1\0"+
    "\1\41\11\3\6\0\1\3\10\0\5\3\1\72\1\73"+
    "\2\0\4\3\2\0\2\3\1\0\1\3\1\0\1\41"+
    "\11\3\6\0\1\3\10\0\3\3\1\74\3\3\2\0"+
    "\4\3\2\0\2\3\1\0\1\3\1\0\1\41\11\3"+
    "\6\0\1\3\10\0\4\3\1\75\1\3\1\76\2\0"+
    "\4\3\2\0\2\3\1\0\1\3\1\0\1\41\11\3"+
    "\6\0\1\3\10\0\1\3\1\77\5\3\2\0\4\3"+
    "\2\0\2\3\1\0\1\3\1\0\1\41\11\3\6\0"+
    "\1\3\10\0\6\3\1\100\2\0\4\3\2\0\2\3"+
    "\1\0\1\3\1\0\1\41\11\3\61\0\1\40\1\0"+
    "\1\101\10\0\7\101\2\0\4\101\2\0\2\101\1\0"+
    "\1\101\2\0\11\101\7\0\1\102\2\0\4\102\74\0"+
    "\1\103\2\0\1\104\23\0\2\4\1\42\4\4\17\0"+
    "\1\103\2\0\1\104\23\0\2\4\1\42\4\4\22\0"+
    "\1\104\34\0\1\105\72\0\1\106\52\0\1\107\37\0"+
    "\1\110\4\0\1\111\1\112\2\0\1\113\2\0\1\114"+
    "\3\0\1\115\42\0\1\116\47\0\1\117\1\0\1\120"+
    "\57\0\1\121\35\0\1\3\10\0\7\3\2\0\4\3"+
    "\2\0\2\3\1\0\1\3\1\0\1\41\4\3\1\122"+
    "\4\3\6\0\1\3\10\0\7\3\2\0\4\3\2\0"+
    "\1\3\1\123\1\0\1\3\1\0\1\41\11\3\6\0"+
    "\1\3\10\0\1\3\1\124\5\3\2\0\4\3\2\0"+
    "\2\3\1\0\1\3\1\0\1\41\11\3\6\0\1\3"+
    "\10\0\4\3\1\125\2\3\2\0\4\3\2\0\2\3"+
    "\1\0\1\3\1\0\1\41\11\3\6\0\1\3\10\0"+
    "\7\3\2\0\4\3\2\0\2\3\1\0\1\3\1\0"+
    "\1\41\4\3\1\126\4\3\6\0\1\3\10\0\7\3"+
    "\2\0\2\3\1\127\1\3\2\0\2\3\1\0\1\3"+
    "\1\0\1\41\11\3\6\0\1\3\10\0\7\3\2\0"+
    "\4\3\2\0\2\3\1\0\1\130\1\0\1\41\11\3"+
    "\6\0\1\3\10\0\7\3\2\0\4\3\2\0\1\131"+
    "\1\3\1\0\1\3\1\0\1\41\11\3\6\0\1\3"+
    "\10\0\7\3\2\0\3\3\1\132\2\0\2\3\1\0"+
    "\1\3\1\0\1\41\11\3\6\0\1\3\10\0\2\3"+
    "\1\133\4\3\2\0\4\3\2\0\2\3\1\0\1\3"+
    "\1\0\1\41\11\3\6\0\1\3\10\0\7\3\2\0"+
    "\4\3\2\0\1\134\1\3\1\0\1\3\1\0\1\41"+
    "\11\3\6\0\1\3\10\0\7\3\2\0\4\3\2\0"+
    "\1\3\1\135\1\0\1\3\1\0\1\41\10\3\1\136"+
    "\6\0\1\3\10\0\7\3\2\0\4\3\2\0\2\3"+
    "\1\0\1\3\1\0\1\41\2\3\1\137\6\3\6\0"+
    "\1\3\10\0\4\3\1\140\2\3\2\0\4\3\2\0"+
    "\2\3\1\0\1\3\1\0\1\41\11\3\6\0\1\3"+
    "\10\0\7\3\2\0\4\3\2\0\2\3\1\0\1\3"+
    "\1\0\1\41\6\3\1\141\2\3\6\0\1\3\10\0"+
    "\4\3\1\142\2\3\2\0\4\3\2\0\2\3\1\0"+
    "\1\3\1\0\1\41\11\3\6\0\1\3\10\0\1\3"+
    "\1\143\5\3\2\0\4\3\2\0\2\3\1\0\1\3"+
    "\1\0\1\41\11\3\6\0\1\3\10\0\7\3\2\0"+
    "\4\3\2\0\1\3\1\144\1\0\1\3\1\0\1\41"+
    "\11\3\6\0\1\3\10\0\7\3\2\0\4\3\2\0"+
    "\1\145\1\3\1\0\1\3\1\0\1\41\11\3\6\0"+
    "\1\3\10\0\4\3\1\146\2\3\2\0\4\3\2\0"+
    "\1\147\1\3\1\0\1\3\1\0\1\41\11\3\7\0"+
    "\2\102\1\0\4\102\47\0\1\150\1\0\4\150\47\0"+
    "\1\151\1\0\1\152\63\0\1\153\72\0\1\154\37\0"+
    "\1\155\52\0\1\156\72\0\1\157\52\0\1\160\45\0"+
    "\1\161\47\0\1\162\1\0\1\163\57\0\1\164\46\0"+
    "\1\165\56\0\1\166\63\0\1\167\45\0\1\170\41\0"+
    "\1\3\10\0\3\3\1\171\3\3\2\0\4\3\2\0"+
    "\2\3\1\0\1\3\1\0\1\41\11\3\6\0\1\3"+
    "\10\0\7\3\2\0\2\3\1\172\1\3\2\0\2\3"+
    "\1\0\1\3\1\0\1\41\11\3\6\0\1\3\10\0"+
    "\7\3\2\0\4\3\2\0\2\3\1\0\1\3\1\0"+
    "\1\41\1\173\10\3\6\0\1\3\10\0\3\3\1\174"+
    "\3\3\2\0\4\3\2\0\2\3\1\0\1\3\1\0"+
    "\1\41\11\3\6\0\1\3\10\0\7\3\2\0\2\3"+
    "\1\175\1\3\2\0\2\3\1\0\1\3\1\0\1\41"+
    "\11\3\6\0\1\3\10\0\6\3\1\176\2\0\4\3"+
    "\2\0\2\3\1\0\1\3\1\0\1\41\11\3\6\0"+
    "\1\3\10\0\7\3\2\0\2\3\1\177\1\3\2\0"+
    "\2\3\1\0\1\3\1\0\1\41\11\3\6\0\1\3"+
    "\10\0\1\3\1\200\5\3\2\0\4\3\2\0\2\3"+
    "\1\0\1\3\1\0\1\41\11\3\6\0\1\3\10\0"+
    "\7\3\2\0\1\3\1\201\2\3\2\0\2\3\1\0"+
    "\1\3\1\0\1\41\11\3\6\0\1\3\10\0\3\3"+
    "\1\202\3\3\2\0\4\3\2\0\2\3\1\0\1\3"+
    "\1\0\1\41\11\3\6\0\1\3\10\0\1\3\1\203"+
    "\5\3\2\0\4\3\2\0\2\3\1\0\1\3\1\0"+
    "\1\41\11\3\6\0\1\3\10\0\6\3\1\204\2\0"+
    "\4\3\2\0\2\3\1\0\1\3\1\0\1\41\11\3"+
    "\6\0\1\3\10\0\7\3\2\0\1\3\1\205\2\3"+
    "\2\0\2\3\1\0\1\3\1\0\1\41\11\3\6\0"+
    "\1\3\10\0\7\3\2\0\4\3\2\0\2\3\1\0"+
    "\1\3\1\0\1\41\3\3\1\206\5\3\6\0\1\3"+
    "\10\0\7\3\2\0\4\3\2\0\2\3\1\0\1\3"+
    "\1\0\1\41\2\3\1\207\6\3\6\0\1\3\10\0"+
    "\6\3\1\210\2\0\4\3\2\0\2\3\1\0\1\3"+
    "\1\0\1\41\11\3\6\0\1\3\10\0\6\3\1\211"+
    "\2\0\4\3\2\0\2\3\1\0\1\3\1\0\1\41"+
    "\11\3\6\0\1\3\10\0\2\3\1\212\4\3\2\0"+
    "\4\3\2\0\2\3\1\0\1\3\1\0\1\41\11\3"+
    "\6\0\1\3\10\0\3\3\1\213\3\3\2\0\4\3"+
    "\2\0\2\3\1\0\1\3\1\0\1\41\11\3\6\0"+
    "\1\3\10\0\1\214\6\3\2\0\4\3\2\0\2\3"+
    "\1\0\1\3\1\0\1\41\11\3\6\0\1\3\10\0"+
    "\4\3\1\215\2\3\2\0\4\3\2\0\2\3\1\0"+
    "\1\3\1\0\1\41\11\3\6\0\1\3\10\0\7\3"+
    "\2\0\4\3\2\0\2\3\1\0\1\3\1\0\1\41"+
    "\2\3\1\216\6\3\7\0\2\217\1\0\4\217\46\0"+
    "\1\220\2\0\4\220\47\0\1\220\1\0\2\220\63\0"+
    "\1\221\55\0\1\222\66\0\1\223\40\0\1\224\72\0"+
    "\1\225\37\0\1\226\51\0\1\227\56\0\1\230\63\0"+
    "\1\231\45\0\1\232\55\0\1\233\67\0\1\234\50\0"+
    "\1\235\42\0\1\236\43\0\1\3\10\0\7\3\2\0"+
    "\1\3\1\237\2\3\2\0\2\3\1\0\1\3\1\0"+
    "\1\41\11\3\6\0\1\3\10\0\4\3\1\240\2\3"+
    "\2\0\4\3\2\0\2\3\1\0\1\3\1\0\1\41"+
    "\11\3\6\0\1\3\10\0\7\3\2\0\1\241\3\3"+
    "\2\0\2\3\1\0\1\3\1\0\1\41\11\3\6\0"+
    "\1\3\10\0\2\3\1\242\4\3\2\0\4\3\2\0"+
    "\2\3\1\0\1\3\1\0\1\41\11\3\6\0\1\3"+
    "\10\0\1\3\1\243\5\3\2\0\4\3\2\0\2\3"+
    "\1\0\1\3\1\0\1\41\11\3\6\0\1\3\10\0"+
    "\7\3\2\0\1\3\1\244\2\3\2\0\2\3\1\0"+
    "\1\3\1\0\1\41\11\3\6\0\1\3\10\0\5\3"+
    "\1\245\1\3\2\0\4\3\2\0\2\3\1\0\1\3"+
    "\1\0\1\41\11\3\6\0\1\3\10\0\7\3\2\0"+
    "\1\246\3\3\2\0\2\3\1\0\1\3\1\0\1\41"+
    "\11\3\6\0\1\3\10\0\7\3\2\0\2\3\1\247"+
    "\1\3\2\0\2\3\1\0\1\3\1\0\1\41\11\3"+
    "\6\0\1\3\10\0\7\3\2\0\4\3\2\0\2\3"+
    "\1\0\1\3\1\0\1\41\1\250\10\3\6\0\1\3"+
    "\10\0\6\3\1\251\2\0\4\3\2\0\2\3\1\0"+
    "\1\3\1\0\1\41\11\3\6\0\1\3\10\0\4\3"+
    "\1\252\2\3\2\0\4\3\2\0\2\3\1\0\1\3"+
    "\1\0\1\41\11\3\6\0\1\3\10\0\1\3\1\253"+
    "\5\3\2\0\4\3\2\0\2\3\1\0\1\3\1\0"+
    "\1\41\11\3\6\0\1\3\10\0\6\3\1\254\2\0"+
    "\4\3\2\0\2\3\1\0\1\3\1\0\1\41\11\3"+
    "\6\0\1\3\10\0\7\3\2\0\2\3\1\255\1\3"+
    "\2\0\2\3\1\0\1\3\1\0\1\41\11\3\6\0"+
    "\1\3\10\0\1\256\6\3\2\0\4\3\2\0\2\3"+
    "\1\0\1\3\1\0\1\41\11\3\6\0\1\3\10\0"+
    "\7\3\2\0\1\3\1\257\2\3\2\0\2\3\1\0"+
    "\1\3\1\0\1\41\11\3\6\0\1\3\10\0\6\3"+
    "\1\260\2\0\4\3\2\0\2\3\1\0\1\3\1\0"+
    "\1\41\11\3\6\0\1\3\10\0\6\3\1\261\2\0"+
    "\4\3\2\0\2\3\1\0\1\3\1\0\1\41\11\3"+
    "\6\0\1\3\10\0\3\3\1\262\3\3\2\0\4\3"+
    "\2\0\2\3\1\0\1\3\1\0\1\41\11\3\40\0"+
    "\1\263\37\0\1\264\51\0\1\265\43\0\2\266\1\0"+
    "\4\266\61\0\1\267\55\0\1\270\57\0\1\271\50\0"+
    "\1\272\60\0\1\273\57\0\1\274\42\0\1\275\66\0"+
    "\1\276\33\0\1\277\1\0\1\300\61\0\1\301\57\0"+
    "\1\302\40\0\1\3\10\0\7\3\2\0\4\3\2\0"+
    "\1\3\1\303\1\0\1\3\1\0\1\41\11\3\6\0"+
    "\1\3\10\0\3\3\1\304\1\3\1\305\1\3\2\0"+
    "\4\3\2\0\2\3\1\0\1\3\1\0\1\41\11\3"+
    "\6\0\1\3\10\0\3\3\1\306\3\3\2\0\4\3"+
    "\2\0\2\3\1\0\1\3\1\0\1\41\11\3\6\0"+
    "\1\3\10\0\2\3\1\307\4\3\2\0\4\3\2\0"+
    "\2\3\1\0\1\3\1\0\1\41\11\3\6\0\1\3"+
    "\10\0\7\3\2\0\4\3\2\0\2\3\1\0\1\3"+
    "\1\0\1\41\4\3\1\310\4\3\6\0\1\3\10\0"+
    "\7\3\2\0\4\3\2\0\2\3\1\0\1\3\1\0"+
    "\1\41\1\311\10\3\6\0\1\3\10\0\6\3\1\312"+
    "\2\0\4\3\2\0\2\3\1\0\1\3\1\0\1\41"+
    "\11\3\6\0\1\3\10\0\2\3\1\313\4\3\2\0"+
    "\4\3\2\0\2\3\1\0\1\3\1\0\1\41\11\3"+
    "\6\0\1\3\10\0\5\3\1\314\1\3\2\0\4\3"+
    "\2\0\2\3\1\0\1\3\1\0\1\41\11\3\6\0"+
    "\1\3\10\0\2\3\1\315\4\3\2\0\4\3\2\0"+
    "\2\3\1\0\1\3\1\0\1\41\11\3\6\0\1\3"+
    "\10\0\7\3\2\0\4\3\2\0\2\3\1\0\1\3"+
    "\1\0\1\41\1\316\10\3\6\0\1\3\10\0\7\3"+
    "\2\0\4\3\2\0\2\3\1\0\1\3\1\0\1\41"+
    "\1\317\10\3\6\0\1\3\10\0\6\3\1\320\2\0"+
    "\4\3\2\0\2\3\1\0\1\3\1\0\1\41\11\3"+
    "\6\0\1\3\10\0\7\3\2\0\4\3\2\0\2\3"+
    "\1\0\1\3\1\0\1\41\4\3\1\321\4\3\6\0"+
    "\1\3\10\0\2\3\1\322\4\3\2\0\4\3\2\0"+
    "\2\3\1\0\1\3\1\0\1\41\11\3\6\0\1\3"+
    "\10\0\2\3\1\323\4\3\2\0\4\3\2\0\2\3"+
    "\1\0\1\3\1\0\1\41\11\3\7\0\2\324\1\0"+
    "\4\324\57\0\1\325\55\0\1\326\42\0\2\327\1\0"+
    "\4\327\62\0\1\330\51\0\1\331\65\0\1\332\42\0"+
    "\1\333\57\0\1\334\64\0\1\335\31\0\1\336\2\0"+
    "\4\336\47\0\1\336\1\0\2\336\61\0\1\337\55\0"+
    "\1\340\41\0\1\3\10\0\4\3\1\341\2\3\2\0"+
    "\4\3\2\0\2\3\1\0\1\3\1\0\1\41\11\3"+
    "\6\0\1\3\10\0\2\3\1\342\4\3\2\0\4\3"+
    "\2\0\2\3\1\0\1\3\1\0\1\41\11\3\6\0"+
    "\1\3\10\0\7\3\2\0\1\343\3\3\2\0\2\3"+
    "\1\0\1\3\1\0\1\41\11\3\6\0\1\3\10\0"+
    "\2\3\1\344\4\3\2\0\4\3\2\0\2\3\1\0"+
    "\1\3\1\0\1\41\11\3\6\0\1\3\10\0\1\345"+
    "\6\3\2\0\4\3\2\0\2\3\1\0\1\3\1\0"+
    "\1\41\11\3\6\0\1\3\10\0\3\3\1\346\3\3"+
    "\2\0\4\3\2\0\2\3\1\0\1\3\1\0\1\41"+
    "\11\3\6\0\1\3\10\0\1\3\1\347\5\3\2\0"+
    "\4\3\2\0\2\3\1\0\1\3\1\0\1\41\11\3"+
    "\6\0\1\3\10\0\7\3\2\0\2\3\1\350\1\3"+
    "\2\0\2\3\1\0\1\3\1\0\1\41\11\3\6\0"+
    "\1\3\10\0\7\3\2\0\4\3\2\0\1\351\1\3"+
    "\1\0\1\3\1\0\1\41\11\3\6\0\1\3\10\0"+
    "\1\3\1\352\5\3\2\0\4\3\2\0\2\3\1\0"+
    "\1\3\1\0\1\41\11\3\6\0\1\3\10\0\3\3"+
    "\1\353\3\3\2\0\4\3\2\0\2\3\1\0\1\3"+
    "\1\0\1\41\11\3\6\0\1\3\10\0\7\3\2\0"+
    "\3\3\1\354\2\0\2\3\1\0\1\3\1\0\1\41"+
    "\11\3\6\0\1\3\10\0\4\3\1\355\2\3\2\0"+
    "\4\3\2\0\2\3\1\0\1\3\1\0\1\41\11\3"+
    "\7\0\2\356\1\0\4\356\62\0\1\357\53\0\1\360"+
    "\41\0\2\361\1\0\4\361\57\0\1\362\55\0\1\363"+
    "\65\0\1\364\42\0\1\365\55\0\1\366\54\0\1\367"+
    "\61\0\1\370\47\0\1\371\61\0\1\372\34\0\1\3"+
    "\10\0\6\3\1\373\2\0\4\3\2\0\2\3\1\0"+
    "\1\3\1\0\1\41\11\3\6\0\1\3\10\0\6\3"+
    "\1\374\2\0\4\3\2\0\2\3\1\0\1\3\1\0"+
    "\1\41\11\3\6\0\1\3\10\0\3\3\1\375\3\3"+
    "\2\0\4\3\2\0\2\3\1\0\1\3\1\0\1\41"+
    "\11\3\6\0\1\3\10\0\1\376\6\3\2\0\4\3"+
    "\2\0\2\3\1\0\1\3\1\0\1\41\11\3\6\0"+
    "\1\3\10\0\4\3\1\377\2\3\2\0\4\3\2\0"+
    "\2\3\1\0\1\3\1\0\1\41\11\3\6\0\1\3"+
    "\10\0\6\3\1\u0100\2\0\4\3\2\0\2\3\1\0"+
    "\1\3\1\0\1\41\11\3\6\0\1\3\10\0\6\3"+
    "\1\u0101\2\0\4\3\2\0\2\3\1\0\1\3\1\0"+
    "\1\41\11\3\6\0\1\3\10\0\7\3\2\0\4\3"+
    "\2\0\2\3\1\0\1\3\1\0\1\41\2\3\1\u0102"+
    "\6\3\6\0\1\3\10\0\3\3\1\u0103\3\3\2\0"+
    "\4\3\2\0\2\3\1\0\1\3\1\0\1\41\11\3"+
    "\6\0\1\3\10\0\1\3\1\u0104\5\3\2\0\4\3"+
    "\2\0\2\3\1\0\1\3\1\0\1\41\11\3\7\0"+
    "\2\u0105\1\0\4\u0105\63\0\1\u0106\51\0\1\u0107\42\0"+
    "\2\u0108\1\0\4\u0108\62\0\1\u0109\53\0\1\u010a\53\0"+
    "\1\u010b\54\0\1\u010c\61\0\1\u010d\60\0\1\u010e\50\0"+
    "\1\u010f\34\0\1\3\10\0\7\3\2\0\4\3\2\0"+
    "\2\3\1\0\1\3\1\0\1\41\1\3\1\u0110\7\3"+
    "\6\0\1\3\10\0\7\3\2\0\1\u0111\3\3\2\0"+
    "\2\3\1\0\1\3\1\0\1\41\11\3\6\0\1\3"+
    "\10\0\6\3\1\u0112\2\0\4\3\2\0\2\3\1\0"+
    "\1\3\1\0\1\41\11\3\6\0\1\3\10\0\7\3"+
    "\2\0\1\3\1\u0113\2\3\2\0\2\3\1\0\1\3"+
    "\1\0\1\41\11\3\6\0\1\3\10\0\4\3\1\u0114"+
    "\2\3\2\0\4\3\2\0\2\3\1\0\1\3\1\0"+
    "\1\41\11\3\6\0\1\3\10\0\1\u0115\6\3\2\0"+
    "\4\3\2\0\2\3\1\0\1\3\1\0\1\41\11\3"+
    "\6\0\1\3\10\0\2\3\1\u0116\4\3\2\0\4\3"+
    "\2\0\2\3\1\0\1\3\1\0\1\41\11\3\6\0"+
    "\1\3\10\0\2\3\1\u0117\4\3\2\0\4\3\2\0"+
    "\2\3\1\0\1\3\1\0\1\41\11\3\7\0\2\u0118"+
    "\1\0\4\u0118\64\0\1\u0119\55\0\1\u011a\54\0\1\u011b"+
    "\52\0\1\u011c\51\0\1\u011d\65\0\1\u011e\50\0\1\u011f"+
    "\53\0\1\u0120\35\0\1\3\10\0\5\3\1\u0121\1\3"+
    "\2\0\4\3\2\0\2\3\1\0\1\3\1\0\1\41"+
    "\11\3\6\0\1\3\10\0\7\3\2\0\4\3\2\0"+
    "\2\3\1\0\1\3\1\0\1\41\7\3\1\u0122\1\3"+
    "\6\0\1\3\10\0\7\3\2\0\4\3\2\0\2\3"+
    "\1\0\1\3\1\0\1\41\2\3\1\u0123\6\3\6\0"+
    "\1\3\10\0\5\3\1\u0124\1\3\2\0\4\3\2\0"+
    "\2\3\1\0\1\3\1\0\1\41\11\3\6\0\1\3"+
    "\10\0\4\3\1\u0125\2\3\2\0\4\3\2\0\2\3"+
    "\1\0\1\3\1\0\1\41\11\3\6\0\1\3\10\0"+
    "\1\u0126\6\3\2\0\4\3\2\0\2\3\1\0\1\3"+
    "\1\0\1\41\11\3\26\0\1\u0127\53\0\1\u0128\55\0"+
    "\1\u0129\53\0\1\u012a\52\0\1\u012b\37\0\1\3\10\0"+
    "\7\3\2\0\4\3\2\0\2\3\1\0\1\3\1\0"+
    "\1\41\2\3\1\u012c\6\3\6\0\1\3\10\0\7\3"+
    "\2\0\4\3\2\0\2\3\1\0\1\3\1\0\1\41"+
    "\1\u012d\10\3\6\0\1\3\10\0\3\3\1\u012e\3\3"+
    "\2\0\4\3\2\0\2\3\1\0\1\3\1\0\1\41"+
    "\11\3\6\0\1\3\10\0\3\3\1\u012f\3\3\2\0"+
    "\4\3\2\0\2\3\1\0\1\3\1\0\1\41\11\3"+
    "\6\0\1\3\10\0\5\3\1\u0130\1\3\2\0\4\3"+
    "\2\0\2\3\1\0\1\3\1\0\1\41\11\3\6\0"+
    "\1\3\10\0\6\3\1\u0131\2\0\4\3\2\0\2\3"+
    "\1\0\1\3\1\0\1\41\11\3\26\0\1\u0132\51\0"+
    "\1\u0133\55\0\1\u0134\36\0\1\3\10\0\6\3\1\u0135"+
    "\2\0\4\3\2\0\2\3\1\0\1\3\1\0\1\41"+
    "\11\3\6\0\1\3\10\0\1\3\1\u0136\5\3\2\0"+
    "\4\3\2\0\2\3\1\0\1\3\1\0\1\41\11\3"+
    "\6\0\1\3\10\0\7\3\2\0\4\3\2\0\2\3"+
    "\1\0\1\3\1\0\1\41\7\3\1\u0137\1\3\6\0"+
    "\1\3\10\0\7\3\2\0\4\3\2\0\2\3\1\0"+
    "\1\3\1\0\1\41\2\3\1\u0138\6\3\6\0\1\3"+
    "\10\0\7\3\2\0\3\3\1\u0139\2\0\2\3\1\0"+
    "\1\3\1\0\1\41\11\3\24\0\1\u013a\52\0\1\u013b"+
    "\40\0\1\3\10\0\4\3\1\u013c\2\3\2\0\4\3"+
    "\2\0\2\3\1\0\1\3\1\0\1\41\11\3\6\0"+
    "\1\3\10\0\6\3\1\u013d\2\0\4\3\2\0\2\3"+
    "\1\0\1\3\1\0\1\41\11\3\6\0\1\3\10\0"+
    "\3\3\1\u013e\3\3\2\0\4\3\2\0\2\3\1\0"+
    "\1\3\1\0\1\41\11\3\22\0\1\u013f\60\0\1\u0140"+
    "\34\0\1\3\10\0\6\3\1\u0141\2\0\4\3\2\0"+
    "\2\3\1\0\1\3\1\0\1\41\11\3\26\0\1\u0142"+
    "\34\0\1\3\10\0\7\3\2\0\1\u0143\3\3\2\0"+
    "\2\3\1\0\1\3\1\0\1\41\11\3\6\0\1\3"+
    "\10\0\3\3\1\u0144\3\3\2\0\4\3\2\0\2\3"+
    "\1\0\1\3\1\0\1\41\11\3\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12465];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\16\1\1\11\2\1\1\11\7\1\4\11"+
    "\1\1\3\0\2\1\7\0\26\1\17\0\26\1\21\0"+
    "\26\1\1\11\17\0\24\1\6\0\1\11\1\0\1\11"+
    "\7\0\21\1\15\0\15\1\12\0\1\11\1\0\1\11"+
    "\12\1\10\0\1\11\1\0\1\11\10\1\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\6\1\1\11\1\0\1\11"+
    "\2\0\6\1\1\11\2\0\5\1\2\0\3\1\1\0"+
    "\1\11\1\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[324];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

public static ArrayList list1= new ArrayList();
public static ArrayList list2 = new ArrayList();
public static ArrayList list3 = new ArrayList();

public static void mistakes()
{
String Reporte= "Lexy1.html";
FileWriter fw = null;
try {
fw = new FileWriter(Reporte);
BufferedWriter bw = new BufferedWriter(fw);
PrintWriter salArch = new PrintWriter(bw);
salArch.println();

//aqui empezas a escribir el html
salArch.print("<html>");
salArch.print("<head>Errores</head>");
salArch.print("<body>");
//definis tu tabla con cada una de las columnas
salArch.print("<table width='200' border='1'><tr><th scope='col'>Error</th><th scope='col'>Linea</th><th scope='col'>Poscion</th></tr>");

//errores,alinea,posicion  son un arrayList del mismo tamano
        for (int i = 0; i<list1.size(); i++){
            salArch.print("<tr><td>"+list3.get(i)+"</td><td>"+list1.get(i)+"</td><td>"+list2.get(i)+"</td></tr>");


     }
salArch.println("</table><p>&nbsp;</p><p>&nbsp;</p></body></html>");
salArch.close();
                }
                catch (IOException ex) {
}


try {

            File path = new File("Lexy1.html");
            Desktop.getDesktop().open(path);
        } catch (IOException ex) {
          //  Logger.getLogger(Proyecto1_Compi1View.class.getName()).log(Level.SEVERE, null, ex);
        }

}







  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 35: 
          { return new Symbol(sym.MoA,new String(yytext()));
          }
        case 53: break;
        case 15: 
          { return new Symbol(sym.Hour,new String(yytext()));
          }
        case 54: break;
        case 39: 
          { return new Symbol(sym.IngA,new String(yytext()));
          }
        case 55: break;
        case 18: 
          { return new Symbol(sym.Da,new String(yytext()));
          }
        case 56: break;
        case 33: 
          { return new Symbol(sym.Gas,new String(yytext()));
          }
        case 57: break;
        case 48: 
          { return new Symbol(sym.LE,new String(yytext()));
          }
        case 58: break;
        case 25: 
          { return new Symbol(sym.Ba,new String(yytext()));
          }
        case 59: break;
        case 1: 
          { list1.add(yyline);
    list2.add(yychar);
    list3.add(yytext());
    System.out.println("error lexico en "  + yyline + "," + yychar + " No se reconoce " + yytext());
    yychar=0;
          }
        case 60: break;
        case 4: 
          { return new Symbol(sym.MoneS,new String(yytext()));
          }
        case 61: break;
        case 8: 
          { return new Symbol(sym.Semi,new String(yytext()));
          }
        case 62: break;
        case 6: 
          { return new Symbol(sym.Equal,new String(yytext()));
          }
        case 63: break;
        case 52: 
          { return new Symbol(sym.AlqC,new String(yytext()));
          }
        case 64: break;
        case 29: 
          { return new Symbol(sym.MeA,new String(yytext()));
          }
        case 65: break;
        case 42: 
          { return new Symbol(sym.TeA,new String(yytext()));
          }
        case 66: break;
        case 22: 
          { return new Symbol(sym.Monetta,new String(yytext()));
          }
        case 67: break;
        case 37: 
          { return new Symbol(sym.Borr,new String(yytext()));
          }
        case 68: break;
        case 17: 
          { return new Symbol(sym.Plac,new String(yytext()));
          }
        case 69: break;
        case 20: 
          { return new Symbol(sym.AnC,new String(yytext()));
          }
        case 70: break;
        case 30: 
          { return new Symbol(sym.GstA,new String(yytext()));
          }
        case 71: break;
        case 11: 
          { return new Symbol(sym.Luga,new String(yytext()));
          }
        case 72: break;
        case 50: 
          { return new Symbol(sym.DuA,new String(yytext()));
          }
        case 73: break;
        case 5: 
          { return new Symbol(sym.Duep,new String(yytext()));
          }
        case 74: break;
        case 26: 
          { return new Symbol(sym.Insurance,new String(yytext()));
          }
        case 75: break;
        case 41: 
          { return new Symbol(sym.MoC,new String(yytext()));
          }
        case 76: break;
        case 14: 
          { return new Symbol(sym.Hora,new String(yytext()));
          }
        case 77: break;
        case 43: 
          { return new Symbol(sym.IngC,new String(yytext()));
          }
        case 78: break;
        case 47: 
          { return new Symbol(sym.AP,new String(yytext()));
          }
        case 79: break;
        case 38: 
          { return new Symbol(sym.Date,new String(yytext()));
          }
        case 80: break;
        case 24: 
          { return new Symbol(sym.Vnta,new String(yytext()));
          }
        case 81: break;
        case 31: 
          { return new Symbol(sym.Tax,new String(yytext()));
          }
        case 82: break;
        case 16: 
          { return new Symbol(sym.Otr,new String(yytext()));
          }
        case 83: break;
        case 27: 
          { return new Symbol(sym.Salary,new String(yytext()));
          }
        case 84: break;
        case 44: 
          { return new Symbol(sym.Nu,new String(yytext()));
          }
        case 85: break;
        case 49: 
          { return new Symbol(sym.PP,new String(yytext()));
          }
        case 86: break;
        case 36: 
          { return new Symbol(sym.Security,new String(yytext()));
          }
        case 87: break;
        case 7: 
          { return new Symbol(sym.Apos,new String(yytext()));
          }
        case 88: break;
        case 21: 
          { return new Symbol(sym.MeC,new String(yytext()));
          }
        case 89: break;
        case 32: 
          { return new Symbol (sym.Rental,new String(yytext()));
          }
        case 90: break;
        case 45: 
          { return new Symbol(sym.TeC,new String(yytext()));
          }
        case 91: break;
        case 23: 
          { return new Symbol(sym.Li,new String(yytext()));
          }
        case 92: break;
        case 28: 
          { return new Symbol(sym.Cir,new String(yytext()));
          }
        case 93: break;
        case 19: 
          { return new Symbol(sym.Banc,new String(yytext()));
          }
        case 94: break;
        case 2: 
          { return new Symbol(sym.Let,new String(yytext()));
          }
        case 95: break;
        case 9: 
          { yychar=0;
          }
        case 96: break;
        case 46: 
          { return new Symbol(sym.Graph,new String(yytext()));
          }
        case 97: break;
        case 34: 
          { return new Symbol(sym.GstC,new String(yytext()));
          }
        case 98: break;
        case 51: 
          { return new Symbol(sym.DuC,new String(yytext()));
          }
        case 99: break;
        case 13: 
          { return new Symbol(sym.Kja,new String(yytext()));
          }
        case 100: break;
        case 3: 
          { return new Symbol(sym.Numb,new String(yytext()));
          }
        case 101: break;
        case 40: 
          { return new Symbol(sym.AnA,new String(yytext()));
          }
        case 102: break;
        case 12: 
          { return new Symbol(sym.Real,new String(yytext()));
          }
        case 103: break;
        case 10: 
          { 
          }
        case 104: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
