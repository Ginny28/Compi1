/* The following code was generated by JFlex 1.4.3 on 11/19/12 12:37 AM */

import java.lang.System;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.io.*;
import java.awt.Desktop;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/19/12 12:37 AM from the specification file
 * <tt>Pag.lex</tt>
 */
public class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\63\1\62\2\0\1\63\22\0\1\63\1\0\1\45\1\50"+
    "\1\51\1\52\1\54\1\0\1\56\1\57\1\55\1\0\1\61\1\0"+
    "\1\4\1\35\1\2\1\27\1\30\1\31\6\1\1\44\1\46\1\32"+
    "\1\43\1\34\1\0\1\47\1\15\1\25\1\16\1\41\1\11\1\37"+
    "\1\7\1\26\1\13\1\5\1\3\1\24\1\23\1\10\1\22\1\6"+
    "\1\3\1\12\1\20\1\14\1\17\1\21\1\3\1\33\1\3\1\42"+
    "\3\3\1\53\1\36\1\3\1\15\1\25\1\16\1\41\1\11\1\37"+
    "\1\7\1\26\1\13\1\5\1\3\1\24\1\23\1\10\1\22\1\6"+
    "\1\3\1\12\1\20\1\14\1\17\1\21\1\3\1\33\1\3\1\42"+
    "\1\0\1\60\124\0\1\40\37\0\1\40\uff0e\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\14\3\1\1\1\5"+
    "\1\3\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\1\1\23"+
    "\1\24\1\25\1\26\1\0\25\3\1\27\6\0\2\3"+
    "\1\30\1\0\1\31\27\3\3\0\1\32\5\0\2\3"+
    "\1\0\1\3\1\33\3\3\1\34\10\3\1\35\1\36"+
    "\7\3\11\0\2\3\1\31\2\3\1\37\7\3\1\0"+
    "\1\3\1\40\4\3\1\41\3\3\4\0\1\42\5\0"+
    "\1\3\1\43\2\3\1\44\1\3\1\45\1\46\3\3"+
    "\1\0\5\3\1\47\1\50\10\0\1\51\1\52\1\53"+
    "\4\3\1\0\1\3\1\54\1\55\1\3\1\56\10\0"+
    "\4\3\1\0\2\3\11\0\2\3\1\57\1\3\1\0"+
    "\2\3\1\60\1\61\1\62\1\0\1\63\5\0\1\64"+
    "\2\3\1\0\1\65\1\3\1\66\1\67\1\70\1\71"+
    "\1\0\1\72\1\3\1\73\1\0\1\3\1\74\1\75"+
    "\1\0\1\76\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\64\0\320\0\u0104\0\u0138"+
    "\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8"+
    "\0\u030c\0\u0340\0\64\0\u0374\0\64\0\64\0\64\0\64"+
    "\0\64\0\64\0\64\0\64\0\234\0\64\0\64\0\64"+
    "\0\64\0\u03a8\0\64\0\64\0\u03dc\0\u0410\0\u0444\0\u0478"+
    "\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618"+
    "\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784\0\u07b8"+
    "\0\u07ec\0\u0820\0\u0854\0\u0888\0\u0410\0\u08bc\0\u08f0\0\u0924"+
    "\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\64\0\u0a5c\0\234"+
    "\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc"+
    "\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c"+
    "\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c"+
    "\0\u0f70\0\u0fa4\0\64\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8"+
    "\0\u10dc\0\u1110\0\u1144\0\u1178\0\234\0\u11ac\0\u11e0\0\u1214"+
    "\0\234\0\u1248\0\u127c\0\u12b0\0\u12e4\0\u1318\0\u134c\0\u1380"+
    "\0\u13b4\0\234\0\234\0\u13e8\0\u141c\0\u1450\0\u1484\0\u14b8"+
    "\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0\0\u1624\0\u1658"+
    "\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c\0\64\0\u1790\0\u17c4"+
    "\0\234\0\u17f8\0\u182c\0\u1860\0\u1894\0\u18c8\0\u18fc\0\u1930"+
    "\0\u1964\0\u1998\0\234\0\u19cc\0\u1a00\0\u1a34\0\u1a68\0\234"+
    "\0\u1a9c\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\64"+
    "\0\u1c08\0\u1c3c\0\u1c70\0\u1ca4\0\u1cd8\0\u1d0c\0\234\0\u1d40"+
    "\0\u1d74\0\234\0\u1da8\0\234\0\234\0\u1ddc\0\u1e10\0\u1e44"+
    "\0\u1e78\0\u1eac\0\u1ee0\0\u1f14\0\u1f48\0\u1f7c\0\234\0\234"+
    "\0\u1fb0\0\u1fe4\0\u2018\0\u204c\0\u2080\0\u20b4\0\u20e8\0\u211c"+
    "\0\64\0\234\0\234\0\u2150\0\u2184\0\u21b8\0\u21ec\0\u2220"+
    "\0\u2254\0\234\0\234\0\u2288\0\234\0\u22bc\0\u22f0\0\u2324"+
    "\0\u2358\0\u238c\0\u23c0\0\u23f4\0\u2428\0\u245c\0\u2490\0\u24c4"+
    "\0\u24f8\0\u252c\0\u2560\0\u2594\0\u25c8\0\u25fc\0\u2630\0\u2664"+
    "\0\u2698\0\u26cc\0\u2700\0\u2734\0\u2768\0\u279c\0\u27d0\0\234"+
    "\0\u2804\0\u2838\0\u286c\0\u28a0\0\64\0\64\0\64\0\u28d4"+
    "\0\64\0\u2908\0\u293c\0\u2970\0\u29a4\0\u29d8\0\234\0\u2a0c"+
    "\0\u2a40\0\u2a74\0\234\0\u2aa8\0\64\0\64\0\64\0\64"+
    "\0\u2adc\0\64\0\u2b10\0\234\0\u2b44\0\u2b78\0\64\0\234"+
    "\0\u2bac\0\234\0\64";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\4\1\6\1\7"+
    "\1\10\1\4\1\11\1\12\1\13\1\14\1\15\2\4"+
    "\1\16\1\4\1\17\1\4\1\20\1\21\3\3\1\22"+
    "\1\4\1\2\1\23\1\4\1\24\1\2\2\4\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\65\0\2\3\24\0\3\3\33\0\2\46\1\4\1\47"+
    "\22\4\3\46\1\0\1\4\2\0\2\4\1\0\2\4"+
    "\10\0\1\4\11\0\2\46\1\4\1\47\3\4\1\50"+
    "\16\4\3\46\1\0\1\4\2\0\2\4\1\0\2\4"+
    "\10\0\1\4\11\0\2\46\1\4\1\47\4\4\1\51"+
    "\1\52\14\4\3\46\1\0\1\4\2\0\2\4\1\0"+
    "\2\4\10\0\1\4\11\0\2\46\1\4\1\47\4\4"+
    "\1\53\10\4\1\54\4\4\3\46\1\0\1\4\2\0"+
    "\2\4\1\0\2\4\10\0\1\4\11\0\2\46\1\4"+
    "\1\47\15\4\1\55\4\4\3\46\1\0\1\4\2\0"+
    "\2\4\1\0\2\4\10\0\1\4\11\0\2\46\1\4"+
    "\1\47\16\4\1\56\3\4\3\46\1\0\1\4\2\0"+
    "\2\4\1\0\2\4\10\0\1\4\11\0\2\46\1\4"+
    "\1\47\4\4\1\57\1\60\1\61\1\4\1\62\11\4"+
    "\3\46\1\0\1\4\2\0\2\4\1\0\2\4\10\0"+
    "\1\4\11\0\2\46\1\4\1\47\3\4\1\63\1\4"+
    "\1\64\12\4\1\65\1\4\3\46\1\0\1\4\2\0"+
    "\2\4\1\0\1\4\1\66\10\0\1\4\11\0\2\46"+
    "\1\4\1\47\4\4\1\67\5\4\1\70\2\4\1\71"+
    "\4\4\3\46\1\0\1\4\2\0\2\4\1\0\2\4"+
    "\10\0\1\4\11\0\2\46\1\4\1\47\4\4\1\72"+
    "\15\4\3\46\1\0\1\4\2\0\2\4\1\0\2\4"+
    "\10\0\1\4\11\0\2\46\1\4\1\47\15\4\1\73"+
    "\4\4\3\46\1\0\1\4\2\0\2\4\1\0\2\4"+
    "\10\0\1\4\11\0\2\46\1\4\1\47\17\4\1\74"+
    "\2\4\3\46\1\0\1\4\2\0\2\4\1\0\2\4"+
    "\10\0\1\4\11\0\2\46\1\4\1\47\22\4\3\75"+
    "\1\0\1\4\2\0\2\4\1\0\2\4\10\0\1\4"+
    "\16\0\1\76\4\0\1\77\5\0\1\100\2\0\1\101"+
    "\6\0\1\102\1\0\1\103\27\0\2\46\1\4\1\47"+
    "\12\4\1\104\2\4\1\105\4\4\3\46\1\0\1\4"+
    "\2\0\2\4\1\0\2\4\10\0\1\4\70\0\1\106"+
    "\66\0\1\45\1\0\3\46\1\0\25\46\1\0\1\46"+
    "\2\0\2\46\1\0\2\46\10\0\1\46\15\0\1\107"+
    "\57\0\2\46\1\4\1\47\2\4\1\110\17\4\3\46"+
    "\1\0\1\4\2\0\2\4\1\0\2\4\10\0\1\4"+
    "\11\0\2\46\1\4\1\47\15\4\1\111\4\4\3\46"+
    "\1\0\1\4\2\0\2\4\1\0\2\4\10\0\1\4"+
    "\11\0\2\46\1\4\1\47\6\4\1\112\13\4\3\46"+
    "\1\0\1\4\2\0\2\4\1\0\2\4\10\0\1\4"+
    "\11\0\2\46\1\4\1\47\2\4\1\113\17\4\3\46"+
    "\1\0\1\4\2\0\2\4\1\0\2\4\10\0\1\4"+
    "\11\0\2\46\1\4\1\47\5\4\1\114\10\4\1\115"+
    "\3\4\3\46\1\0\1\4\2\0\2\4\1\0\2\4"+
    "\10\0\1\4\11\0\2\46\1\4\1\47\1\116\12\4"+
    "\1\117\6\4\3\46\1\0\1\4\2\0\2\4\1\0"+
    "\2\4\10\0\1\4\11\0\2\46\1\4\1\47\10\4"+
    "\1\120\11\4\3\46\1\0\1\4\2\0\2\4\1\0"+
    "\2\4\10\0\1\4\11\0\2\46\1\4\1\47\22\4"+
    "\3\46\1\0\1\121\2\0\2\4\1\0\2\4\10\0"+
    "\1\4\11\0\2\46\1\4\1\47\4\4\1\122\15\4"+
    "\3\46\1\0\1\4\2\0\2\4\1\0\2\4\10\0"+
    "\1\4\11\0\2\46\1\4\1\47\1\4\1\123\20\4"+
    "\3\46\1\0\1\4\2\0\2\4\1\0\2\4\10\0"+
    "\1\4\11\0\2\46\1\4\1\47\16\4\1\124\3\4"+
    "\3\46\1\0\1\4\2\0\2\4\1\0\2\4\10\0"+
    "\1\4\11\0\2\46\1\4\1\47\10\4\1\125\11\4"+
    "\3\46\1\0\1\4\2\0\2\4\1\0\2\4\10\0"+
    "\1\4\11\0\2\46\1\4\1\47\6\4\1\126\13\4"+
    "\3\46\1\0\1\4\2\0\2\4\1\0\2\4\10\0"+
    "\1\4\11\0\2\46\1\4\1\47\10\4\1\127\11\4"+
    "\3\46\1\0\1\4\2\0\2\4\1\0\2\4\10\0"+
    "\1\4\11\0\2\46\1\4\1\47\12\4\1\130\7\4"+
    "\3\46\1\0\1\4\2\0\2\4\1\0\2\4\10\0"+
    "\1\4\11\0\2\46\1\4\1\47\17\4\1\131\2\4"+
    "\3\46\1\0\1\4\2\0\2\4\1\0\2\4\10\0"+
    "\1\4\11\0\2\46\1\4\1\47\5\4\1\132\14\4"+
    "\3\46\1\0\1\4\2\0\2\4\1\0\2\4\10\0"+
    "\1\4\11\0\2\46\1\4\1\47\12\4\1\133\4\4"+
    "\1\134\2\4\3\46\1\0\1\4\2\0\2\4\1\0"+
    "\2\4\10\0\1\4\11\0\2\46\1\4\1\47\5\4"+
    "\1\135\14\4\3\46\1\0\1\4\2\0\2\4\1\0"+
    "\2\4\10\0\1\4\11\0\2\46\1\4\1\47\5\4"+
    "\1\136\14\4\3\46\1\0\1\4\2\0\2\4\1\0"+
    "\2\4\10\0\1\4\11\0\2\46\1\4\1\47\10\4"+
    "\1\137\11\4\3\46\1\0\1\4\2\0\2\4\1\0"+
    "\2\4\10\0\1\4\25\0\1\140\71\0\1\141\53\0"+
    "\1\142\104\0\1\143\52\0\1\144\46\0\1\145\4\0"+
    "\1\146\5\0\1\147\11\0\1\150\31\0\2\46\1\4"+
    "\1\47\4\4\1\151\15\4\3\46\1\0\1\4\2\0"+
    "\2\4\1\0\2\4\10\0\1\4\11\0\2\46\1\4"+
    "\1\47\3\4\1\152\16\4\3\46\1\0\1\4\2\0"+
    "\2\4\1\0\2\4\10\0\1\4\16\0\1\153\56\0"+
    "\2\46\1\4\1\47\5\4\1\154\14\4\3\46\1\0"+
    "\1\4\2\0\2\4\1\0\2\4\10\0\1\4\11\0"+
    "\2\46\1\4\1\47\13\4\1\155\6\4\3\46\1\0"+
    "\1\4\2\0\2\4\1\0\2\4\10\0\1\4\11\0"+
    "\2\46\1\4\1\47\5\4\1\156\14\4\3\46\1\0"+
    "\1\4\2\0\2\4\1\0\2\4\10\0\1\4\11\0"+
    "\2\46\1\4\1\47\16\4\1\157\3\4\3\46\1\0"+
    "\1\4\2\0\2\4\1\0\2\4\10\0\1\4\11\0"+
    "\2\46\1\4\1\47\20\4\1\160\1\4\3\46\1\0"+
    "\1\4\2\0\2\4\1\0\2\4\10\0\1\4\11\0"+
    "\2\46\1\4\1\47\15\4\1\161\4\4\3\46\1\0"+
    "\1\4\2\0\2\4\1\0\2\4\10\0\1\4\11\0"+
    "\2\46\1\4\1\47\10\4\1\162\11\4\3\46\1\0"+
    "\1\4\2\0\2\4\1\0\2\4\10\0\1\4\11\0"+
    "\2\46\1\4\1\47\2\4\1\163\17\4\3\46\1\0"+
    "\1\4\2\0\2\4\1\0\2\4\10\0\1\4\11\0"+
    "\2\46\1\4\1\47\7\4\1\164\12\4\3\46\1\0"+
    "\1\4\2\0\2\4\1\0\2\4\10\0\1\4\11\0"+
    "\2\46\1\4\1\47\20\4\1\165\1\4\3\46\1\0"+
    "\1\4\2\0\2\4\1\0\2\4\10\0\1\4\11\0"+
    "\2\46\1\4\1\47\15\4\1\166\4\4\3\46\1\0"+
    "\1\4\2\0\2\4\1\0\2\4\10\0\1\4\11\0"+
    "\2\46\1\4\1\47\10\4\1\167\11\4\3\46\1\0"+
    "\1\4\2\0\2\4\1\0\2\4\10\0\1\4\11\0"+
    "\2\46\1\4\1\47\5\4\1\170\14\4\3\46\1\0"+
    "\1\4\2\0\2\4\1\0\2\4\10\0\1\4\11\0"+
    "\2\46\1\4\1\47\10\4\1\171\11\4\3\46\1\0"+
    "\1\4\2\0\2\4\1\0\2\4\10\0\1\4\11\0"+
    "\2\46\1\4\1\47\1\4\1\172\20\4\3\46\1\0"+
    "\1\4\2\0\2\4\1\0\2\4\10\0\1\4\11\0"+
    "\2\46\1\4\1\47\17\4\1\173\2\4\3\46\1\0"+
    "\1\4\2\0\2\4\1\0\2\4\10\0\1\4\11\0"+
    "\2\46\1\4\1\47\4\4\1\174\15\4\3\46\1\0"+
    "\1\4\2\0\2\4\1\0\2\4\10\0\1\4\11\0"+
    "\2\46\1\4\1\47\13\4\1\175\6\4\3\46\1\0"+
    "\1\4\2\0\2\4\1\0\2\4\10\0\1\4\11\0"+
    "\2\46\1\4\1\47\5\4\1\176\14\4\3\46\1\0"+
    "\1\4\2\0\2\4\1\0\2\4\10\0\1\4\11\0"+
    "\2\46\1\4\1\47\15\4\1\177\4\4\3\46\1\0"+
    "\1\4\2\0\2\4\1\0\2\4\10\0\1\4\11\0"+
    "\2\46\1\4\1\47\22\4\3\46\1\0\1\4\2\0"+
    "\2\4\1\0\1\200\1\4\10\0\1\4\11\0\2\46"+
    "\1\4\1\47\10\4\1\201\11\4\3\46\1\0\1\4"+
    "\2\0\2\4\1\0\2\4\10\0\1\4\11\0\2\46"+
    "\1\4\1\47\3\4\1\202\16\4\3\46\1\0\1\4"+
    "\2\0\2\4\1\0\2\4\10\0\1\4\20\0\1\203"+
    "\1\0\1\204\57\0\1\205\65\0\1\206\77\0\1\207"+
    "\54\0\1\210\71\0\1\211\53\0\1\212\73\0\1\213"+
    "\41\0\2\46\1\4\1\47\3\4\1\214\16\4\3\46"+
    "\1\0\1\4\2\0\2\4\1\0\2\4\10\0\1\4"+
    "\11\0\2\46\1\4\1\47\22\4\3\46\1\0\1\4"+
    "\2\0\2\4\1\0\1\215\1\4\10\0\1\4\17\0"+
    "\1\216\55\0\2\46\1\4\1\47\2\4\1\217\17\4"+
    "\3\46\1\0\1\4\2\0\2\4\1\0\2\4\10\0"+
    "\1\4\11\0\2\46\1\4\1\47\6\4\1\220\6\4"+
    "\1\221\4\4\3\46\1\0\1\4\2\0\2\4\1\0"+
    "\2\4\10\0\1\4\11\0\2\46\1\4\1\47\10\4"+
    "\1\222\11\4\3\46\1\0\1\4\2\0\2\4\1\0"+
    "\2\4\10\0\1\4\11\0\2\46\1\4\1\47\5\4"+
    "\1\223\14\4\3\46\1\0\1\4\2\0\2\4\1\0"+
    "\2\4\10\0\1\4\11\0\2\46\1\4\1\47\22\4"+
    "\3\46\1\0\1\4\2\0\2\4\1\0\1\224\1\4"+
    "\10\0\1\4\11\0\2\46\1\4\1\47\4\4\1\225"+
    "\15\4\3\46\1\0\1\4\2\0\2\4\1\0\2\4"+
    "\10\0\1\4\11\0\2\46\1\4\1\47\15\4\1\226"+
    "\4\4\3\46\1\0\1\4\2\0\2\4\1\0\2\4"+
    "\10\0\1\4\11\0\2\46\1\4\1\47\12\4\1\227"+
    "\7\4\3\46\1\0\1\4\2\0\2\4\1\0\2\4"+
    "\10\0\1\4\11\0\2\46\1\4\1\47\22\4\3\46"+
    "\1\0\1\4\2\0\1\230\1\4\1\0\2\4\10\0"+
    "\1\4\11\0\2\46\1\4\1\47\22\4\3\46\1\0"+
    "\1\4\2\0\2\4\1\231\2\4\10\0\1\4\11\0"+
    "\2\46\1\4\1\47\10\4\1\232\11\4\3\46\1\0"+
    "\1\4\2\0\2\4\1\0\2\4\10\0\1\4\11\0"+
    "\2\46\1\4\1\47\17\4\1\233\2\4\3\46\1\0"+
    "\1\4\2\0\2\4\1\0\2\4\10\0\1\4\11\0"+
    "\2\46\1\4\1\47\13\4\1\234\6\4\3\46\1\0"+
    "\1\4\2\0\2\4\1\0\2\4\10\0\1\4\11\0"+
    "\2\46\1\4\1\47\6\4\1\235\13\4\3\46\1\0"+
    "\1\4\2\0\2\4\1\0\2\4\10\0\1\4\11\0"+
    "\2\46\1\4\1\47\6\4\1\236\13\4\3\46\1\0"+
    "\1\4\2\0\2\4\1\0\2\4\10\0\1\4\11\0"+
    "\2\46\1\4\1\47\5\4\1\237\14\4\3\46\1\0"+
    "\1\4\2\0\2\4\1\0\2\4\10\0\1\4\11\0"+
    "\2\46\1\4\1\47\4\4\1\240\3\4\1\241\11\4"+
    "\3\46\1\0\1\4\2\0\2\4\1\0\2\4\10\0"+
    "\1\4\11\0\2\46\1\4\1\47\22\4\3\46\1\0"+
    "\1\4\2\0\2\4\1\0\1\242\1\4\10\0\1\4"+
    "\11\0\2\46\1\4\1\47\11\4\1\243\10\4\3\46"+
    "\1\0\1\4\2\0\2\4\1\0\2\4\10\0\1\4"+
    "\21\0\1\244\64\0\1\245\73\0\1\246\54\0\1\247"+
    "\104\0\1\250\37\0\1\251\1\0\1\252\57\0\1\253"+
    "\65\0\1\254\77\0\1\255\40\0\2\46\1\4\1\47"+
    "\7\4\1\256\12\4\3\46\1\0\1\4\2\0\2\4"+
    "\1\0\2\4\10\0\1\4\11\0\2\46\1\4\1\47"+
    "\15\4\1\257\4\4\3\46\1\0\1\4\2\0\2\4"+
    "\1\0\2\4\10\0\1\4\11\0\2\46\1\4\1\47"+
    "\6\4\1\260\13\4\3\46\1\0\1\4\2\0\2\4"+
    "\1\0\2\4\10\0\1\4\11\0\2\46\1\4\1\47"+
    "\7\4\1\261\12\4\3\46\1\0\1\4\2\0\2\4"+
    "\1\0\2\4\10\0\1\4\11\0\2\46\1\4\1\47"+
    "\17\4\1\262\2\4\3\46\1\0\1\4\2\0\2\4"+
    "\1\0\2\4\10\0\1\4\11\0\2\46\1\4\1\47"+
    "\4\4\1\263\15\4\3\46\1\0\1\4\2\0\2\4"+
    "\1\0\2\4\10\0\1\4\11\0\2\46\1\4\1\47"+
    "\15\4\1\264\4\4\3\46\1\0\1\4\2\0\2\4"+
    "\1\0\2\4\10\0\1\4\11\0\2\46\1\4\1\47"+
    "\3\4\1\265\16\4\3\46\1\0\1\4\2\0\2\4"+
    "\1\0\2\4\10\0\1\4\11\0\2\46\1\4\1\47"+
    "\22\4\3\46\1\0\1\4\2\0\1\266\1\4\1\0"+
    "\2\4\10\0\1\4\11\0\2\46\1\4\1\47\11\4"+
    "\1\267\10\4\3\46\1\0\1\4\2\0\2\4\1\0"+
    "\2\4\10\0\1\4\11\0\2\46\1\4\1\47\22\4"+
    "\3\46\1\0\1\4\2\0\1\4\1\270\1\0\2\4"+
    "\10\0\1\4\32\0\1\271\42\0\2\46\1\4\1\47"+
    "\3\4\1\272\16\4\3\46\1\0\1\4\2\0\2\4"+
    "\1\0\2\4\10\0\1\4\11\0\2\46\1\4\1\47"+
    "\7\4\1\273\12\4\3\46\1\0\1\4\2\0\2\4"+
    "\1\0\2\4\10\0\1\4\11\0\2\46\1\4\1\47"+
    "\14\4\1\261\5\4\3\46\1\0\1\4\2\0\2\4"+
    "\1\0\2\4\10\0\1\4\11\0\2\46\1\4\1\47"+
    "\4\4\1\274\15\4\3\46\1\0\1\4\2\0\2\4"+
    "\1\0\2\4\10\0\1\4\11\0\2\46\1\4\1\47"+
    "\22\4\3\46\1\0\1\4\2\0\1\275\1\4\1\0"+
    "\2\4\10\0\1\4\11\0\2\46\1\4\1\47\3\4"+
    "\1\276\16\4\3\46\1\0\1\4\2\0\2\4\1\0"+
    "\2\4\10\0\1\4\11\0\2\46\1\4\1\47\15\4"+
    "\1\277\4\4\3\46\1\0\1\4\2\0\2\4\1\0"+
    "\2\4\10\0\1\4\11\0\2\46\1\4\1\47\15\4"+
    "\1\300\4\4\3\46\1\0\1\4\2\0\2\4\1\0"+
    "\2\4\10\0\1\4\34\0\1\301\54\0\1\302\60\0"+
    "\1\303\62\0\1\304\63\0\1\305\64\0\1\306\73\0"+
    "\1\307\54\0\1\310\104\0\1\311\30\0\2\46\1\4"+
    "\1\47\4\4\1\312\15\4\3\46\1\0\1\4\2\0"+
    "\2\4\1\0\2\4\10\0\1\4\11\0\2\46\1\4"+
    "\1\47\10\4\1\313\11\4\3\46\1\0\1\4\2\0"+
    "\2\4\1\0\2\4\10\0\1\4\11\0\2\46\1\4"+
    "\1\47\10\4\1\262\11\4\3\46\1\0\1\4\2\0"+
    "\2\4\1\0\2\4\10\0\1\4\11\0\2\46\1\4"+
    "\1\47\22\4\3\46\1\0\1\4\2\0\1\314\1\4"+
    "\1\0\2\4\10\0\1\4\11\0\2\46\1\4\1\47"+
    "\7\4\1\315\12\4\3\46\1\0\1\4\2\0\2\4"+
    "\1\0\2\4\10\0\1\4\11\0\2\46\1\4\1\47"+
    "\21\4\1\316\3\46\1\0\1\4\2\0\2\4\1\0"+
    "\2\4\10\0\1\4\11\0\2\46\1\4\1\47\12\4"+
    "\1\317\7\4\3\46\1\0\1\4\2\0\2\4\1\0"+
    "\2\4\10\0\1\4\46\0\1\320\26\0\2\46\1\4"+
    "\1\47\1\321\21\4\3\46\1\0\1\4\2\0\2\4"+
    "\1\0\2\4\10\0\1\4\11\0\2\46\1\4\1\47"+
    "\4\4\1\322\15\4\3\46\1\0\1\4\2\0\2\4"+
    "\1\0\2\4\10\0\1\4\11\0\2\46\1\4\1\47"+
    "\5\4\1\323\14\4\3\46\1\0\1\4\2\0\2\4"+
    "\1\0\2\4\10\0\1\4\11\0\2\46\1\4\1\47"+
    "\22\4\3\46\1\0\1\4\2\0\1\4\1\324\1\0"+
    "\2\4\10\0\1\4\11\0\2\46\1\4\1\47\10\4"+
    "\1\325\11\4\3\46\1\0\1\4\2\0\2\4\1\0"+
    "\2\4\10\0\1\4\46\0\1\326\64\0\1\327\40\0"+
    "\1\330\63\0\1\331\73\0\1\332\54\0\1\333\60\0"+
    "\1\334\62\0\1\335\53\0\2\46\1\4\1\47\1\4"+
    "\1\336\20\4\3\46\1\0\1\4\2\0\2\4\1\0"+
    "\2\4\10\0\1\4\11\0\2\46\1\4\1\47\6\4"+
    "\1\337\13\4\3\46\1\0\1\4\2\0\2\4\1\0"+
    "\2\4\10\0\1\4\11\0\2\46\1\4\1\47\4\4"+
    "\1\340\15\4\3\46\1\0\1\4\2\0\2\4\1\0"+
    "\2\4\10\0\1\4\11\0\2\46\1\4\1\47\4\4"+
    "\1\341\15\4\3\46\1\0\1\4\2\0\2\4\1\0"+
    "\2\4\10\0\1\4\24\0\1\342\50\0\2\46\1\4"+
    "\1\47\10\4\1\343\11\4\3\46\1\0\1\4\2\0"+
    "\2\4\1\0\2\4\10\0\1\4\11\0\2\46\1\4"+
    "\1\47\12\4\1\344\7\4\3\46\1\0\1\4\2\0"+
    "\2\4\1\0\2\4\10\0\1\4\37\0\1\345\1\346"+
    "\55\0\1\347\56\0\1\350\63\0\1\351\104\0\1\352"+
    "\64\0\1\353\40\0\1\354\63\0\1\355\50\0\2\46"+
    "\1\4\1\47\10\4\1\356\11\4\3\46\1\0\1\4"+
    "\2\0\2\4\1\0\2\4\10\0\1\4\11\0\2\46"+
    "\1\4\1\47\7\4\1\357\12\4\3\46\1\0\1\4"+
    "\2\0\2\4\1\0\2\4\10\0\1\4\11\0\2\46"+
    "\1\4\1\47\7\4\1\360\12\4\3\46\1\0\1\4"+
    "\2\0\2\4\1\0\2\4\10\0\1\4\11\0\2\46"+
    "\1\4\1\47\3\4\1\361\16\4\3\46\1\0\1\4"+
    "\2\0\2\4\1\0\2\4\10\0\1\4\23\0\1\362"+
    "\51\0\2\46\1\4\1\47\22\4\3\46\1\0\1\4"+
    "\2\0\2\4\1\0\1\363\1\4\10\0\1\4\11\0"+
    "\2\46\1\4\1\47\4\4\1\364\15\4\3\46\1\0"+
    "\1\4\2\0\2\4\1\0\2\4\10\0\1\4\44\0"+
    "\1\365\63\0\1\366\63\0\1\367\41\0\1\370\105\0"+
    "\1\371\56\0\1\372\1\373\55\0\1\374\56\0\1\375"+
    "\63\0\1\376\47\0\2\46\1\4\1\47\2\4\1\377"+
    "\17\4\3\46\1\0\1\4\2\0\2\4\1\0\2\4"+
    "\10\0\1\4\11\0\2\46\1\4\1\47\12\4\1\u0100"+
    "\7\4\3\46\1\0\1\4\2\0\2\4\1\0\2\4"+
    "\10\0\1\4\11\0\2\46\1\4\1\47\7\4\1\u0101"+
    "\12\4\3\46\1\0\1\4\2\0\2\4\1\0\2\4"+
    "\10\0\1\4\24\0\1\u0102\50\0\2\46\1\4\1\47"+
    "\15\4\1\u0103\4\4\3\46\1\0\1\4\2\0\2\4"+
    "\1\0\2\4\10\0\1\4\11\0\2\46\1\4\1\47"+
    "\3\4\1\u0104\16\4\3\46\1\0\1\4\2\0\2\4"+
    "\1\0\2\4\10\0\1\4\44\0\1\u0105\63\0\1\u0106"+
    "\63\0\1\u0107\63\0\1\u0108\41\0\1\u0109\105\0\1\u010a"+
    "\30\0\2\46\1\4\1\47\17\4\1\u010b\2\4\3\46"+
    "\1\0\1\4\2\0\2\4\1\0\2\4\10\0\1\4"+
    "\11\0\2\46\1\4\1\47\4\4\1\u010c\15\4\3\46"+
    "\1\0\1\4\2\0\2\4\1\0\2\4\10\0\1\4"+
    "\27\0\1\u010d\45\0\2\46\1\4\1\47\7\4\1\u010e"+
    "\12\4\3\46\1\0\1\4\2\0\2\4\1\0\2\4"+
    "\10\0\1\4\44\0\1\u010f\30\0\2\46\1\4\1\47"+
    "\15\4\1\u0110\4\4\3\46\1\0\1\4\2\0\2\4"+
    "\1\0\2\4\10\0\1\4\34\0\1\u0111\40\0\2\46"+
    "\1\4\1\47\4\4\1\u0112\15\4\3\46\1\0\1\4"+
    "\2\0\2\4\1\0\2\4\10\0\1\4\32\0\1\u0113"+
    "\41\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11232];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\15\1\1\11\1\1\10\11"+
    "\1\1\4\11\1\1\2\11\2\1\1\0\26\1\6\0"+
    "\2\1\1\11\1\0\30\1\3\0\1\11\5\0\2\1"+
    "\1\0\27\1\11\0\2\1\1\11\12\1\1\0\12\1"+
    "\4\0\1\11\5\0\13\1\1\0\7\1\10\0\1\11"+
    "\6\1\1\0\5\1\10\0\4\1\1\0\2\1\11\0"+
    "\4\1\1\0\2\1\3\11\1\0\1\11\5\0\3\1"+
    "\1\0\2\1\4\11\1\0\1\11\2\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
static ArrayList Li= new ArrayList();
static ArrayList Co= new ArrayList();
static ArrayList Ca= new ArrayList();

public static void mistakes3()
{
String Reporte= "Lexy3.html";
FileWriter fw = null;
try {
fw = new FileWriter(Reporte);
BufferedWriter bw = new BufferedWriter(fw);
PrintWriter salArch = new PrintWriter(bw);
salArch.println();

//aqui empezas a escribir el html
salArch.print("<html>");
salArch.print("<head>Errores</head>");
salArch.print("<body>");
//definis tu tabla con cada una de las columnas
salArch.print("<table width='200' border='1'><tr><th scope='col'>Numero</th><th scope='col'>Linea</th><th scope='col'>Columna</th><th scope='col'>Error</th></tr>");
int n=0;
//errores,alinea,posicion  son un arrayList del mismo tamano
        for (int i = 0; i<Li.size(); i++)
        {
            salArch.print("<tr><td>"+(n+1)+"</td><td>"+Li.get(i)+"</td><td>"+Co.get(i)+"</td><td>"+Ca.get(i)+"</td></tr>");
n= n+1;

        }

salArch.println("</table><p>&nbsp;</p><p>&nbsp;</p></body></html>");
salArch.close();
                }
                catch (IOException ex) {
}


try {

            File path = new File("Lexy3.html");
            Desktop.getDesktop().open(path);
        } catch (IOException ex) {
          //  Logger.getLogger(Proyecto1_Compi1View.class.getName()).log(Level.SEVERE, null, ex);
        }

}

public static void llamar()
{
    proy2.pag.CUP$parser$actions.panel1;
}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 194) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 55: 
          { return new Symbol(sym.pan1c,yyline,yychar,new String(yytext()));
          }
        case 64: break;
        case 48: 
          { return new Symbol(sym.pan1a,yyline,yychar,new String(yytext()));
          }
        case 65: break;
        case 8: 
          { return new Symbol(sym.comi,yyline,yychar,new String(yytext()));
          }
        case 66: break;
        case 28: 
          { return new Symbol(sym.rojo,yyline,yychar,new String(yytext()));
          }
        case 67: break;
        case 29: 
          { return new Symbol(sym.impo,yyline,yychar,new String(yytext()));
          }
        case 68: break;
        case 3: 
          { return new Symbol(sym.let,yyline,yychar,new String(yytext()));
          }
        case 69: break;
        case 24: 
          { return new Symbol(sym.s10,yyline,yychar,new String(yytext()));
          }
        case 70: break;
        case 34: 
          { return new Symbol(sym.xmla,yyline,yychar,new String(yytext()));
          }
        case 71: break;
        case 52: 
          { return new Symbol(sym.np,yyline,yychar,new String(yytext()));
          }
        case 72: break;
        case 41: 
          { return new Symbol(sym.xmlc,yyline,yychar,new String(yytext()));
          }
        case 73: break;
        case 35: 
          { return new Symbol(sym.fondo,yyline,yychar,new String(yytext()));
          }
        case 74: break;
        case 30: 
          { return new Symbol(sym.azul,yyline,yychar,new String(yytext()));
          }
        case 75: break;
        case 58: 
          { return new Symbol(sym.vinc,yyline,yychar,new String(yytext()));
          }
        case 76: break;
        case 51: 
          { return new Symbol(sym.vina,yyline,yychar,new String(yytext()));
          }
        case 77: break;
        case 63: 
          { return new Symbol(sym.tamtit,yyline,yychar,new String(yytext()));
          }
        case 78: break;
        case 26: 
          { return new Symbol(sym.vine,yyline,yychar,new String(yytext()));
          }
        case 79: break;
        case 54: 
          { return new Symbol(sym.ima,yyline,yychar,new String(yytext()));
          }
        case 80: break;
        case 60: 
          { return new Symbol(sym.imc,yyline,yychar,new String(yytext()));
          }
        case 81: break;
        case 46: 
          { return new Symbol(sym.verdana,yyline,yychar,new String(yytext()));
          }
        case 82: break;
        case 39: 
          { return new Symbol(sym.morado,yyline,yychar,new String(yytext()));
          }
        case 83: break;
        case 6: 
          { return new Symbol(sym.igual,yyline,yychar,new String(yytext()));
          }
        case 84: break;
        case 53: 
          { return new Symbol(sym.laranja,yyline,yychar,new String(yytext()));
          }
        case 85: break;
        case 11: 
          { return new Symbol(sym.s2,yyline,yychar,new String(yytext()));
          }
        case 86: break;
        case 2: 
          { return new Symbol(sym.numerito,yyline,yychar,new String(yytext()));
          }
        case 87: break;
        case 13: 
          { return new Symbol(sym.s4,yyline,yychar,new String(yytext()));
          }
        case 88: break;
        case 31: 
          { return new Symbol(sym.nero,yyline,yychar,new String(yytext()));
          }
        case 89: break;
        case 15: 
          { return new Symbol(sym.s6,yyline,yychar,new String(yytext()));
          }
        case 90: break;
        case 4: 
          { return new Symbol(sym.dot,yyline,yychar,new String(yytext()));
          }
        case 91: break;
        case 17: 
          { return new Symbol(sym.s8,yyline,yychar,new String(yytext()));
          }
        case 92: break;
        case 47: 
          { return new Symbol(sym.tre,yyline,yychar,new String(yytext()));
          }
        case 93: break;
        case 23: 
          { return new Symbol(sym.typetxt,yyline,yychar,new String(yytext()));
          }
        case 94: break;
        case 19: 
          { return new Symbol(sym.com,yyline,yychar,new String(yytext()));
          }
        case 95: break;
        case 32: 
          { return new Symbol(sym.arial,yyline,yychar,new String(yytext()));
          }
        case 96: break;
        case 59: 
          { return new Symbol(sym.typefont,yyline,yychar,new String(yytext()));
          }
        case 97: break;
        case 42: 
          { return new Symbol(sym.fuente,yyline,yychar,new String(yytext()));
          }
        case 98: break;
        case 57: 
          { return new Symbol(sym.parc,yyline,yychar,new String(yytext()));
          }
        case 99: break;
        case 50: 
          { return new Symbol(sym.para,yyline,yychar,new String(yytext()));
          }
        case 100: break;
        case 7: 
          { return new Symbol(sym.dosp,yyline,yychar,new String(yytext()));
          }
        case 101: break;
        case 5: 
          { return new Symbol(sym.s11,yyline,yychar,new String(yytext()));
          }
        case 102: break;
        case 25: 
          { return new Symbol(sym.path,yyline,yychar,new String(yytext()));
          }
        case 103: break;
        case 40: 
          { return new Symbol(sym.branco,yyline,yychar,new String(yytext()));
          }
        case 104: break;
        case 22: 
          { return new Symbol(sym.ids,yyline,yychar,new String(yytext()));
          }
        case 105: break;
        case 44: 
          { return new Symbol(sym.celeste,yyline,yychar,new String(yytext()));
          }
        case 106: break;
        case 9: 
          { return new Symbol(sym.semi,yyline,yychar,new String(yytext()));
          }
        case 107: break;
        case 33: 
          { return new Symbol(sym.verde,yyline,yychar,new String(yytext()));
          }
        case 108: break;
        case 37: 
          { return new Symbol(sym.rosa,yyline,yychar,new String(yytext()));
          }
        case 109: break;
        case 49: 
          { return new Symbol(sym.pan2a,yyline,yychar,new String(yytext()));
          }
        case 110: break;
        case 62: 
          { return new Symbol(sym.colf,yyline,yychar,new String(yytext()));
          }
        case 111: break;
        case 61: 
          { return new Symbol(sym.textti,yyline,yychar,new String(yytext()));
          }
        case 112: break;
        case 56: 
          { return new Symbol(sym.pan2c,yyline,yychar,new String(yytext()));
          }
        case 113: break;
        case 38: 
          { return new Symbol(sym.image,yyline,yychar,new String(yytext()));
          }
        case 114: break;
        case 45: 
          { return new Symbol(sym.courier,yyline,yychar,new String(yytext()));
          }
        case 115: break;
        case 1: 
          { Li.add(yyline);
    Co.add(yychar);
    Ca.add(yytext());
    System.out.println("error lexico en "  + (yyline+1) + "," + (yychar+1) + " No se reconoce " + yytext());
    yychar=0;
          }
        case 116: break;
        case 43: 
          { return new Symbol(sym.geor,yyline,yychar,new String(yytext()));
          }
        case 117: break;
        case 36: 
          { return new Symbol(sym.typef,yyline,yychar,new String(yytext()));
          }
        case 118: break;
        case 20: 
          { yychar=0;
          }
        case 119: break;
        case 10: 
          { return new Symbol(sym.s1,yyline,yychar,new String(yytext()));
          }
        case 120: break;
        case 12: 
          { return new Symbol(sym.s3,yyline,yychar,new String(yytext()));
          }
        case 121: break;
        case 14: 
          { return new Symbol(sym.s5,yyline,yychar,new String(yytext()));
          }
        case 122: break;
        case 18: 
          { return new Symbol(sym.s9,yyline,yychar,new String(yytext()));
          }
        case 123: break;
        case 16: 
          { return new Symbol(sym.s7,yyline,yychar,new String(yytext()));
          }
        case 124: break;
        case 21: 
          { 
          }
        case 125: break;
        case 27: 
          { return new Symbol(sym.gris,yyline,yychar,new String(yytext()));
          }
        case 126: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
