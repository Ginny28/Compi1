/* The following code was generated by JFlex 1.4.3 on 9/26/12 10:55 PM */

import java.lang.System;
import java.util.ArrayList;
import java_cup.runtime.*;

 
 

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/26/12 10:55 PM from the specification file
 * <tt>LexyM.lex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\53\1\52\2\0\1\53\22\0\1\37\6\0\1\41\4\0"+
    "\1\42\1\0\1\3\1\30\1\2\1\5\1\6\1\7\1\10\1\10"+
    "\1\11\1\11\1\1\1\1\1\40\1\51\1\12\1\50\1\27\2\0"+
    "\1\24\1\32\1\33\1\35\1\14\1\31\1\13\1\45\1\17\1\46"+
    "\1\43\1\26\1\23\1\21\1\20\1\34\1\4\1\25\1\15\1\16"+
    "\1\36\1\47\3\4\1\44\4\4\1\22\1\4\1\24\1\32\1\33"+
    "\1\35\1\14\1\31\1\13\1\45\1\17\1\46\1\43\1\26\1\23"+
    "\1\21\1\20\1\34\1\4\1\25\1\15\1\16\1\36\1\47\3\4"+
    "\1\44\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\4\5\1\1"+
    "\14\4\1\6\1\7\3\4\1\10\1\11\1\12\3\0"+
    "\2\2\10\0\1\4\2\13\24\4\1\14\3\4\1\15"+
    "\2\0\1\16\16\0\34\4\21\0\1\4\1\17\11\4"+
    "\1\20\1\4\1\21\12\4\1\22\1\4\1\23\1\4"+
    "\20\0\3\4\1\24\3\4\1\25\1\4\1\26\1\4"+
    "\1\27\1\30\1\31\4\4\1\32\3\4\1\33\1\4"+
    "\20\0\3\4\1\34\1\35\1\36\1\4\1\37\1\40"+
    "\1\4\1\41\4\4\1\42\1\4\3\0\1\43\14\0"+
    "\1\44\4\4\1\45\2\4\1\46\1\4\1\47\1\0"+
    "\1\14\3\0\1\50\1\51\10\0\6\4\1\52\10\0"+
    "\1\53\3\0\1\4\1\54\4\4\1\55\3\0\1\56"+
    "\4\0\1\57\1\0\1\60\1\61\3\4\4\0\1\62"+
    "\3\0\1\63\1\4\1\64\7\0\1\65\24\0\1\66"+
    "\4\0\1\67\5\0\1\70\3\0\1\71\3\0\1\72"+
    "\2\0\1\73\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[381];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\54\0\260\0\334\0\u0108"+
    "\0\u0134\0\130\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c"+
    "\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c"+
    "\0\54\0\u03c8\0\u03f4\0\u0420\0\54\0\54\0\54\0\u044c"+
    "\0\u0478\0\u04a4\0\u04d0\0\u04fc\0\u0528\0\u0554\0\u0580\0\u05ac"+
    "\0\u05d8\0\u0604\0\u0630\0\u065c\0\u0688\0\u06b4\0\260\0\u06e0"+
    "\0\u070c\0\u0738\0\u0764\0\u0790\0\u07bc\0\u07e8\0\u0814\0\u0840"+
    "\0\u086c\0\u0898\0\u08c4\0\u08f0\0\u091c\0\u0948\0\u0974\0\u09a0"+
    "\0\u09cc\0\u09f8\0\u0a24\0\260\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4"+
    "\0\u0b00\0\u0b2c\0\u04a4\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08"+
    "\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68"+
    "\0\u0d94\0\u0dc0\0\u0dec\0\u0e18\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8"+
    "\0\u0ef4\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028"+
    "\0\u1054\0\u1080\0\u10ac\0\u10d8\0\u1104\0\u1130\0\u115c\0\u1188"+
    "\0\u11b4\0\u11e0\0\u120c\0\u1238\0\u1264\0\u1290\0\u12bc\0\u12e8"+
    "\0\u1314\0\u1340\0\u136c\0\u1398\0\u13c4\0\u13f0\0\u141c\0\u1448"+
    "\0\u1474\0\u14a0\0\u14cc\0\u14f8\0\u1524\0\u1550\0\u157c\0\260"+
    "\0\u15a8\0\u15d4\0\u1600\0\u162c\0\u1658\0\u1684\0\u16b0\0\u16dc"+
    "\0\u1708\0\260\0\u1734\0\260\0\u1760\0\u178c\0\u17b8\0\u17e4"+
    "\0\u1810\0\u183c\0\u1868\0\u1894\0\u18c0\0\u18ec\0\260\0\u1918"+
    "\0\260\0\u1944\0\u1970\0\u199c\0\u19c8\0\u19f4\0\u1a20\0\u1a4c"+
    "\0\u1a78\0\u1aa4\0\u1ad0\0\u1afc\0\u1b28\0\u1b54\0\u1b80\0\u1bac"+
    "\0\u1bd8\0\u1c04\0\u1c30\0\u1c5c\0\u1c88\0\260\0\u1cb4\0\u1ce0"+
    "\0\u1d0c\0\260\0\u1d38\0\260\0\u1d64\0\260\0\260\0\260"+
    "\0\u1d90\0\u1dbc\0\u1de8\0\u1e14\0\u1e40\0\u1e6c\0\u1e98\0\u1ec4"+
    "\0\260\0\u1ef0\0\u1f1c\0\u1f48\0\u1f74\0\u1fa0\0\u1fcc\0\u1ff8"+
    "\0\u2024\0\u2050\0\u207c\0\u20a8\0\u20d4\0\u2100\0\u212c\0\u2158"+
    "\0\u2184\0\u21b0\0\u21dc\0\u2208\0\u2234\0\260\0\260\0\260"+
    "\0\u2260\0\260\0\260\0\u228c\0\260\0\u22b8\0\u22e4\0\u2310"+
    "\0\u233c\0\260\0\u2368\0\u2394\0\u23c0\0\u23ec\0\54\0\u2418"+
    "\0\u2444\0\u2470\0\u249c\0\u24c8\0\u24f4\0\u2520\0\u254c\0\u2578"+
    "\0\u25a4\0\u25d0\0\u25fc\0\260\0\u2628\0\u2654\0\u2680\0\u26ac"+
    "\0\260\0\u26d8\0\u2704\0\260\0\u2730\0\260\0\u275c\0\54"+
    "\0\u2788\0\u27b4\0\u27e0\0\54\0\54\0\u280c\0\u2838\0\u2864"+
    "\0\u2890\0\u28bc\0\u28e8\0\u2914\0\u2940\0\u296c\0\u2998\0\u29c4"+
    "\0\u29f0\0\u2a1c\0\u2a48\0\260\0\u2a74\0\u2aa0\0\u2acc\0\u2af8"+
    "\0\u2b24\0\u2b50\0\u2b7c\0\u2ba8\0\54\0\u2bd4\0\u2c00\0\u2c2c"+
    "\0\u2c58\0\260\0\u2c84\0\u2cb0\0\u2cdc\0\u2d08\0\54\0\u2d34"+
    "\0\u2d60\0\u2d8c\0\54\0\u2db8\0\u2de4\0\u2e10\0\u2e3c\0\54"+
    "\0\u2e68\0\260\0\260\0\u2e94\0\u2ec0\0\u2eec\0\u2f18\0\u2f44"+
    "\0\u2f70\0\u2f9c\0\54\0\u2fc8\0\u2ff4\0\u3020\0\260\0\u304c"+
    "\0\260\0\u3078\0\u30a4\0\u30d0\0\u30fc\0\u3128\0\u3154\0\u3180"+
    "\0\260\0\u31ac\0\u31d8\0\u3204\0\u3230\0\u325c\0\u3288\0\u32b4"+
    "\0\u32e0\0\u330c\0\u3338\0\u3364\0\u3390\0\u33bc\0\u33e8\0\u3414"+
    "\0\u3440\0\u346c\0\u3498\0\u34c4\0\u34f0\0\54\0\u351c\0\u3548"+
    "\0\u3574\0\u35a0\0\54\0\u35cc\0\u35f8\0\u3624\0\u3650\0\u367c"+
    "\0\54\0\u36a8\0\u36d4\0\u3700\0\54\0\u372c\0\u3758\0\u3784"+
    "\0\54\0\u37b0\0\u37dc\0\54\0\54";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[381];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\2\12\1\13\1\14\2\6\1\15\1\6\1\16\1\17"+
    "\1\6\1\20\1\21\1\22\1\23\2\2\1\24\1\25"+
    "\1\26\1\27\2\6\1\30\1\2\1\31\1\2\1\32"+
    "\1\6\1\33\1\6\1\34\1\35\1\36\1\37\1\30"+
    "\55\0\2\3\1\40\1\0\5\3\43\0\1\41\3\0"+
    "\5\41\46\0\1\6\6\0\14\6\2\0\6\6\3\0"+
    "\1\42\5\6\5\0\1\43\1\44\1\40\1\0\2\44"+
    "\3\43\43\0\2\43\1\40\1\0\5\43\43\0\1\3"+
    "\1\43\1\40\1\0\1\43\4\3\55\0\1\45\2\0"+
    "\1\46\7\0\1\47\1\0\1\50\1\51\1\0\1\52"+
    "\1\53\1\54\22\0\1\6\6\0\1\6\1\55\10\6"+
    "\1\56\1\6\2\0\6\6\3\0\1\42\5\6\10\0"+
    "\1\6\6\0\6\6\1\57\2\6\1\60\1\61\1\6"+
    "\2\0\6\6\3\0\1\42\5\6\10\0\1\6\6\0"+
    "\14\6\2\0\6\6\3\0\1\42\1\6\1\57\3\6"+
    "\10\0\1\6\6\0\1\6\1\62\3\6\1\63\6\6"+
    "\2\0\6\6\3\0\1\42\5\6\10\0\1\6\6\0"+
    "\5\6\1\64\3\6\1\65\2\6\2\0\6\6\3\0"+
    "\1\42\5\6\10\0\1\6\6\0\6\6\1\66\3\6"+
    "\1\67\1\6\2\0\6\6\3\0\1\42\1\6\1\70"+
    "\3\6\10\0\1\6\6\0\5\6\1\71\6\6\2\0"+
    "\6\6\3\0\1\42\5\6\10\0\1\6\6\0\14\6"+
    "\2\0\1\6\1\57\3\6\1\72\3\0\1\42\5\6"+
    "\10\0\1\6\6\0\1\6\1\73\3\6\1\74\6\6"+
    "\2\0\5\6\1\75\3\0\1\42\5\6\10\0\1\6"+
    "\6\0\5\6\1\76\5\6\1\77\2\0\6\6\3\0"+
    "\1\42\5\6\10\0\1\6\6\0\1\6\1\100\3\6"+
    "\1\101\3\6\1\102\2\6\2\0\6\6\3\0\1\42"+
    "\5\6\10\0\1\6\6\0\1\6\1\103\6\6\1\104"+
    "\1\6\1\105\1\6\2\0\6\6\3\0\1\42\5\6"+
    "\43\0\1\30\13\0\1\30\4\0\1\6\6\0\1\57"+
    "\13\6\2\0\6\6\3\0\1\42\5\6\10\0\1\6"+
    "\6\0\5\6\1\106\6\6\2\0\6\6\3\0\1\42"+
    "\5\6\10\0\1\6\6\0\1\6\1\107\12\6\2\0"+
    "\6\6\3\0\1\42\5\6\5\0\1\110\3\0\5\110"+
    "\72\0\1\111\7\0\1\112\17\0\1\113\6\0\14\113"+
    "\2\0\6\113\4\0\5\113\5\0\2\3\1\40\1\0"+
    "\5\3\16\0\1\111\24\0\2\3\1\40\1\0\5\3"+
    "\16\0\1\111\7\0\1\112\27\0\1\114\63\0\1\115"+
    "\46\0\1\116\47\0\1\117\2\0\1\120\7\0\1\121"+
    "\2\0\1\122\1\0\1\123\1\124\1\125\36\0\1\126"+
    "\57\0\1\127\54\0\1\130\42\0\1\131\43\0\1\6"+
    "\6\0\5\6\1\132\6\6\2\0\6\6\3\0\1\42"+
    "\5\6\10\0\1\6\6\0\4\6\1\133\7\6\2\0"+
    "\6\6\3\0\1\42\5\6\10\0\1\6\6\0\10\6"+
    "\1\134\3\6\2\0\6\6\3\0\1\42\5\6\10\0"+
    "\1\6\6\0\1\6\1\135\12\6\2\0\6\6\3\0"+
    "\1\42\5\6\10\0\1\6\6\0\1\136\13\6\2\0"+
    "\6\6\3\0\1\42\5\6\10\0\1\6\6\0\10\6"+
    "\1\137\3\6\2\0\6\6\3\0\1\42\5\6\10\0"+
    "\1\6\6\0\12\6\1\140\1\6\2\0\4\6\1\141"+
    "\1\6\3\0\1\42\5\6\10\0\1\6\6\0\12\6"+
    "\1\142\1\6\2\0\6\6\3\0\1\42\5\6\10\0"+
    "\1\6\6\0\11\6\1\143\2\6\2\0\6\6\3\0"+
    "\1\42\5\6\10\0\1\6\6\0\4\6\1\144\7\6"+
    "\2\0\6\6\3\0\1\42\5\6\10\0\1\6\6\0"+
    "\14\6\2\0\5\6\1\145\3\0\1\42\5\6\10\0"+
    "\1\6\6\0\2\6\1\146\11\6\2\0\6\6\3\0"+
    "\1\42\3\6\1\147\1\6\10\0\1\6\6\0\1\150"+
    "\13\6\2\0\6\6\3\0\1\42\5\6\10\0\1\6"+
    "\6\0\14\6\2\0\2\6\1\151\3\6\3\0\1\42"+
    "\5\6\10\0\1\6\6\0\6\6\1\152\5\6\2\0"+
    "\6\6\3\0\1\42\5\6\10\0\1\6\6\0\1\6"+
    "\1\153\12\6\2\0\6\6\3\0\1\42\5\6\10\0"+
    "\1\6\6\0\12\6\1\154\1\6\2\0\6\6\3\0"+
    "\1\42\5\6\10\0\1\6\6\0\11\6\1\155\2\6"+
    "\2\0\6\6\3\0\1\42\5\6\10\0\1\6\6\0"+
    "\13\6\1\156\2\0\6\6\3\0\1\42\5\6\10\0"+
    "\1\6\6\0\13\6\1\157\2\0\5\6\1\160\3\0"+
    "\1\42\5\6\10\0\1\6\6\0\6\6\1\161\5\6"+
    "\2\0\6\6\3\0\1\42\5\6\10\0\1\6\6\0"+
    "\2\6\1\162\11\6\2\0\6\6\3\0\1\42\5\6"+
    "\10\0\1\6\6\0\1\6\1\163\12\6\2\0\6\6"+
    "\3\0\1\42\5\6\10\0\1\6\6\0\12\6\1\164"+
    "\1\6\2\0\6\6\3\0\1\42\5\6\10\0\1\6"+
    "\6\0\12\6\1\165\1\6\2\0\6\6\3\0\1\42"+
    "\5\6\5\0\2\110\2\0\5\110\44\0\1\166\2\0"+
    "\1\167\50\0\1\170\2\0\4\170\60\0\1\171\70\0"+
    "\1\172\42\0\1\173\46\0\1\174\63\0\1\175\46\0"+
    "\1\176\54\0\1\177\57\0\1\200\54\0\1\201\42\0"+
    "\1\202\64\0\1\203\53\0\1\204\46\0\1\205\64\0"+
    "\1\206\26\0\1\6\6\0\12\6\1\207\1\6\2\0"+
    "\6\6\3\0\1\42\5\6\10\0\1\6\6\0\2\6"+
    "\1\210\11\6\2\0\6\6\3\0\1\42\5\6\10\0"+
    "\1\6\6\0\7\6\1\211\4\6\2\0\6\6\3\0"+
    "\1\42\5\6\10\0\1\6\6\0\14\6\2\0\1\6"+
    "\1\212\4\6\3\0\1\42\5\6\10\0\1\6\6\0"+
    "\12\6\1\213\1\6\2\0\6\6\3\0\1\42\5\6"+
    "\10\0\1\6\6\0\14\6\2\0\1\6\1\214\4\6"+
    "\3\0\1\42\5\6\10\0\1\6\6\0\11\6\1\215"+
    "\2\6\2\0\6\6\3\0\1\42\5\6\10\0\1\6"+
    "\6\0\1\6\1\216\12\6\2\0\6\6\3\0\1\42"+
    "\5\6\10\0\1\6\6\0\14\6\2\0\2\6\1\217"+
    "\3\6\3\0\1\42\5\6\10\0\1\6\6\0\12\6"+
    "\1\220\1\6\2\0\6\6\3\0\1\42\5\6\10\0"+
    "\1\6\6\0\11\6\1\221\2\6\2\0\6\6\3\0"+
    "\1\42\5\6\10\0\1\6\6\0\13\6\1\222\2\0"+
    "\6\6\3\0\1\42\5\6\10\0\1\6\6\0\11\6"+
    "\1\223\2\6\2\0\6\6\3\0\1\42\5\6\10\0"+
    "\1\6\6\0\5\6\1\224\6\6\2\0\6\6\3\0"+
    "\1\42\5\6\10\0\1\6\6\0\11\6\1\225\2\6"+
    "\2\0\6\6\3\0\1\42\5\6\10\0\1\6\6\0"+
    "\14\6\2\0\6\6\3\0\1\42\2\6\1\226\2\6"+
    "\10\0\1\6\6\0\14\6\2\0\4\6\1\227\1\6"+
    "\3\0\1\42\5\6\10\0\1\6\6\0\6\6\1\230"+
    "\5\6\2\0\6\6\3\0\1\42\5\6\10\0\1\6"+
    "\6\0\14\6\2\0\4\6\1\231\1\6\3\0\1\42"+
    "\5\6\10\0\1\6\6\0\6\6\1\232\5\6\2\0"+
    "\6\6\3\0\1\42\5\6\10\0\1\6\6\0\1\6"+
    "\1\233\12\6\2\0\6\6\3\0\1\42\5\6\10\0"+
    "\1\6\6\0\5\6\1\234\6\6\2\0\6\6\3\0"+
    "\1\42\5\6\10\0\1\6\6\0\12\6\1\235\1\6"+
    "\2\0\6\6\3\0\1\42\5\6\10\0\1\6\6\0"+
    "\3\6\1\236\10\6\2\0\6\6\3\0\1\42\5\6"+
    "\10\0\1\6\6\0\5\6\1\237\6\6\2\0\6\6"+
    "\3\0\1\42\5\6\10\0\1\6\6\0\14\6\2\0"+
    "\2\6\1\240\3\6\3\0\1\42\5\6\10\0\1\6"+
    "\6\0\11\6\1\241\2\6\2\0\6\6\3\0\1\42"+
    "\5\6\10\0\1\6\6\0\14\6\2\0\4\6\1\242"+
    "\1\6\3\0\1\42\5\6\5\0\1\243\3\0\5\243"+
    "\44\0\1\243\2\0\2\243\46\0\2\244\2\0\5\244"+
    "\60\0\1\245\63\0\1\246\41\0\1\247\54\0\1\250"+
    "\70\0\1\251\42\0\1\252\57\0\1\253\53\0\1\254"+
    "\46\0\1\255\64\0\1\256\45\0\1\257\54\0\1\260"+
    "\64\0\1\261\40\0\1\262\35\0\1\6\6\0\1\263"+
    "\13\6\2\0\6\6\3\0\1\42\5\6\10\0\1\6"+
    "\6\0\14\6\2\0\1\264\5\6\3\0\1\42\5\6"+
    "\10\0\1\6\6\0\14\6\2\0\5\6\1\265\3\0"+
    "\1\42\5\6\10\0\1\6\6\0\5\6\1\266\6\6"+
    "\2\0\6\6\3\0\1\42\5\6\10\0\1\6\6\0"+
    "\12\6\1\267\1\6\2\0\6\6\3\0\1\42\5\6"+
    "\10\0\1\6\6\0\14\6\2\0\4\6\1\270\1\6"+
    "\3\0\1\42\5\6\10\0\1\6\6\0\13\6\1\271"+
    "\2\0\6\6\3\0\1\42\5\6\10\0\1\6\6\0"+
    "\11\6\1\272\2\6\2\0\6\6\3\0\1\42\5\6"+
    "\10\0\1\6\6\0\11\6\1\273\2\6\2\0\6\6"+
    "\3\0\1\42\5\6\10\0\1\6\6\0\13\6\1\274"+
    "\2\0\6\6\3\0\1\42\5\6\10\0\1\6\6\0"+
    "\14\6\2\0\4\6\1\275\1\6\3\0\1\42\5\6"+
    "\10\0\1\6\6\0\12\6\1\276\1\6\2\0\6\6"+
    "\3\0\1\42\5\6\10\0\1\6\6\0\11\6\1\277"+
    "\2\6\2\0\6\6\3\0\1\42\5\6\10\0\1\6"+
    "\6\0\5\6\1\300\6\6\2\0\6\6\3\0\1\42"+
    "\5\6\10\0\1\6\6\0\3\6\1\301\10\6\2\0"+
    "\6\6\3\0\1\42\5\6\10\0\1\6\6\0\1\6"+
    "\1\302\12\6\2\0\6\6\3\0\1\42\5\6\10\0"+
    "\1\6\6\0\14\6\2\0\2\6\1\303\3\6\3\0"+
    "\1\42\5\6\10\0\1\6\6\0\2\6\1\304\11\6"+
    "\2\0\6\6\3\0\1\42\5\6\10\0\1\6\6\0"+
    "\12\6\1\305\1\6\2\0\6\6\3\0\1\42\5\6"+
    "\10\0\1\6\6\0\4\6\1\306\7\6\2\0\6\6"+
    "\3\0\1\42\5\6\10\0\1\6\6\0\4\6\1\307"+
    "\7\6\2\0\6\6\3\0\1\42\5\6\10\0\1\6"+
    "\6\0\4\6\1\310\7\6\2\0\6\6\3\0\1\42"+
    "\5\6\10\0\1\6\6\0\1\6\1\311\7\6\1\312"+
    "\2\6\2\0\6\6\3\0\1\42\5\6\34\0\1\313"+
    "\62\0\1\314\33\0\1\315\60\0\1\316\53\0\1\317"+
    "\45\0\1\320\63\0\1\321\41\0\1\322\62\0\1\323"+
    "\54\0\1\324\64\0\1\325\40\0\1\326\55\0\1\327"+
    "\62\0\1\330\56\0\1\331\51\0\1\332\23\0\1\6"+
    "\6\0\4\6\1\333\7\6\2\0\6\6\3\0\1\42"+
    "\5\6\10\0\1\6\6\0\14\6\2\0\5\6\1\334"+
    "\3\0\1\42\5\6\10\0\1\6\6\0\14\6\2\0"+
    "\2\6\1\335\3\6\3\0\1\42\5\6\10\0\1\6"+
    "\6\0\1\6\1\336\12\6\2\0\6\6\3\0\1\42"+
    "\5\6\10\0\1\6\6\0\5\6\1\337\6\6\2\0"+
    "\6\6\3\0\1\42\5\6\10\0\1\6\6\0\5\6"+
    "\1\340\6\6\2\0\6\6\3\0\1\42\5\6\10\0"+
    "\1\6\6\0\6\6\1\341\5\6\2\0\6\6\3\0"+
    "\1\42\5\6\10\0\1\6\6\0\5\6\1\342\6\6"+
    "\2\0\6\6\3\0\1\42\5\6\10\0\1\6\6\0"+
    "\1\6\1\343\12\6\2\0\6\6\3\0\1\42\5\6"+
    "\10\0\1\6\6\0\7\6\1\344\4\6\2\0\6\6"+
    "\3\0\1\42\5\6\10\0\1\6\6\0\5\6\1\345"+
    "\6\6\2\0\6\6\3\0\1\42\5\6\10\0\1\6"+
    "\6\0\3\6\1\346\10\6\2\0\6\6\3\0\1\42"+
    "\5\6\10\0\1\6\6\0\7\6\1\347\4\6\2\0"+
    "\6\6\3\0\1\42\5\6\10\0\1\6\6\0\1\6"+
    "\1\350\12\6\2\0\6\6\3\0\1\42\5\6\10\0"+
    "\1\6\6\0\14\6\2\0\4\6\1\351\1\6\3\0"+
    "\1\42\5\6\10\0\1\6\6\0\5\6\1\352\6\6"+
    "\2\0\6\6\3\0\1\42\5\6\10\0\1\6\6\0"+
    "\6\6\1\353\5\6\2\0\6\6\3\0\1\42\5\6"+
    "\5\0\2\354\2\0\5\354\66\0\1\355\47\0\1\356"+
    "\62\0\1\357\63\0\1\360\33\0\1\361\60\0\1\362"+
    "\53\0\1\363\53\0\1\364\62\0\1\365\56\0\1\366"+
    "\51\0\1\367\35\0\1\370\53\0\1\371\70\0\1\372"+
    "\45\0\1\373\32\0\1\6\6\0\11\6\1\374\2\6"+
    "\2\0\6\6\3\0\1\42\5\6\10\0\1\6\6\0"+
    "\1\6\1\375\12\6\2\0\6\6\3\0\1\42\5\6"+
    "\10\0\1\6\6\0\14\6\2\0\6\6\3\0\1\42"+
    "\2\6\1\376\2\6\10\0\1\6\6\0\14\6\2\0"+
    "\6\6\3\0\1\42\3\6\1\377\1\6\10\0\1\6"+
    "\6\0\3\6\1\u0100\10\6\2\0\6\6\3\0\1\42"+
    "\5\6\10\0\1\6\6\0\1\6\1\u0101\12\6\2\0"+
    "\6\6\3\0\1\42\5\6\10\0\1\6\6\0\14\6"+
    "\2\0\1\u0102\1\u0103\4\6\3\0\1\42\5\6\10\0"+
    "\1\6\6\0\12\6\1\u0104\1\6\2\0\6\6\3\0"+
    "\1\42\5\6\10\0\1\6\6\0\11\6\1\u0105\2\6"+
    "\2\0\6\6\3\0\1\42\5\6\10\0\1\6\6\0"+
    "\11\6\1\u0106\2\6\2\0\6\6\3\0\1\42\5\6"+
    "\5\0\2\u0107\2\0\5\u0107\65\0\1\u0108\51\0\1\u0109"+
    "\53\0\1\u010a\52\0\1\u010b\62\0\1\u010c\53\0\1\u010d"+
    "\42\0\1\u010e\53\0\1\u010f\70\0\1\u0110\45\0\1\u0111"+
    "\46\0\1\u0112\47\0\1\u0113\55\0\1\u0114\55\0\1\u0115"+
    "\37\0\1\6\6\0\6\6\1\u0116\5\6\2\0\6\6"+
    "\3\0\1\42\5\6\10\0\1\6\6\0\1\6\1\u0117"+
    "\12\6\2\0\6\6\3\0\1\42\5\6\10\0\1\6"+
    "\6\0\11\6\1\u0118\2\6\2\0\6\6\3\0\1\42"+
    "\5\6\10\0\1\6\6\0\11\6\1\u0119\2\6\2\0"+
    "\6\6\3\0\1\42\5\6\10\0\1\6\6\0\14\6"+
    "\2\0\5\6\1\u011a\3\0\1\42\5\6\10\0\1\6"+
    "\6\0\5\6\1\u011b\6\6\2\0\6\6\3\0\1\42"+
    "\5\6\10\0\1\6\6\0\14\6\2\0\4\6\1\u011c"+
    "\1\6\3\0\1\42\5\6\5\0\2\u011d\2\0\5\u011d"+
    "\64\0\1\u011e\51\0\1\u011f\54\0\1\u0120\52\0\1\u0121"+
    "\47\0\1\u0122\55\0\1\u0123\55\0\1\u0124\62\0\1\u0125"+
    "\51\0\1\u0126\46\0\1\u0127\70\0\1\u0128\22\0\1\6"+
    "\6\0\3\6\1\u0129\10\6\2\0\6\6\3\0\1\42"+
    "\5\6\10\0\1\6\6\0\3\6\1\u012a\10\6\2\0"+
    "\6\6\3\0\1\42\5\6\10\0\1\6\6\0\14\6"+
    "\2\0\4\6\1\u012b\1\6\3\0\1\42\5\6\10\0"+
    "\1\6\6\0\14\6\2\0\1\6\1\u012c\4\6\3\0"+
    "\1\42\5\6\10\0\1\6\6\0\1\6\1\u012d\12\6"+
    "\2\0\6\6\3\0\1\42\5\6\10\0\1\6\6\0"+
    "\12\6\1\u012e\1\6\2\0\6\6\3\0\1\42\5\6"+
    "\5\0\2\u012f\2\0\5\u012f\65\0\1\u0130\53\0\1\u0131"+
    "\52\0\1\u0132\60\0\1\u0133\51\0\1\u0134\46\0\1\u0135"+
    "\70\0\1\u0136\35\0\1\u0137\63\0\1\u0138\62\0\1\u0139"+
    "\21\0\1\6\6\0\1\6\1\u013a\12\6\2\0\6\6"+
    "\3\0\1\42\5\6\10\0\1\6\6\0\5\6\1\u013b"+
    "\6\6\2\0\6\6\3\0\1\42\5\6\10\0\1\6"+
    "\6\0\13\6\1\u013c\2\0\6\6\3\0\1\42\5\6"+
    "\10\0\1\6\6\0\6\6\1\u013d\5\6\2\0\6\6"+
    "\3\0\1\42\5\6\10\0\1\6\6\0\14\6\2\0"+
    "\4\6\1\u013e\1\6\3\0\1\42\5\6\30\0\1\u013f"+
    "\51\0\1\u0140\54\0\1\u0141\47\0\1\u0142\63\0\1\u0143"+
    "\62\0\1\u0144\32\0\1\u0145\71\0\1\u0146\24\0\1\6"+
    "\6\0\11\6\1\u0147\2\6\2\0\6\6\3\0\1\42"+
    "\5\6\10\0\1\6\6\0\3\6\1\u0148\10\6\2\0"+
    "\6\6\3\0\1\42\5\6\10\0\1\6\6\0\1\6"+
    "\1\u0149\12\6\2\0\6\6\3\0\1\42\5\6\22\0"+
    "\1\u014a\63\0\1\u014b\51\0\1\u014c\44\0\1\u014d\71\0"+
    "\1\u014e\36\0\1\u014f\53\0\1\u0150\41\0\1\6\6\0"+
    "\1\6\1\u0151\12\6\2\0\6\6\3\0\1\42\5\6"+
    "\20\0\1\u0152\56\0\1\u0153\52\0\1\u0154\53\0\1\u0155"+
    "\53\0\1\u0156\54\0\1\u0157\54\0\1\u0158\60\0\1\u0159"+
    "\47\0\1\u015a\46\0\1\u015b\56\0\1\u015c\54\0\1\u015d"+
    "\66\0\1\u015e\35\0\1\u015f\55\0\1\u0160\50\0\1\u0161"+
    "\64\0\1\u0162\61\0\1\u0163\35\0\1\u0164\62\0\1\u0165"+
    "\56\0\1\u0166\50\0\1\u0167\53\0\1\u0168\46\0\1\u0169"+
    "\60\0\1\u016a\56\0\1\u016b\41\0\1\u016c\64\0\1\u016d"+
    "\65\0\1\u016e\37\0\1\u016f\44\0\1\u0170\65\0\1\u0171"+
    "\40\0\1\u0172\100\0\1\u0173\40\0\1\u0174\54\0\1\u0175"+
    "\41\0\1\u0176\42\0\1\u0177\6\0\14\u0177\2\0\6\u0177"+
    "\4\0\5\u0177\20\0\1\u0178\66\0\1\u0179\30\0\1\u0177"+
    "\6\0\14\u0177\2\0\6\u0177\2\0\1\u017a\1\0\5\u0177"+
    "\21\0\1\u017b\65\0\1\u017c\53\0\1\u017d\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14344];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\23\1\1\11\3\1\3\11"+
    "\3\0\2\1\10\0\34\1\2\0\1\1\16\0\34\1"+
    "\21\0\34\1\20\0\30\1\20\0\21\1\3\0\1\11"+
    "\14\0\13\1\1\0\1\11\3\0\2\11\10\0\7\1"+
    "\10\0\1\11\3\0\6\1\1\11\3\0\1\11\4\0"+
    "\1\11\1\0\5\1\4\0\1\11\3\0\3\1\7\0"+
    "\1\1\24\0\1\11\4\0\1\11\5\0\1\11\3\0"+
    "\1\11\3\0\1\11\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[381];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 54: 
          { return new Symbol(sym.DpA,new String(yytext()));
          }
        case 61: break;
        case 60: 
          { return new Symbol(sym.GMC,new String(yytext()));
          }
        case 62: break;
        case 50: 
          { return new Symbol(sym.PrC,new String(yytext()));
          }
        case 63: break;
        case 39: 
          { return new Symbol(sym.verdana,new String(yytext()));
          }
        case 64: break;
        case 16: 
          { return new Symbol(sym.blu,new String(yytext()));
          }
        case 65: break;
        case 56: 
          { return new Symbol(sym.CaA,new String(yytext()));
          }
        case 66: break;
        case 8: 
          { return new Symbol(sym.equal,new String(yytext()));
          }
        case 67: break;
        case 25: 
          { return new Symbol(sym.fondo,new String(yytext()));
          }
        case 68: break;
        case 48: 
          { return new Symbol(sym.tmfont,new String(yytext()));
          }
        case 69: break;
        case 17: 
          { return new Symbol(sym.rossa,new String(yytext()));
          }
        case 70: break;
        case 43: 
          { return new Symbol(sym.FA,new String(yytext()));
          }
        case 71: break;
        case 4: 
          { return new Symbol(sym.letters,new String(yytext()));
          }
        case 72: break;
        case 32: 
          { return new Symbol(sym.font,new String(yytext()));
          }
        case 73: break;
        case 1: 
          { System.out.println("error lexico en "  + yyline + "," + yychar + " No se reconoce " + yytext());
    yychar=0;
          }
        case 74: break;
        case 53: 
          { return new Symbol(sym.colfont,new String(yytext()));
          }
        case 75: break;
        case 11: 
          { return new Symbol(sym.abrv,new String(yytext()));
          }
        case 76: break;
        case 35: 
          { return new Symbol(sym.TaA,new String(yytext()));
          }
        case 77: break;
        case 2: 
          { return new Symbol(sym.numb,new String(yytext()));
          }
        case 78: break;
        case 21: 
          { return new Symbol(sym.mark,new String(yytext()));
          }
        case 79: break;
        case 59: 
          { return new Symbol(sym.LiA,new String(yytext()));
          }
        case 80: break;
        case 20: 
          { return new Symbol(sym.nero,new String(yytext()));
          }
        case 81: break;
        case 5: 
          { return new Symbol(sym.nuborde,new String(yytext()));
          }
        case 82: break;
        case 52: 
          { return new Symbol(sym.coltable,new String(yytext()));
          }
        case 83: break;
        case 51: 
          { return new Symbol(sym.btable,new String(yytext()));
          }
        case 84: break;
        case 14: 
          { return new Symbol(sym.place2,new String(yytext()));
          }
        case 85: break;
        case 13: 
          { return new Symbol(sym.real,new String(yytext()));
          }
        case 86: break;
        case 19: 
          { return new Symbol(sym.hours,new String(yytext()));
          }
        case 87: break;
        case 37: 
          { return new Symbol(sym.celeste,new String(yytext()));
          }
        case 88: break;
        case 34: 
          { return new Symbol(sym.price,new String(yytext()));
          }
        case 89: break;
        case 55: 
          { return new Symbol(sym.DpC,new String(yytext()));
          }
        case 90: break;
        case 24: 
          { return new Symbol(sym.dates,new String(yytext()));
          }
        case 91: break;
        case 38: 
          { return new Symbol(sym.courier,new String(yytext()));
          }
        case 92: break;
        case 23: 
          { return new Symbol(sym.place,new String(yytext()));
          }
        case 93: break;
        case 22: 
          { return new Symbol(sym.arial,new String(yytext()));
          }
        case 94: break;
        case 44: 
          { return new Symbol(sym.trebuchet,new String(yytext()));
          }
        case 95: break;
        case 26: 
          { return new Symbol(sym.colo,new String(yytext()));
          }
        case 96: break;
        case 58: 
          { return new Symbol(sym.GMA,new String(yytext()));
          }
        case 97: break;
        case 12: 
          { return new Symbol(sym.hora2,new String(yytext()));
          }
        case 98: break;
        case 47: 
          { return new Symbol(sym.PrA,new String(yytext()));
          }
        case 99: break;
        case 28: 
          { return new Symbol(sym.names,new String(yytext()));
          }
        case 100: break;
        case 42: 
          { return new Symbol(sym.cant,new String(yytext()));
          }
        case 101: break;
        case 27: 
          { return new Symbol(sym.verde,new String(yytext()));
          }
        case 102: break;
        case 9: 
          { return new Symbol(sym.semi,new String(yytext()));
          }
        case 103: break;
        case 57: 
          { return new Symbol(sym.CaC,new String(yytext()));
          }
        case 104: break;
        case 7: 
          { return new Symbol(sym.Apos,new String(yytext()));
          }
        case 105: break;
        case 49: 
          { return new Symbol(sym.arancione,new String(yytext()));
          }
        case 106: break;
        case 33: 
          { return new Symbol(sym.bianco,new String(yytext()));
          }
        case 107: break;
        case 3: 
          { return new Symbol(sym.dot,new String(yytext()));
          }
        case 108: break;
        case 46: 
          { return new Symbol(sym.FC,new String(yytext()));
          }
        case 109: break;
        case 36: 
          { return new Symbol(sym.georgia,new String(yytext()));
          }
        case 110: break;
        case 15: 
          { return new Symbol(sym.griggio,new String(yytext()));
          }
        case 111: break;
        case 31: 
          { return new Symbol(sym.rosato,new String(yytext()));
          }
        case 112: break;
        case 40: 
          { return new Symbol(sym.TaC,new String(yytext()));
          }
        case 113: break;
        case 18: 
          { return new Symbol(sym.weight,new String(yytext()));
          }
        case 114: break;
        case 10: 
          { yychar=0;
          }
        case 115: break;
        case 29: 
          { return new Symbol(sym.porpora,new String(yytext()));
          }
        case 116: break;
        case 41: 
          { return new Symbol(sym.LiC,new String(yytext()));
          }
        case 117: break;
        case 45: 
          { return new Symbol(sym.dates2,new String(yytext()));
          }
        case 118: break;
        case 6: 
          { 
          }
        case 119: break;
        case 30: 
          { return new Symbol(sym.model,new String(yytext()));
          }
        case 120: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
