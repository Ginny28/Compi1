
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Sep 29 01:50:02 CST 2012
//----------------------------------------------------

import java_cup.runtime.*;
import java.lang.*;
import java.util.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.DefaultComboBoxModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Sep 29 01:50:02 CST 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\111\000\002\002\004\000\002\002\003\000\002\025" +
    "\002\000\002\003\006\000\002\005\004\000\002\004\006" +
    "\000\002\006\005\000\002\026\002\000\002\007\011\000" +
    "\002\010\004\000\002\010\003\000\002\027\002\000\002" +
    "\011\007\000\002\030\002\000\002\011\007\000\002\031" +
    "\002\000\002\011\007\000\002\011\003\000\002\012\004" +
    "\000\002\012\003\000\002\032\002\000\002\013\011\000" +
    "\002\033\002\000\002\013\011\000\002\034\002\000\002" +
    "\013\006\000\002\013\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\015\004\000\002\015\003" +
    "\000\002\035\002\000\002\016\006\000\002\021\010\000" +
    "\002\023\004\000\002\023\003\000\002\024\004\000\002" +
    "\024\003\000\002\036\002\000\002\017\007\000\002\037" +
    "\002\000\002\017\007\000\002\040\002\000\002\017\007" +
    "\000\002\041\002\000\002\017\007\000\002\042\002\000" +
    "\002\017\007\000\002\043\002\000\002\017\007\000\002" +
    "\044\002\000\002\020\007\000\002\045\002\000\002\020" +
    "\007\000\002\046\002\000\002\020\007\000\002\047\002" +
    "\000\002\020\007\000\002\050\002\000\002\020\007\000" +
    "\002\051\002\000\002\020\007\000\002\052\002\000\002" +
    "\020\007\000\002\053\002\000\002\020\007\000\002\054" +
    "\002\000\002\020\007\000\002\055\002\000\002\020\007" +
    "\000\002\022\003\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\004\004\006\001\002\000\004\002\246\001" +
    "\002\000\004\002\000\001\002\000\004\020\uffff\001\002" +
    "\000\004\020\012\001\002\000\004\005\245\001\002\000" +
    "\004\006\047\001\002\000\004\022\014\001\002\000\012" +
    "\003\023\023\025\024\024\025\030\001\002\000\004\047" +
    "\015\001\002\000\004\056\016\001\002\000\004\057\017" +
    "\001\002\000\004\056\ufffa\001\002\000\004\056\021\001" +
    "\002\000\004\060\022\001\002\000\012\003\ufff9\023\ufff9" +
    "\024\ufff9\025\ufff9\001\002\000\014\003\ufff0\021\ufff0\023" +
    "\ufff0\024\ufff0\025\ufff0\001\002\000\004\047\043\001\002" +
    "\000\004\047\037\001\002\000\014\003\ufff7\021\ufff7\023" +
    "\ufff7\024\ufff7\025\ufff7\001\002\000\014\003\023\021\035" +
    "\023\025\024\024\025\030\001\002\000\004\047\031\001" +
    "\002\000\004\052\032\001\002\000\004\060\ufff2\001\002" +
    "\000\004\060\034\001\002\000\014\003\ufff1\021\ufff1\023" +
    "\ufff1\024\ufff1\025\ufff1\001\002\000\004\006\ufffc\001\002" +
    "\000\014\003\ufff8\021\ufff8\023\ufff8\024\ufff8\025\ufff8\001" +
    "\002\000\004\055\040\001\002\000\004\060\ufff6\001\002" +
    "\000\004\060\042\001\002\000\014\003\ufff5\021\ufff5\023" +
    "\ufff5\024\ufff5\025\ufff5\001\002\000\004\051\044\001\002" +
    "\000\004\060\ufff4\001\002\000\004\060\046\001\002\000" +
    "\014\003\ufff3\021\ufff3\023\ufff3\024\ufff3\025\ufff3\001\002" +
    "\000\012\003\053\010\054\026\052\027\055\001\002\000" +
    "\004\005\ufffd\001\002\000\014\003\053\007\243\010\054" +
    "\026\052\027\055\001\002\000\004\061\232\001\002\000" +
    "\014\003\uffe7\007\uffe7\010\uffe7\026\uffe7\027\uffe7\001\002" +
    "\000\004\012\uffe9\001\002\000\004\061\057\001\002\000" +
    "\014\003\uffee\007\uffee\010\uffee\026\uffee\027\uffee\001\002" +
    "\000\004\056\060\001\002\000\004\054\061\001\002\000" +
    "\004\056\uffeb\001\002\000\004\056\063\001\002\000\004" +
    "\060\064\001\002\000\014\003\uffea\007\uffea\010\uffea\026" +
    "\uffea\027\uffea\001\002\000\004\012\067\001\002\000\006" +
    "\011\uffe2\012\uffe2\001\002\000\004\014\uffe1\001\002\000" +
    "\006\011\072\012\067\001\002\000\006\011\uffe3\012\uffe3" +
    "\001\002\000\014\003\uffe8\007\uffe8\010\uffe8\026\uffe8\027" +
    "\uffe8\001\002\000\004\014\075\001\002\000\004\013\231" +
    "\001\002\000\016\030\102\031\076\032\101\033\077\034" +
    "\105\046\104\001\002\000\004\047\225\001\002\000\004" +
    "\047\221\001\002\000\020\015\130\030\102\031\076\032" +
    "\101\033\077\034\105\046\104\001\002\000\004\047\124" +
    "\001\002\000\004\047\120\001\002\000\020\015\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\046\uffdd\001\002" +
    "\000\004\047\114\001\002\000\004\047\106\001\002\000" +
    "\006\050\107\053\110\001\002\000\004\060\uffba\001\002" +
    "\000\004\060\uffb9\001\002\000\004\060\uffd2\001\002\000" +
    "\004\060\113\001\002\000\020\015\uffd1\030\uffd1\031\uffd1" +
    "\032\uffd1\033\uffd1\034\uffd1\046\uffd1\001\002\000\006\050" +
    "\107\053\110\001\002\000\004\060\uffd0\001\002\000\004" +
    "\060\117\001\002\000\020\015\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\033\uffcf\034\uffcf\046\uffcf\001\002\000\006\050\107" +
    "\053\110\001\002\000\004\060\uffda\001\002\000\004\060" +
    "\123\001\002\000\020\015\uffd9\030\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\046\uffd9\001\002\000\006\050\107\053" +
    "\110\001\002\000\004\060\uffd6\001\002\000\004\060\127" +
    "\001\002\000\020\015\uffd5\030\uffd5\031\uffd5\032\uffd5\033" +
    "\uffd5\034\uffd5\046\uffd5\001\002\000\004\016\132\001\002" +
    "\000\020\015\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034" +
    "\uffde\046\uffde\001\002\000\026\035\136\036\141\037\146" +
    "\040\133\041\140\042\145\043\142\044\143\045\134\046" +
    "\144\001\002\000\004\047\215\001\002\000\004\047\211" +
    "\001\002\000\030\017\207\035\136\036\141\037\146\040" +
    "\133\041\140\042\145\043\142\044\143\045\134\046\144" +
    "\001\002\000\004\047\203\001\002\000\030\017\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb" +
    "\044\uffdb\045\uffdb\046\uffdb\001\002\000\004\047\177\001" +
    "\002\000\004\047\173\001\002\000\004\047\167\001\002" +
    "\000\004\047\163\001\002\000\004\047\157\001\002\000" +
    "\004\047\153\001\002\000\004\047\147\001\002\000\006" +
    "\050\107\053\110\001\002\000\004\060\uffca\001\002\000" +
    "\004\060\152\001\002\000\030\017\uffc9\035\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045" +
    "\uffc9\046\uffc9\001\002\000\006\050\107\053\110\001\002" +
    "\000\004\060\uffc4\001\002\000\004\060\156\001\002\000" +
    "\030\017\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3" +
    "\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\001\002\000" +
    "\006\050\107\053\110\001\002\000\004\060\uffbc\001\002" +
    "\000\004\060\162\001\002\000\030\017\uffbb\035\uffbb\036" +
    "\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb" +
    "\045\uffbb\046\uffbb\001\002\000\006\050\107\053\110\001" +
    "\002\000\004\060\uffc0\001\002\000\004\060\166\001\002" +
    "\000\030\017\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041" +
    "\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\001\002" +
    "\000\006\050\107\053\110\001\002\000\004\060\uffc2\001" +
    "\002\000\004\060\172\001\002\000\030\017\uffc1\035\uffc1" +
    "\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044" +
    "\uffc1\045\uffc1\046\uffc1\001\002\000\006\050\107\053\110" +
    "\001\002\000\004\060\uffcc\001\002\000\004\060\176\001" +
    "\002\000\030\017\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\001" +
    "\002\000\006\050\107\053\110\001\002\000\004\060\uffc6" +
    "\001\002\000\004\060\202\001\002\000\030\017\uffc5\035" +
    "\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5" +
    "\044\uffc5\045\uffc5\046\uffc5\001\002\000\006\050\107\053" +
    "\110\001\002\000\004\060\uffce\001\002\000\004\060\206" +
    "\001\002\000\030\017\uffcd\035\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd" +
    "\001\002\000\004\013\uffdf\001\002\000\030\017\uffdc\035" +
    "\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc" +
    "\044\uffdc\045\uffdc\046\uffdc\001\002\000\006\050\107\053" +
    "\110\001\002\000\004\060\uffbe\001\002\000\004\060\214" +
    "\001\002\000\030\017\uffbd\035\uffbd\036\uffbd\037\uffbd\040" +
    "\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd" +
    "\001\002\000\006\050\107\053\110\001\002\000\004\060" +
    "\uffc8\001\002\000\004\060\220\001\002\000\030\017\uffc7" +
    "\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043" +
    "\uffc7\044\uffc7\045\uffc7\046\uffc7\001\002\000\006\050\107" +
    "\053\110\001\002\000\004\060\uffd4\001\002\000\004\060" +
    "\224\001\002\000\020\015\uffd3\030\uffd3\031\uffd3\032\uffd3" +
    "\033\uffd3\034\uffd3\046\uffd3\001\002\000\006\050\107\053" +
    "\110\001\002\000\004\060\uffd8\001\002\000\004\060\230" +
    "\001\002\000\020\015\uffd7\030\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\046\uffd7\001\002\000\006\011\uffe0\012\uffe0" +
    "\001\002\000\004\056\233\001\002\000\010\062\234\063" +
    "\236\064\235\001\002\000\004\056\uffe6\001\002\000\004" +
    "\056\uffe4\001\002\000\004\056\uffe5\001\002\000\004\056" +
    "\uffed\001\002\000\004\056\241\001\002\000\004\060\242" +
    "\001\002\000\014\003\uffec\007\uffec\010\uffec\026\uffec\027" +
    "\uffec\001\002\000\004\005\ufffb\001\002\000\014\003\uffef" +
    "\007\uffef\010\uffef\026\uffef\027\uffef\001\002\000\004\002" +
    "\ufffe\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\006\001\001\000\006" +
    "\004\010\005\007\001\001\000\002\001\001\000\004\006" +
    "\047\001\001\000\004\007\012\001\001\000\006\010\026" +
    "\011\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\050\013\055\001\001" +
    "\000\002\001\001\000\004\013\243\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\067\016\065\001" +
    "\001\000\002\001\001\000\004\035\072\001\001\000\004" +
    "\016\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\073\001\001\000\002\001\001\000\006\017\102" +
    "\023\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\114\001\001\000\004\043\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\120\001" +
    "\001\000\004\036\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\124\001\001\000\004\040\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\136\024\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\147\001\001\000\004\046\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\153\001\001\000\004\051" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\157\001\001\000\004\055\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\163\001\001\000\004" +
    "\053\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\167\001\001\000\004\052\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\173\001\001\000" +
    "\004\045\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\177\001\001\000\004\050\200\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\203\001\001" +
    "\000\004\044\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\211" +
    "\001\001\000\004\054\212\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\215\001\001\000\004\047\216" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\221\001\001\000\004\041\222\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\225\001\001\000\004\037" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\237\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public static void main(String args[]) throws Exception {

// La clase Yylex es creada por el analizador léxico

new parser(new Yylex(System.in)).parse();
}

public void syntax_error(Symbol s){ 
        System.out.println("Error en la Línea " + (s.right+1) +" Columna "+s.left+ ". Identificador " 
+s.value  ); 
}
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " + 
s.value + " no reconocido."); 
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


public static JLabel jLabel1;
public static JLabel jLabel2;
public static JLabel jLabel3;
public static JLabel jLabel4;
public static JPanel panelito;
public static JComboBox combito;
public static JTable tablita;
public static ArrayList sumita = new ArrayList();
public static ArrayList anitos = new ArrayList();
public static ArrayList valis = new ArrayList();
public static double totaling= 0;
public static double totalgastos= 0;
public static double total= 0;
public static String va="";
public static String tipo="";
public static String mone ="";
public static String anito ="";

public static void buskr(JTable tables,String value)
{
Object Datos[][]={};
String nombresitos[]={"Mes","Ingresos","Gastos","Total"};
DefaultTableModel modelo = new DefaultTableModel(Datos,nombresitos);

for(int r=0; r<sumita.size();r++)
{
if(value.equals(sumita.get(r)))
{
for(int h=r+1;h<sumita.size();h++)
{
  if (sumita.get(h).equals("finish"))
  {
  
  break;
  }
 // Object Fila[]={sumita.get(h),sumita.get(h+1),sumita.get(h+2),sumita.get(h+3)};
   // modelo.addRow ( Fila );
 else
  {
  if (sumita.get(h).equals("01"))
    {
      String mess="Enero";
   
    for(int w=h+1;w<sumita.size();w++)
    {
      if (sumita.get(w).equals("end"))
      {
	break;
      }
      else
      {
      valis.add(sumita.get(w));
      }
      
    }
    Object Fila[]={mess,valis.get(0),valis.get(1),valis.get(2)};
    modelo.addRow ( Fila );
    valis.clear();

    }
  else if (sumita.get(h).equals("02"))
  {
   String mess="Febrero";
    
    for(int w=h+1;w<sumita.size();w++)
    {
      if (sumita.get(w).equals("end"))
      {
	break;
      }
      else
      {
      valis.add(sumita.get(w));
      }
      
    }
    Object Fila[]={mess,valis.get(0),valis.get(1),valis.get(2)};
    modelo.addRow ( Fila );
    valis.clear();
  }
  else if (sumita.get(h).equals("03"))
  {
    String mess="Marzo";
    
    for(int w=h+1;w<sumita.size();w++)
    {
      if (sumita.get(w).equals("end"))
      {
	break;
      }
      else
      {
      valis.add(sumita.get(w));
      }
      
    }
    Object Fila[]={mess,valis.get(0),valis.get(1),valis.get(2)};
    modelo.addRow ( Fila );
    valis.clear();
  }
  else if (sumita.get(h).equals("04"))
  {
    String mess="Abril";
    
    for(int w=h+1;w<sumita.size();w++)
    {
      if (sumita.get(w).equals("end"))
      {
	break;
      }
      else
      {
      valis.add(sumita.get(w));
      }
      
    }
    Object Fila[]={mess,valis.get(0),valis.get(1),valis.get(2)};
    modelo.addRow ( Fila );
    valis.clear();
  }
  else  if (sumita.get(h).equals("05"))
  {
    String mess="Mayo";
    
    for(int w=h+1;w<sumita.size();w++)
    {
      if (sumita.get(w).equals("end"))
      {
	break;
      }
      else
      {
      valis.add(sumita.get(w));
      }
      
    }
    Object Fila[]={mess,valis.get(0),valis.get(1),valis.get(2)};
    modelo.addRow ( Fila );
    valis.clear();
    
  }
  else if (sumita.get(h).equals("06"))
  {
   String mess="Junio";
    
    for(int w=h+1;w<sumita.size();w++)
    {
      if (sumita.get(w).equals("end"))
      {
	break;
      }
      else
      {
      valis.add(sumita.get(w));
      }
      
    }
    Object Fila[]={mess,valis.get(0),valis.get(1),valis.get(2)};
    modelo.addRow ( Fila );
    valis.clear();
  }
  else if (sumita.get(h).equals("07"))
  {
    String mess="Julio";
    
    for(int w=h+1;w<sumita.size();w++)
    {
      if (sumita.get(w).equals("end"))
      {
	break;
      }
      else
      {
      valis.add(sumita.get(w));
      }
      
    }
    Object Fila[]={mess,valis.get(0),valis.get(1),valis.get(2)};
    modelo.addRow ( Fila );
    valis.clear();
  }
  else if (sumita.get(h).equals("08"))
  {
    String mess="Agosto";
    
    for(int w=h+1;w<sumita.size();w++)
    {
      if (sumita.get(w).equals("end"))
      {
	break;
      }
      else
      {
      valis.add(sumita.get(w));
      }
      
    }
    Object Fila[]={mess,valis.get(0),valis.get(1),valis.get(2)};
    modelo.addRow ( Fila );
    valis.clear();
  }
  else if (sumita.get(h).equals("09"))
  {
    String mess="Septiembre";
    
    for(int w=h+1;w<sumita.size();w++)
    {
      if (sumita.get(w).equals("end"))
      {
	break;
      }
      else
      {
      valis.add(sumita.get(w));
      }
      
    }
    Object Fila[]={mess,valis.get(0),valis.get(1),valis.get(2)};
    modelo.addRow ( Fila );
    valis.clear();
  }
  else if (sumita.get(h).equals("10"))
  {
    String mess="Octubre";
    
    for(int w=h+1;w<sumita.size();w++)
    {
      if (sumita.get(w).equals("end"))
      {
	break;
      }
      else
      {
      valis.add(sumita.get(w));
      }
      
    }
    Object Fila[]={mess,valis.get(0),valis.get(1),valis.get(2)};
    modelo.addRow ( Fila );
    valis.clear();
  }
  else if (sumita.get(h).equals("11"))
  {
    String mess="Noviembre";
    
    for(int w=h+1;w<sumita.size();w++)
    {
      if (sumita.get(w).equals("end"))
      {
	break;
      }
      else
      {
      valis.add(sumita.get(w));
      }
      
    }
    Object Fila[]={mess,valis.get(0),valis.get(1),valis.get(2)};
    modelo.addRow ( Fila );
    valis.clear();
    
  }
  else if (sumita.get(h).equals("12"))
  {
    String mess="Diciembre";
    
    for(int w=h+1;w<sumita.size();w++)
    {
      if (sumita.get(w).equals("end"))
      {
	break;
      }
      else
      {
      valis.add(sumita.get(w));
      }
      
    }
    Object Fila[]={mess,valis.get(0),valis.get(1),valis.get(2)};
    modelo.addRow (Fila);
    valis.clear();
  //  System.out.println(mess+"-"+valis.get(0)+"-"+valis.get(1)+"-"+valis.get(2));
    
  }
  
}
tables.setModel(modelo);
}

}

}

}

public static void Graphicss(String anio)
{
anito=combito.getSelectedItem().toString();
if(tipo.equalsIgnoreCase("Circulo"))
{
 DefaultPieDataset dataset = new DefaultPieDataset(); 
 for(int i = 0; i < tablita.getRowCount(); i++){
       dataset.setValue(tablita.getValueAt(i,0).toString(), Double.parseDouble(tablita.getValueAt(i,3).toString())); }
        JFreeChart grafica = ChartFactory.createPieChart3D(anito+"("+mone+")",dataset,true,true,false); 
        ArrayList values = new ArrayList();
       Title subs = new TextTitle(jLabel1.getText()+"\n"+jLabel2.getText()+"\n"+jLabel3.getText()+"\n"+jLabel4.getText());
       values.add(subs);
       grafica.setSubtitles(values);
        ChartFrame frame = new ChartFrame("Grafico!", grafica);
        frame.pack(); 
	frame.setVisible(true);
       
}
else if (tipo.equalsIgnoreCase("Barras"))
{
DefaultCategoryDataset dataset = new DefaultCategoryDataset(); 
for(int i = 0; i < tablita.getRowCount(); i++){
       dataset.setValue(Double.parseDouble(tablita.getValueAt(i,1).toString()),"Ingresos",tablita.getValueAt(i,0).toString());
       dataset.setValue(Double.parseDouble(tablita.getValueAt(i,2).toString()),"Gastos",tablita.getValueAt(i,0).toString()); }
       JFreeChart grafica = ChartFactory.createBarChart(anito+"("+mone+")","Mes","Totales",dataset,PlotOrientation.VERTICAL,true,true,false); 
       ArrayList values = new ArrayList();
       Title subs = new TextTitle(jLabel1.getText()+"\n"+jLabel2.getText()+"\n"+jLabel3.getText()+"\n"+jLabel4.getText());
       values.add(subs);
       ChartFrame frame = new ChartFrame("Grafico!", grafica);
       frame.pack(); 
       frame.setVisible(true);
       grafica.setSubtitles(values);
       
}
else if (tipo.equalsIgnoreCase("Lineas"))
{
DefaultCategoryDataset dataset = new DefaultCategoryDataset(); 
for(int i = 0; i < tablita.getRowCount(); i++){
       dataset.setValue(Double.parseDouble(tablita.getValueAt(i,1).toString()),"Ingresos",tablita.getValueAt(i,0).toString());
       dataset.setValue(Double.parseDouble(tablita.getValueAt(i,2).toString()),"Gastos",tablita.getValueAt(i,0).toString()); }
       JFreeChart grafica = ChartFactory.createLineChart(anito+"("+mone+")","Mes","Totales",dataset,PlotOrientation.VERTICAL,true,true,false); 
       ArrayList values = new ArrayList();
       Title subs = new TextTitle(jLabel1.getText()+"\n"+jLabel2.getText()+"\n"+jLabel3.getText()+"\n"+jLabel4.getText());
       values.add(subs);
       ChartFrame frame = new ChartFrame("Grafico!", grafica);
       frame.pack(); 
       frame.setVisible(true);
       grafica.setSubtitles(values);
         
}
else
{
DefaultCategoryDataset dataset = new DefaultCategoryDataset(); 
for(int i = 0; i < tablita.getRowCount(); i++){
       dataset.setValue(Double.parseDouble(tablita.getValueAt(i,1).toString()),"Ingresos",tablita.getValueAt(i,0).toString());
       dataset.setValue(Double.parseDouble(tablita.getValueAt(i,2).toString()),"Gastos",tablita.getValueAt(i,0).toString()); 
       }
       JFreeChart grafica = ChartFactory.createBarChart(anito+"("+mone+")","Mes","Totales",dataset,PlotOrientation.VERTICAL,true,true,false); 
       ArrayList values = new ArrayList();
       Title subs = new TextTitle(jLabel1.getText()+"\n"+jLabel2.getText()+"\n"+jLabel3.getText()+"\n"+jLabel4.getText());
       values.add(subs);
       ChartFrame frame = new ChartFrame("Grafico!", grafica);
       frame.pack(); 
       frame.setVisible(true);
       grafica.setSubtitles(values);
       
}


}

void toti()
{
total = totaling +totalgastos;

}

void sumitaing(double valor)
{

totaling += valor;
}
 
void sumitgast(double valor)
{
totalgastos += valor;
}

void ynarcombo(JComboBox combi)
{
DefaultComboBoxModel model = new DefaultComboBoxModel();
for(int p=0; p<anitos.size();p++){
  model.addElement(anitos.get(p));

}
 anitos.clear();
 combi.setModel(model);
 }
 

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Bnumbers ::= Real 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bnumbers",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Bnumbers ::= Numb 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bnumbers",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Bgastos ::= Otr Equal Bnumbers NT$24 Semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String numis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bgastos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$24 ::= 
            {
              Object RESULT =null;
		int numisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numisright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String numis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
sumitgast(Double.parseDouble(numis));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Bgastos ::= Tax Equal Bnumbers NT$23 Semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String numis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bgastos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$23 ::= 
            {
              Object RESULT =null;
		int numisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numisright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String numis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
sumitgast(Double.parseDouble(numis));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Bgastos ::= PP Equal Bnumbers NT$22 Semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String numis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bgastos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$22 ::= 
            {
              Object RESULT =null;
		int numisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numisright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String numis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
sumitgast(Double.parseDouble(numis));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Bgastos ::= Gas Equal Bnumbers NT$21 Semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String numis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bgastos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$21 ::= 
            {
              Object RESULT =null;
		int numisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numisright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String numis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
sumitgast(Double.parseDouble(numis));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Bgastos ::= Insurance Equal Bnumbers NT$20 Semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String numis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bgastos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$20 ::= 
            {
              Object RESULT =null;
		int numisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numisright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String numis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
sumitgast(Double.parseDouble(numis));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Bgastos ::= Security Equal Bnumbers NT$19 Semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String numis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bgastos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$19 ::= 
            {
              Object RESULT =null;
		int numisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numisright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String numis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
sumitgast(Double.parseDouble(numis));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Bgastos ::= Salary Equal Bnumbers NT$18 Semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String numis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bgastos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$18 ::= 
            {
              Object RESULT =null;
		int numisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numisright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String numis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
sumitgast(Double.parseDouble(numis));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Bgastos ::= AP Equal Bnumbers NT$17 Semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String numis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bgastos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$17 ::= 
            {
              Object RESULT =null;
		int numisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numisright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String numis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
sumitgast(Double.parseDouble(numis));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Bgastos ::= LE Equal Bnumbers NT$16 Semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String numis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bgastos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$16 ::= 
            {
              Object RESULT =null;
		int numisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numisright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String numis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
sumitgast(Double.parseDouble(numis));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Bgastos ::= Rental Equal Bnumbers NT$15 Semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String numis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bgastos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$15 ::= 
            {
              Object RESULT =null;
		int numisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numisright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String numis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
sumitgast(Double.parseDouble(numis));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Bingresos ::= Otr Equal Bnumbers NT$14 Semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String numis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bingresos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$14 ::= 
            {
              Object RESULT =null;
		int numisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numisright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String numis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
sumitaing(Double.parseDouble(numis));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Bingresos ::= Borr Equal Bnumbers NT$13 Semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String numis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bingresos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$13 ::= 
            {
              Object RESULT =null;
		int numisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numisright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String numis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
sumitaing(Double.parseDouble(numis));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Bingresos ::= AlqC Equal Bnumbers NT$12 Semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String numis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bingresos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$12 ::= 
            {
              Object RESULT =null;
		int numisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numisright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String numis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
sumitaing(Double.parseDouble(numis));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Bingresos ::= Banc Equal Bnumbers NT$11 Semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String numis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bingresos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$11 ::= 
            {
              Object RESULT =null;
		int numisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numisright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String numis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
sumitaing(Double.parseDouble(numis));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Bingresos ::= Kja Equal Bnumbers NT$10 Semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String numis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bingresos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$10 ::= 
            {
              Object RESULT =null;
		int numisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numisright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String numis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
sumitaing(Double.parseDouble(numis));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Bingresos ::= Vnta Equal Bnumbers NT$9 Semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String numis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bingresos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$9 ::= 
            {
              Object RESULT =null;
		int numisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numisright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String numis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
sumitaing(Double.parseDouble(numis));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Bgast ::= Bgastos 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bgast",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Bgast ::= Bgast Bgastos 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bgast",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Bing ::= Bingresos 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bing",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Bing ::= Bing Bingresos 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bing",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Bade ::= IngA Bing IngC GstA Bgast GstC 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bade",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Bmes ::= MeA NT$8 Bade MeC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String mes = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sumita.add(totaling);sumita.add(totalgastos);sumita.add(totaling+totalgastos);sumita.add("end");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bmes",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$8 ::= 
            {
              Object RESULT =null;
		int mesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String mes = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
va=mes.substring(5,7);sumita.add(va);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Bme ::= Bmes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bme",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Bme ::= Bme Bmes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bme",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Bgr ::= Li 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bgr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Bgr ::= Cir 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bgr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Bgr ::= Ba 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bgr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BM ::= error 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BM",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BM ::= AnA NT$7 Bme AnC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int anileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ani = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sumita.add("finish");totaling=0;totalgastos=0;total=0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BM",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$7 ::= 
            {
              Object RESULT =null;
		int anileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aniright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ani = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
anitos.add(ani);sumita.add(ani);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BM ::= Monetta Duep Apos MoneS NT$6 Apos Semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BM",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$6 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
mone=m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BM ::= Graph Duep Apos Bgr NT$5 Apos Semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int graleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int graright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object gra = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BM",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$5 ::= 
            {
              Object RESULT =null;
		int graleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int graright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object gra = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
tipo=gra.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BMA ::= BM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BMA",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BMA ::= BMA BM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BMA",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BU3 ::= error 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BU3",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BU3 ::= Hora Equal Hour NT$4 Semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String H = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BU3",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$4 ::= 
            {
              Object RESULT =null;
		int Hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String H = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 jLabel4.setText("Hora:" +H);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BU3 ::= Da Equal Date NT$3 Semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Datleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Datright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String Dat = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BU3",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$3 ::= 
            {
              Object RESULT =null;
		int Datleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Datright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String Dat = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 jLabel3.setText("Fecha:"+ Dat);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BU3 ::= Plac Equal Luga NT$2 Semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Lugleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Lugright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String Lug = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BU3",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Object RESULT =null;
		int Lugleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Lugright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String Lug = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 jLabel2.setText("Lugar:" +Lug);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BU2 ::= BU3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BU2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BU2 ::= BU2 BU3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BU2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BU ::= Nu Equal Apos Let NT$1 Apos Semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String Nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BU",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              Object RESULT =null;
		int Nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String Nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 jLabel1.setText("Usuario:" +Nom);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BMT ::= MoA BMA MoC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BMT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BDU ::= DuA BU BU2 DuC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BDU",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BTA ::= BDU BMT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BTA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Bp ::= TeA NT$0 BTA TeC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ynarcombo(combito);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
anitos.add("Seleccione anio");sumita.clear();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // lenguaje ::= Bp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lenguaje",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= lenguaje EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

