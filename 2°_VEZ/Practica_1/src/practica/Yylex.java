/* The following code was generated by JFlex 1.4.3 on 3/8/13 7:01 PM */

package practica;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import javax.swing.JTextPane;
import java.awt.Color;
import javax.swing.text.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/8/13 7:01 PM from the specification file
 * <tt>l.jlex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int caden = 6;
  public static final int COMENTARIO = 2;
  public static final int coment2 = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\43\1\32\2\0\1\43\22\0\1\43\1\0\1\42\4\0"+
    "\1\42\1\34\1\35\1\31\1\33\1\41\1\1\1\6\1\30\1\2"+
    "\1\2\1\2\1\2\1\2\1\2\4\2\1\40\1\37\1\4\1\36"+
    "\1\5\2\0\1\17\1\14\1\11\1\14\1\22\1\13\1\23\1\27"+
    "\1\7\2\14\1\26\1\14\1\10\1\12\1\25\1\14\1\20\1\24"+
    "\1\21\1\14\1\16\4\14\4\3\1\15\1\3\1\17\1\14\1\11"+
    "\1\14\1\22\1\13\1\23\1\27\1\7\2\14\1\26\1\14\1\10"+
    "\1\12\1\25\1\14\1\20\1\24\1\21\1\14\1\16\4\14\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\1\11\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\2\24\1\1\2\25"+
    "\1\26\1\25\4\0\11\5\1\27\1\30\1\31\2\0"+
    "\1\32\2\0\4\5\1\33\3\5\2\0\1\5\1\34"+
    "\5\5\1\0\1\35\2\5\1\36\2\5\1\37\1\0"+
    "\3\5\1\40\1\0\1\41\2\5\1\42\1\5\1\43"+
    "\1\44";

  private static int [] zzUnpackAction() {
    int [] result = new int[98];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\264\0\330\0\374"+
    "\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0\0\u01d4\0\u01f8\0\u021c"+
    "\0\u0240\0\u0264\0\u0288\0\220\0\220\0\220\0\220\0\220"+
    "\0\220\0\220\0\220\0\220\0\220\0\u02ac\0\220\0\220"+
    "\0\220\0\u02d0\0\u02f4\0\u02f4\0\u0318\0\220\0\220\0\u033c"+
    "\0\u0360\0\u0384\0\u03a8\0\u03cc\0\u03f0\0\u0414\0\u0438\0\u045c"+
    "\0\u0480\0\u04a4\0\u04c8\0\u04ec\0\220\0\220\0\220\0\u0510"+
    "\0\u0534\0\u0534\0\u0558\0\u057c\0\u05a0\0\u05c4\0\u05e8\0\u060c"+
    "\0\u0168\0\u0630\0\u0654\0\u0678\0\u069c\0\u06c0\0\u06e4\0\u0168"+
    "\0\u0708\0\u072c\0\u0750\0\u0774\0\u0798\0\u07bc\0\220\0\u07e0"+
    "\0\u0804\0\u0168\0\u0828\0\u084c\0\u0168\0\u0870\0\u0894\0\u08b8"+
    "\0\u08dc\0\u0168\0\u0900\0\u0168\0\u0924\0\u0948\0\220\0\u096c"+
    "\0\u0168\0\u0168";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[98];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\2\5\1\12\1\13"+
    "\1\14\1\15\1\16\1\13\1\10\1\17\4\13\1\20"+
    "\1\21\1\22\2\13\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\32\37"+
    "\1\40\11\37\30\41\1\5\1\42\12\41\1\5\1\43"+
    "\1\44\1\45\3\5\21\45\2\5\1\0\7\5\1\46"+
    "\1\47\45\0\1\50\1\7\43\0\1\7\3\0\1\51"+
    "\40\0\1\10\3\0\21\10\23\0\1\52\3\0\1\53"+
    "\32\0\1\54\1\10\3\0\1\13\1\55\17\13\16\0"+
    "\1\54\1\10\3\0\21\13\16\0\1\54\1\10\3\0"+
    "\20\13\1\56\16\0\1\54\1\10\3\0\16\13\1\57"+
    "\2\13\16\0\1\54\1\10\3\0\17\13\1\60\1\13"+
    "\16\0\1\54\1\10\3\0\10\13\1\61\10\13\16\0"+
    "\1\54\1\10\3\0\11\13\1\62\7\13\16\0\1\54"+
    "\1\10\3\0\12\13\1\63\6\13\16\0\1\54\1\10"+
    "\3\0\11\13\1\64\7\13\44\0\1\65\1\66\55\0"+
    "\1\36\30\0\1\67\15\0\1\44\44\0\1\45\3\0"+
    "\21\45\16\0\1\70\42\0\1\71\1\72\51\0\1\73"+
    "\42\0\1\74\36\0\1\54\4\0\21\54\16\0\1\54"+
    "\1\10\3\0\12\13\1\75\6\13\16\0\1\54\1\10"+
    "\3\0\10\13\1\76\10\13\16\0\1\54\1\10\3\0"+
    "\13\13\1\77\5\13\16\0\1\54\1\10\3\0\3\13"+
    "\1\100\15\13\16\0\1\54\1\10\3\0\11\13\1\101"+
    "\7\13\16\0\1\54\1\10\3\0\10\13\1\102\10\13"+
    "\16\0\1\54\1\10\3\0\11\13\1\103\7\13\16\0"+
    "\1\54\1\10\3\0\1\104\20\13\16\0\1\70\3\0"+
    "\1\51\37\0\1\72\50\0\1\105\44\0\1\106\35\0"+
    "\1\54\1\10\3\0\13\13\1\107\5\13\16\0\1\54"+
    "\1\10\3\0\11\13\1\110\7\13\16\0\1\54\1\10"+
    "\3\0\11\13\1\111\7\13\16\0\1\54\1\10\3\0"+
    "\10\13\1\112\10\13\16\0\1\54\1\10\3\0\4\13"+
    "\1\113\14\13\16\0\1\54\1\10\3\0\1\114\20\13"+
    "\16\0\1\54\1\10\3\0\1\13\1\115\17\13\25\0"+
    "\1\116\37\0\1\117\40\0\1\54\1\10\3\0\14\13"+
    "\1\120\4\13\16\0\1\54\1\10\3\0\10\13\1\121"+
    "\10\13\16\0\1\54\1\10\3\0\12\13\1\122\6\13"+
    "\16\0\1\54\1\10\3\0\1\123\20\13\16\0\1\54"+
    "\1\10\3\0\1\13\1\124\17\13\16\0\1\54\1\10"+
    "\3\0\12\13\1\125\6\13\23\0\1\126\36\0\1\54"+
    "\1\10\3\0\13\13\1\127\5\13\16\0\1\54\1\10"+
    "\3\0\2\13\1\130\16\13\16\0\1\54\1\10\3\0"+
    "\2\13\1\131\16\13\16\0\1\54\1\10\3\0\14\13"+
    "\1\132\4\13\26\0\1\133\33\0\1\54\1\10\3\0"+
    "\11\13\1\134\7\13\16\0\1\54\1\10\3\0\1\135"+
    "\20\13\16\0\1\54\1\10\3\0\10\13\1\136\10\13"+
    "\21\0\1\137\40\0\1\54\1\10\3\0\3\13\1\140"+
    "\15\13\16\0\1\54\1\10\3\0\11\13\1\141\7\13"+
    "\16\0\1\54\1\10\3\0\1\13\1\142\17\13\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2448];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\16\1\12\11\1\1\3\11\4\1\2\11"+
    "\4\0\11\1\3\11\2\0\1\1\2\0\10\1\2\0"+
    "\7\1\1\0\1\11\6\1\1\0\4\1\1\0\3\1"+
    "\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[98];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
ArrayList list1= new ArrayList();
ArrayList list2 = new ArrayList();
ArrayList list3 = new ArrayList();
ArrayList all = new ArrayList();
public String nome;
public JTextPane pane1;


public void painting(String dato , String color)
{

StyledDocument doc = (StyledDocument)pane1.getDocument();
Style style = doc.addStyle("StyleName", null);

  if(color.equalsIgnoreCase("verde")){
    try {
      StyleConstants.setForeground(style,new java.awt.Color(60,179, 113));
      doc.insertString(doc.getLength(),dato, style);
    }catch (Exception ex) {
    }    
  }else if(color.equalsIgnoreCase("azul")){
    try {
      StyleConstants.setForeground(style, new java.awt.Color(52,97, 184));
      doc.insertString(doc.getLength(),dato, style);
    }catch (Exception ex){
    }
  }else if(color.equalsIgnoreCase("rosa")){
    try{
      StyleConstants.setForeground(style, Color.PINK);
      doc.insertString(doc.getLength(),dato, style);
    }catch (Exception ex){
    }
  }else if(color.equalsIgnoreCase("naranja")){
    try {
      StyleConstants.setForeground(style, new java.awt.Color(243,78,12));
      doc.insertString(doc.getLength(),dato, style);
    }catch (Exception ex){
    }  
  }else if(color.equalsIgnoreCase("amarillo")){
    try {
      StyleConstants.setForeground(style, new java.awt.Color(99,52,45) );
      doc.insertString(doc.getLength(),dato, style);
    }catch (Exception ex){
    }
  }else if(color.equalsIgnoreCase("cafe")){
    try {
      StyleConstants.setForeground(style, new Color(150,75,0));
      doc.insertString(doc.getLength(),dato, style);
    }catch (Exception ex){
    }  
  }else if(color.equalsIgnoreCase("gris")){
   try {
      StyleConstants.setForeground(style, Color.darkGray);
      doc.insertString(doc.getLength(),dato, style);
    }catch (Exception ex){
    }
  }else if(color.equalsIgnoreCase("rojo")){
   try {
      StyleConstants.setForeground(style, Color.RED);
      doc.insertString(doc.getLength(),dato, style);
    }catch (Exception ex){
    }
  }else if(color.equalsIgnoreCase("morado")){
   try {
      StyleConstants.setForeground(style,new java.awt.Color(138,74, 160));
      doc.insertString(doc.getLength(),dato, style);
    }catch (Exception ex){
    }
  }else if(color.equalsIgnoreCase("blanco")){
   try {
      StyleConstants.setForeground(style, Color.WHITE);
      doc.insertString(doc.getLength(),dato, style);
    }catch (Exception ex){
    }
  }else{
     try {
      StyleConstants.setForeground(style, Color.BLACK);
      doc.insertString(doc.getLength(),dato, style);
    }catch (Exception ex){
    }
  }
}




public void mistakes()
{
String Reporte= "Errores_Archivo.html";
FileWriter fw = null;
try {
fw = new FileWriter(Reporte);
BufferedWriter bw = new BufferedWriter(fw);
PrintWriter salArch = new PrintWriter(bw);
salArch.println();

//aqui empezas a escribir el html
salArch.print("<html>");
salArch.print("<body>");
salArch.print("<br>");
salArch.print("<br>");
salArch.print("<h1><align='center'>Errores_Lexicos</align></h1>");
salArch.print("<p>Nombre Archivo:"+nome+"</p>");
//definis tu tabla con cada una de las columnas
salArch.print("<table width='200' border='1'><tr><th scope='col'>Error</th><th scope='col'>Linea</th><th scope='col'>Poscion</th></tr>");

//errores,alinea,posicion  son un arrayList del mismo tamano
        for (int i = 0; i<list1.size(); i++){
            salArch.print("<tr><td>"+list3.get(i)+"</td><td>"+list1.get(i)+"</td><td>"+list2.get(i)+"</td></tr>");


     }
salArch.println("</table><p>&nbsp;</p><p>&nbsp;</p></body></html>");
salArch.close();
                }
                catch (IOException ex) {
}

}




public  static int cvar,cint,cstr,cflt,cchr,cprint,cnum,cnd,cbgn,creal,cgra,cop,cid,cmas,cmens,cpor,cdiv,cpa,cpc,cigual,cpyc,ccoma,cdpts,ccad,ccom1,ccom2;
public  String  ca,co1,co2;



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
  
cvar=0;
cint=0;
cstr= 0;

cprint= 0;
cnum= 0;
cnd= 0;
cbgn= 0;
creal= 0;
cid= 0;

cmas= 0;
cmens= 0;
cpor= 0;
cdiv= 0;
cpa= 0;
cpc= 0;
cigual= 0;

ccad= 0;
ccom1= 0;
ccom2=0;
cflt=0;
cchr=0;
cop=0;
cgra=0;

ccoma=0;
cdpts=0;
cpyc=0;
ca="";
co1="";
co2="";

    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11: 
          { cpc++;painting(yytext(),"morado");return new Symbol(sym.paC);
          }
        case 37: break;
        case 36: 
          { cop++;painting(yytext(),"azul");return new Symbol(sym.ops);
          }
        case 38: break;
        case 9: 
          { cmas++;painting(yytext(),"morado");return new Symbol(sym.mas);
          }
        case 39: break;
        case 35: 
          { cgra++;painting(yytext(),"azul");return new Symbol(sym.graph);
          }
        case 40: break;
        case 3: 
          { cnum++;painting(yytext(),"naranja");return new Symbol(sym.numero,new Float(yytext()));
          }
        case 41: break;
        case 12: 
          { cigual++;painting(yytext(),"morado");return new Symbol(sym.igual);
          }
        case 42: break;
        case 8: 
          { yychar=0;painting(yytext(),"blanco");
          }
        case 43: break;
        case 26: 
          { creal++;painting(yytext(),"amarillo");return new Symbol(sym.real,new Float(yytext()));
          }
        case 44: break;
        case 10: 
          { cpa++;painting(yytext(),"morado");return new Symbol(sym.paA);
          }
        case 45: break;
        case 14: 
          { cdpts++;painting(yytext(),"morado");return new Symbol(sym.dpontos,new String(yytext()));
          }
        case 46: break;
        case 30: 
          { cflt++;painting(yytext(),"azul");return new Symbol(sym.flt);
          }
        case 47: break;
        case 13: 
          { cpyc++;painting(yytext(),"morado");return new Symbol(sym.pyc);
          }
        case 48: break;
        case 18: 
          { co1+=yytext();
          }
        case 49: break;
        case 6: 
          { cdiv++;painting(yytext(),"morado");return new Symbol(sym.div);
          }
        case 50: break;
        case 33: 
          { cint++;painting(yytext(),"azul"); return new Symbol(sym.ints);
          }
        case 51: break;
        case 5: 
          { cid++;painting(yytext(),"rosa");  return new Symbol(sym.id,new String(yytext()));
          }
        case 52: break;
        case 1: 
          { list1.add(yyline+1);
    list2.add(yychar);
    list3.add(yytext());
     System.out.println("error lexico en "  + (yyline+1) + "," + (yychar+1) + " No se reconoce " + yytext());
    painting(yytext(),"rojo");
    mistakes();
    yychar=0;
          }
        case 53: break;
        case 25: 
          { yybegin(YYINITIAL); yychar=0; co2+=yytext();painting(co2,"gris");return new Symbol(sym.comentario2);
          }
        case 54: break;
        case 21: 
          { ca+=yytext();
          }
        case 55: break;
        case 23: 
          { yybegin(COMENTARIO); ccom1++;co1="";co1+=yytext();
          }
        case 56: break;
        case 24: 
          { yybegin(coment2); ccom2++; co2="";co2+=yytext();
          }
        case 57: break;
        case 27: 
          { cvar++; painting(yytext(),"azul"); return new Symbol(sym.var);
          }
        case 58: break;
        case 22: 
          { yybegin(YYINITIAL); yychar=0; ca+=yytext();painting(ca,"cafe"); return new Symbol(sym.cads,new String(ca));
          }
        case 59: break;
        case 32: 
          { cstr++; painting(yytext(),"azul");return new Symbol(sym.str);
          }
        case 60: break;
        case 15: 
          { ccoma++;painting(yytext(),"morado");return new Symbol(sym.coma);
          }
        case 61: break;
        case 17: 
          { painting(yytext(),"blanco");
          }
        case 62: break;
        case 4: 
          { return new Symbol(sym.letra);
          }
        case 63: break;
        case 19: 
          { yybegin(YYINITIAL); yychar=0;co1+=yytext();painting(co1,"gris"); return new Symbol(sym.comentario1);
          }
        case 64: break;
        case 34: 
          { cbgn++; painting(yytext(),"verde");return new Symbol(sym.bgn);
          }
        case 65: break;
        case 2: 
          { cmens++;painting(yytext(),"morado");return new Symbol(sym.menos);
          }
        case 66: break;
        case 16: 
          { yybegin(caden); ccad++; ca=""; ca+=yytext();
          }
        case 67: break;
        case 28: 
          { cchr++;painting(yytext(),"azul");return new Symbol(sym.chr);
          }
        case 68: break;
        case 29: 
          { cnd++; painting(yytext(),"verde");return new Symbol(sym.end);
          }
        case 69: break;
        case 31: 
          { cprint++;painting(yytext(),"azul");return new Symbol(sym.prnt);
          }
        case 70: break;
        case 20: 
          { co2+=yytext();
          }
        case 71: break;
        case 7: 
          { cpor++;painting(yytext(),"morado");return new Symbol(sym.por);
          }
        case 72: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
