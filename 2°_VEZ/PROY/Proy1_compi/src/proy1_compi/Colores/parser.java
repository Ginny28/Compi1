
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Apr 15 20:39:12 CST 2013
//----------------------------------------------------

package proy1_compi.Colores;

import java.awt.Color;
import java_cup.runtime.*;
import java.lang.*;
import java.util.*;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Apr 15 20:39:12 CST 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\027\000\002\002\004\000\002\011\002\000\002\010" +
    "\012\000\002\002\004\000\002\002\003\000\002\012\002" +
    "\000\002\003\010\000\002\003\003\000\002\003\003\000" +
    "\002\004\004\000\002\004\003\000\002\013\002\000\002" +
    "\014\002\000\002\005\011\000\002\005\003\000\002\005" +
    "\003\000\002\006\004\000\002\006\003\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\004\014\005\001\002\000\004\002\061\001" +
    "\002\000\004\004\006\001\002\000\004\016\000\001\002" +
    "\000\004\016\010\001\002\000\004\014\011\001\002\000" +
    "\010\003\012\011\013\017\015\001\002\000\012\003\ufff9" +
    "\011\ufff9\015\ufff9\017\ufff9\001\002\000\004\016\ufffc\001" +
    "\002\000\012\003\ufffd\011\ufffd\015\ufffd\017\ufffd\001\002" +
    "\000\012\003\ufffa\011\ufffa\015\ufffa\017\ufffa\001\002\000" +
    "\012\003\012\011\013\015\020\017\015\001\002\000\012" +
    "\003\ufffe\011\ufffe\015\ufffe\017\ufffe\001\002\000\004\015" +
    "\021\001\002\000\004\002\uffff\001\002\000\004\016\023" +
    "\001\002\000\004\014\024\001\002\000\010\003\027\005" +
    "\026\017\031\001\002\000\012\003\ufff7\005\ufff7\015\ufff7" +
    "\017\ufff7\001\002\000\004\016\ufff6\001\002\000\012\003" +
    "\ufff2\005\ufff2\015\ufff2\017\ufff2\001\002\000\012\003\027" +
    "\005\026\015\033\017\031\001\002\000\012\003\ufff3\005" +
    "\ufff3\015\ufff3\017\ufff3\001\002\000\012\003\ufff8\005\ufff8" +
    "\015\ufff8\017\ufff8\001\002\000\012\003\ufffb\011\ufffb\015" +
    "\ufffb\017\ufffb\001\002\000\004\016\035\001\002\000\004" +
    "\014\036\001\002\000\014\003\040\006\044\007\037\010" +
    "\043\012\042\001\002\000\004\016\057\001\002\000\016" +
    "\003\uffeb\006\uffeb\007\uffeb\010\uffeb\012\uffeb\015\uffeb\001" +
    "\002\000\016\003\ufff0\006\ufff0\007\ufff0\010\ufff0\012\ufff0" +
    "\015\ufff0\001\002\000\004\016\055\001\002\000\004\016" +
    "\053\001\002\000\004\016\051\001\002\000\016\003\040" +
    "\006\044\007\037\010\043\012\042\015\ufff5\001\002\000" +
    "\004\015\050\001\002\000\016\003\ufff1\006\ufff1\007\ufff1" +
    "\010\ufff1\012\ufff1\015\ufff1\001\002\000\012\003\ufff4\005" +
    "\ufff4\015\ufff4\017\ufff4\001\002\000\004\020\052\001\002" +
    "\000\016\003\uffef\006\uffef\007\uffef\010\uffef\012\uffef\015" +
    "\uffef\001\002\000\004\020\054\001\002\000\016\003\uffed" +
    "\006\uffed\007\uffed\010\uffed\012\uffed\015\uffed\001\002\000" +
    "\004\013\056\001\002\000\016\003\uffec\006\uffec\007\uffec" +
    "\010\uffec\012\uffec\015\uffec\001\002\000\004\020\060\001" +
    "\002\000\016\003\uffee\006\uffee\007\uffee\010\uffee\012\uffee" +
    "\015\uffee\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\004\010\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\015\003\013\001\001\000" +
    "\002\001\001\000\004\012\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\027\005\024\001\001\000" +
    "\002\001\001\000\004\013\033\001\001\000\002\001\001" +
    "\000\004\005\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\044\007\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\046\014\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public static void main(String args[]) throws Exception {

// La clase Yylex es creada por el analizador léxico

new parser(new Yylex(System.in)).parse();
}
public static ArrayList first = new ArrayList();
public static ArrayList second = new ArrayList();
public static ArrayList third = new ArrayList();
public static ArrayList fourth = new ArrayList();

public void syntax_error(Symbol s){ 

System.out.println("Error en la Línea " + (s.left+1) +" Columna "+s.right+ ". Identificador " 
+s.value  ); 
first.add(s.left+1);
second.add(s.right);
third.add(s.value);
fourth.add("sintactico");


}


public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " + 
s.value + " no reconocido.");}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


private String vermelho="";
private String azul="";
private String verde="";
private String hex="";
private String  esce="";
private String names="";
private String color1 ="";
static ListaC  colors = new ListaC();
public static  ArrayList co1= new ArrayList();
public static  ArrayList co2= new ArrayList();
 static JLabel co ;
 static JLabel no ;

static  ArrayList concolor= new ArrayList();
public static void vertodo(JComboBox boxi)
{
    concolor.clear();
    NodoC  n = colors.primero;
        while(n!=null)
        {
      
            if(n.escenario.equals(boxi.getSelectedItem()))
            {
             String color ="";
               concolor.add(n.nombre);
     
               
               if(n.hex=="")
               {
           
                   co1.add(n.nombre);
                  co2.add(n.r);
               }
               else{
      
                   co1.add(n.nombre);
                 co2.add(n.hex);
               }
 
            }
            
            
            n=n.sig;
        }
}

public static void crear(JComboBox boxis, JPanel pane2 )
{

int x = 25;
int y = 35;

int xs = 65;
NodoC n = colors.primero;
while(n!=null)
{
    if(n.escenario.equalsIgnoreCase(boxis.getSelectedItem().toString()))
    {
       System.out.println(n.escenario);   
      
        for(int p =0;p<concolor.size();p++)
        {
            
          co = new JLabel();
          no = new JLabel(n.nombre);
          
      
          
          co.setLocation(x, y);
          no.setLocation(xs, y);
          if("".equals(n.hex))
          {
          
              
              String col[]= n.r.split(",");
       
              int red = Integer.parseInt(col[0]);
              int blue= Integer.parseInt(col[1]);
              int green= Integer.parseInt(col[2]);
              co.setBackground(new java.awt.Color(red, green, blue));
              
   
           
          }
          else 
          {
               if (n.hex.startsWith("#"))
             {   
             String po = n.hex.substring(1, n.hex.length());   
              co.setBackground(new Color(Integer.parseInt(po, 16)));
             
             }
             
          
          }
          
          
          pane2.add(co);
          pane2.add(no);
          co.setSize(30 , 30);
          co.setOpaque(true);
          co.setVisible(true);
          no.setSize(40, 40);
          no.setVisible(true);
        }
         y = y+45;
    
    }
   
    

n= n.sig;
}
x=25;
y=35;
    
    
}

public static void olhar_colores(JComboBox boxis, JLabel color , JComboBox boxCol)
{


NodoC n = colors.primero;
while(n!=null)
{
    if(n.escenario.equals(boxis.getSelectedItem()))
    {
    
         
                         if(n.nombre.equals( boxCol.getSelectedItem()))
                             {
                                          if("".equals(n.hex))
                                              {
          
              
                                                     String col[]= n.r.split(",");
       
                                                     int red = Integer.parseInt(col[0]);
                                                      int blue= Integer.parseInt(col[1]);
                                                      int green= Integer.parseInt(col[2]);
                                                      color.setBackground(new java.awt.Color(red, green, blue));
                                                      color.setOpaque(true);
              
   
           
                                                   }
                                               else 
                                                    {
                                                          if (n.hex.startsWith("#"))
                                                              {   
                                                                  String po = n.hex.substring(1, n.hex.length());   
                                                                  color.setBackground(new Color(Integer.parseInt(po, 16)));
                                                                   color.setOpaque(true);
                                                               }
             
          
                                                      }
                                

                              }
                         color.updateUI();
              }
    
   
    

n= n.sig;
}

    
}






  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Baf ::= error 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Baf",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Baf ::= hex dponto hexc 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		hex =(String) h;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Baf",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Baf ::= green dponto numero 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 verde = (String)g; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Baf",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Baf ::= blue dponto numero 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 azul = (String)b+"," ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Baf",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Baf ::= red dponto numero 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 vermelho =(String)r+","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Baf",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Bafr ::= Baf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bafr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Bafr ::= Bafr Baf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bafr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Bcolos ::= error 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Bcolos ::= coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Bcolos ::= color NT$2 dponto abi Bafr NT$3 cer 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		colors.insertar(esce,names,hex,color1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
color1 =vermelho+azul+verde;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
names=(String)c;hex="";vermelho=""; azul="";verde="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Bae ::= Bcolos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bae",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Bae ::= Bae Bcolos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bae",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Besce ::= error 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Besce",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Besce ::= coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Besce",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Besce ::= esce NT$1 dponto abi Bae cer 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Besce",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
esce=(String)e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Be ::= Besce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Be",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Be ::= Be Besce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Be",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lenguaje ::= abi colores NT$0 dponto abi Be cer cer 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lenguaje",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
colors.deletes();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= lenguaje EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

