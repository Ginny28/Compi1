
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Sep 30 16:43:24 CST 2012
//----------------------------------------------------

import java_cup.runtime.*;
import java.lang.*;
import java.util.*;
import javax.swing.*;
import java.awt.Desktop;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Sep 30 16:43:24 CST 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\004\000\002\002\003\000\002\024" +
    "\002\000\002\003\006\000\002\003\003\000\002\004\004" +
    "\000\002\005\005\000\002\006\005\000\002\010\004\000" +
    "\002\010\003\000\002\015\004\000\002\015\003\000\002" +
    "\025\002\000\002\007\011\000\002\026\002\000\002\007" +
    "\011\000\002\027\002\000\002\007\007\000\002\030\002" +
    "\000\002\007\011\000\002\007\005\000\002\007\003\000" +
    "\002\014\004\000\002\014\003\000\002\031\002\000\002" +
    "\013\007\000\002\032\002\000\002\013\011\000\002\013" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\033\002" +
    "\000\002\016\007\000\002\034\002\000\002\016\007\000" +
    "\002\035\002\000\002\016\007\000\002\036\002\000\002" +
    "\016\006\000\002\017\004\000\002\017\003\000\002\037" +
    "\002\000\002\020\010\000\002\022\004\000\002\022\003" +
    "\000\002\040\002\000\002\021\011\000\002\041\002\000" +
    "\002\021\011\000\002\042\002\000\002\021\007\000\002" +
    "\043\002\000\002\021\007\000\002\044\002\000\002\021" +
    "\011\000\002\045\002\000\002\021\007\000\002\046\002" +
    "\000\002\021\010\000\002\023\003\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\006\003\006\004\005\001\002\000\004\002" +
    "\000\001\002\000\004\006\uffff\001\002\000\004\002\ufffd" +
    "\001\002\000\004\002\010\001\002\000\004\002\001\001" +
    "\002\000\004\006\014\001\002\000\004\005\234\001\002" +
    "\000\004\010\116\001\002\000\016\003\017\012\015\022" +
    "\023\023\016\024\021\025\024\001\002\000\010\003\076" +
    "\026\077\027\074\001\002\000\004\054\061\001\002\000" +
    "\020\003\uffec\007\uffec\012\uffec\022\uffec\023\uffec\024\uffec" +
    "\025\uffec\001\002\000\020\003\017\007\060\012\015\022" +
    "\023\023\016\024\021\025\024\001\002\000\004\054\053" +
    "\001\002\000\020\003\ufff8\007\ufff8\012\ufff8\022\ufff8\023" +
    "\ufff8\024\ufff8\025\ufff8\001\002\000\004\054\045\001\002" +
    "\000\004\054\025\001\002\000\004\063\026\001\002\000" +
    "\026\042\037\043\034\044\040\045\036\046\027\047\031" +
    "\050\035\051\041\052\032\053\030\001\002\000\004\063" +
    "\uffe0\001\002\000\004\063\uffdb\001\002\000\004\063\uffdf" +
    "\001\002\000\004\063\uffdc\001\002\000\004\063\uffef\001" +
    "\002\000\004\063\uffe3\001\002\000\004\063\uffde\001\002" +
    "\000\004\063\uffe1\001\002\000\004\063\uffe4\001\002\000" +
    "\004\063\uffe2\001\002\000\004\063\uffdd\001\002\000\004" +
    "\063\043\001\002\000\004\064\044\001\002\000\020\003" +
    "\uffee\007\uffee\012\uffee\022\uffee\023\uffee\024\uffee\025\uffee" +
    "\001\002\000\004\063\046\001\002\000\026\042\037\043" +
    "\034\044\040\045\036\046\027\047\031\050\035\051\041" +
    "\052\032\053\030\001\002\000\004\063\ufff5\001\002\000" +
    "\004\063\051\001\002\000\004\064\052\001\002\000\020" +
    "\003\ufff4\007\ufff4\012\ufff4\022\ufff4\023\ufff4\024\ufff4\025" +
    "\ufff4\001\002\000\004\055\054\001\002\000\004\064\ufff1" +
    "\001\002\000\004\064\056\001\002\000\020\003\ufff0\007" +
    "\ufff0\012\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\001\002" +
    "\000\020\003\ufff9\007\ufff9\012\ufff9\022\ufff9\023\ufff9\024" +
    "\ufff9\025\ufff9\001\002\000\004\010\ufffb\001\002\000\004" +
    "\063\062\001\002\000\014\070\065\071\064\072\066\073" +
    "\067\074\063\001\002\000\004\063\uffd6\001\002\000\004" +
    "\063\uffd9\001\002\000\004\063\uffda\001\002\000\004\063" +
    "\uffd8\001\002\000\004\063\uffd7\001\002\000\004\063\ufff3" +
    "\001\002\000\004\063\072\001\002\000\004\064\073\001" +
    "\002\000\020\003\ufff2\007\ufff2\012\ufff2\022\ufff2\023\ufff2" +
    "\024\ufff2\025\ufff2\001\002\000\004\054\107\001\002\000" +
    "\012\003\076\013\106\026\077\027\074\001\002\000\012" +
    "\003\uffe5\013\uffe5\026\uffe5\027\uffe5\001\002\000\004\054" +
    "\101\001\002\000\012\003\uffea\013\uffea\026\uffea\027\uffea" +
    "\001\002\000\004\055\102\001\002\000\004\064\uffe9\001" +
    "\002\000\004\064\104\001\002\000\012\003\uffe8\013\uffe8" +
    "\026\uffe8\027\uffe8\001\002\000\012\003\uffeb\013\uffeb\026" +
    "\uffeb\027\uffeb\001\002\000\020\003\uffed\007\uffed\012\uffed" +
    "\022\uffed\023\uffed\024\uffed\025\uffed\001\002\000\004\063" +
    "\110\001\002\000\026\042\037\043\034\044\040\045\036" +
    "\046\027\047\031\050\035\051\041\052\032\053\030\001" +
    "\002\000\004\063\uffe7\001\002\000\004\063\113\001\002" +
    "\000\004\064\114\001\002\000\012\003\uffe6\013\uffe6\026" +
    "\uffe6\027\uffe6\001\002\000\004\005\ufffc\001\002\000\012" +
    "\020\122\030\117\031\123\032\121\001\002\000\004\054" +
    "\230\001\002\000\014\011\226\020\122\030\117\031\123" +
    "\032\121\001\002\000\004\054\222\001\002\000\004\016" +
    "\uffcf\001\002\000\004\054\125\001\002\000\014\011\ufff6" +
    "\020\ufff6\030\ufff6\031\ufff6\032\ufff6\001\002\000\004\057" +
    "\126\001\002\000\004\066\uffd3\001\002\000\004\066\130" +
    "\001\002\000\014\011\uffd2\020\uffd2\030\uffd2\031\uffd2\032" +
    "\uffd2\001\002\000\004\016\133\001\002\000\006\016\uffcc" +
    "\021\uffcc\001\002\000\004\014\137\001\002\000\006\016" +
    "\133\021\136\001\002\000\006\016\uffcd\021\uffcd\001\002" +
    "\000\014\011\uffce\020\uffce\030\uffce\031\uffce\032\uffce\001" +
    "\002\000\020\033\145\034\150\035\147\036\144\037\142" +
    "\040\141\041\143\001\002\000\022\015\uffc8\033\uffc8\034" +
    "\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\001\002" +
    "\000\004\054\214\001\002\000\004\054\207\001\002\000" +
    "\004\054\203\001\002\000\004\054\175\001\002\000\004" +
    "\054\167\001\002\000\022\015\164\033\145\034\150\035" +
    "\147\036\144\037\142\040\141\041\143\001\002\000\004" +
    "\054\155\001\002\000\004\054\151\001\002\000\004\055" +
    "\152\001\002\000\004\066\uffc1\001\002\000\004\066\154" +
    "\001\002\000\022\015\uffc0\033\uffc0\034\uffc0\035\uffc0\036" +
    "\uffc0\037\uffc0\040\uffc0\041\uffc0\001\002\000\004\063\156" +
    "\001\002\000\026\042\037\043\034\044\040\045\036\046" +
    "\027\047\031\050\035\051\041\052\032\053\030\001\002" +
    "\000\004\063\uffbf\001\002\000\004\063\161\001\002\000" +
    "\004\066\162\001\002\000\022\015\uffbe\033\uffbe\034\uffbe" +
    "\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\001\002\000" +
    "\022\015\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\040\uffc9\041\uffc9\001\002\000\004\017\uffcb\001\002\000" +
    "\004\017\166\001\002\000\006\016\uffca\021\uffca\001\002" +
    "\000\004\063\170\001\002\000\004\065\171\001\002\000" +
    "\004\063\uffc7\001\002\000\004\063\173\001\002\000\004" +
    "\066\174\001\002\000\022\015\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\001\002\000\006" +
    "\055\176\056\200\001\002\000\006\062\uffb9\066\uffb9\001" +
    "\002\000\004\066\uffbd\001\002\000\006\062\uffb8\066\uffb8" +
    "\001\002\000\004\066\202\001\002\000\022\015\uffbc\033" +
    "\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\001\002\000\004\055\204\001\002\000\004\066\uffc3\001" +
    "\002\000\004\066\206\001\002\000\022\015\uffc2\033\uffc2" +
    "\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\001" +
    "\002\000\006\055\176\056\200\001\002\000\004\062\uffbb" +
    "\001\002\000\004\062\212\001\002\000\004\066\213\001" +
    "\002\000\022\015\uffba\033\uffba\034\uffba\035\uffba\036\uffba" +
    "\037\uffba\040\uffba\041\uffba\001\002\000\004\063\215\001" +
    "\002\000\004\065\216\001\002\000\004\063\uffc5\001\002" +
    "\000\004\063\220\001\002\000\004\066\221\001\002\000" +
    "\022\015\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4" +
    "\040\uffc4\041\uffc4\001\002\000\004\060\223\001\002\000" +
    "\004\066\uffd1\001\002\000\004\066\225\001\002\000\014" +
    "\011\uffd0\020\uffd0\030\uffd0\031\uffd0\032\uffd0\001\002\000" +
    "\004\005\ufffa\001\002\000\014\011\ufff7\020\ufff7\030\ufff7" +
    "\031\ufff7\032\ufff7\001\002\000\004\061\231\001\002\000" +
    "\004\066\uffd5\001\002\000\004\066\233\001\002\000\014" +
    "\011\uffd4\020\uffd4\030\uffd4\031\uffd4\032\uffd4\001\002\000" +
    "\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\006\002\006\003\003\001\001\000\002\001" +
    "\001\000\004\024\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\011\005\012\001" +
    "\001\000\002\001\001\000\004\006\114\001\001\000\006" +
    "\007\021\010\017\001\001\000\006\013\077\014\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\046\001\001\000\004\025\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\110\001\001\000" +
    "\004\032\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\117\016" +
    "\123\001\001\000\002\001\001\000\004\016\226\001\001" +
    "\000\002\001\001\000\004\036\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\133\020\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\137\022\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\156\001\001\000\004\044" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\176\001\001" +
    "\000\002\001\001\000\004\045\200\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\207\001\001\000\004\046\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\216\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\223\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\231\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public static void main(String args[]) throws Exception {

// La clase Yylex es creada por el analizador léxico

new parser(new Yylex2(System.in)).parse();
}

public void syntax_error(Symbol s){ 
        System.out.println("Error en la Línea " + (s.right+1) +" Columna "+s.left+ ". Identificador " 
+s.value  ); 
}
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " + 
s.value + " no reconocido."); 
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



 public static String lugar,linea="";
 public static String fecha ="";
 public static String hora= "";
 public static String cf="";
 public static String fuente,tamfuente="";
 public static String bordtab,otrocolor,colorsito="";
 public static ArrayList todito = new ArrayList();
 public static ArrayList lines = new ArrayList();
 public static String dm [];
 public static double precios,cantidades,total=0;
public static String Reporte2= "Reporte.html";
public static FileWriter fw =null;
public static BufferedWriter bw;
public static PrintWriter salArch;

 
void totalito()
{
  total = cantidades * precios;
  todito.add(total);
}
 
 void colorbordes(String colorbord)
 {
 if(colorbord.equalsIgnoreCase("azul"))
{
colorsito="blue";
}
else if(colorbord.equalsIgnoreCase("rojo"))
{
colorsito="red";
} 
else if(colorbord.equalsIgnoreCase("verde"))
{
colorsito="green";
} 
else if(colorbord.equalsIgnoreCase("morado"))
{
colorsito="purple";
} 
else if(colorbord.equalsIgnoreCase("rosado"))
{
colorsito="pink";
} 
else if(colorbord.equalsIgnoreCase("negro"))
{
colorsito="black";
} 
else if(colorbord.equalsIgnoreCase("blanco"))
{
colorsito="white";
} 
else if(colorbord.equalsIgnoreCase("gris"))
{
colorsito="gray";
} 
else if(colorbord.equalsIgnoreCase("anaranjado"))
{
colorsito="orange";
} 
else if(colorbord.equalsIgnoreCase("celeste"))
{
colorsito="sky-blue";
}
 
 }
 
 void colorfuente(String colorfonts)
 {
  if(colorfonts.equalsIgnoreCase("azul"))
{
otrocolor="blue";
}
else if(colorfonts.equalsIgnoreCase("rojo"))
{
otrocolor="red";
} 
else if(colorfonts.equalsIgnoreCase("verde"))
{
otrocolor="green";
} 
else if(colorfonts.equalsIgnoreCase("morado"))
{
otrocolor="purple";
} 
else if(colorfonts.equalsIgnoreCase("rosado"))
{
otrocolor="pink";
} 
else if(colorfonts.equalsIgnoreCase("negro"))
{
otrocolor="black";
} 
else if(colorfonts.equalsIgnoreCase("blanco"))
{
otrocolor="white";
} 
else if(colorfonts.equalsIgnoreCase("gris"))
{
otrocolor="gray";
} 
else if(colorfonts.equalsIgnoreCase("anaranjado"))
{
otrocolor="orange";
} 
else if(colorfonts.equalsIgnoreCase("celeste"))
{
otrocolor="sky-blue";
}

 }
 
 void colorfondito(String colorfondo)
 {
 
 if(colorfondo.equalsIgnoreCase("azul"))
{
cf="384eba";
}
else if(colorfondo.equalsIgnoreCase("rojo"))
{
cf="ba3848";
} 
else if(colorfondo.equalsIgnoreCase("verde"))
{
cf="159f49";
} 
else if(colorfondo.equalsIgnoreCase("morado"))
{
cf="641685";
} 
else if(colorfondo.equalsIgnoreCase("rosado"))
{
cf="cf3e97";
} 
else if(colorfondo.equalsIgnoreCase("negro"))
{
cf="010301";
} 
else if(colorfondo.equalsIgnoreCase("blanco"))
{
cf="ffffff";
} 
else if(colorfondo.equalsIgnoreCase("gris"))
{
cf="8f948e";
} 
else if(colorfondo.equalsIgnoreCase("anaranjado"))
{
cf="f69e11";
} 
else if(colorfondo.equalsIgnoreCase("celeste"))
{
cf="49a7da";
} 
 }
 
 
 
 
public static void tablita()throws IOException
{
dm = lugar.split("\\,");
String lineas="";
int contador =0;
double tc=0;
double tt=0;
double ca =0;
double to=0;
ArrayList valores = new ArrayList();
ArrayList cantidad = new ArrayList();
ArrayList totales= new ArrayList();


salArch.print("<html>");
salArch.print("<head>Reporte General</head>");
salArch.print("<body>");
salArch.print("<body style='background:"+cf+"' TEXT='"+otrocolor+"'>");
salArch.print("<Font face=\""+fuente+"\""+" "+"size="+tamfuente+">");
salArch.print("<p align='center'>Departamento: "+dm[0]+"<br>Municipio: "+dm[1]+"<br>Fecha: "+fecha+"<br>Hora:"+hora+"</p>");


for(int p=0; p<todito.size();p++)
{
//System.out.println(todito.get(p));
    if(todito.get(p).equals("AquiSi"))
    {
    for(int o=p+1;o<todito.size();o=o+11)
    {
      for(int lin =0; lin<lines.size();lin++){
       if(lines.get(lin).equals(todito.get(o)))
       {
          lineas= todito.get(o).toString();
          valores.add(lineas);
          salArch.print("<table border='"+bordtab+"' bordercolor='"+colorsito+"'align ='center'><font color='pink'>"+"\n"+
	      "<tr>"+
	      "<th colspan='8'><font size="+tamfuente+">"+lineas+"</font></th>"+
	      "</tr>"+
              "<tr>"+
	      "<td><font size="+tamfuente+">Nombre</font></td>"+
	      "<td><font size="+tamfuente+">Marca</font></td>"+
	      "<td><font size="+tamfuente+">Modelo</font></td>"+
	      "<td><font size="+tamfuente+">Candidad</font></td>"+
	      "<td><font size="+tamfuente+">Color</font></td>"+
	      "<td><font size="+tamfuente+">Precio</font></td>"+
	      "<td><font size="+tamfuente+">Peso</font></td>"+
	      "<td><font size="+tamfuente+">Total</font></td>"+
	      "</tr>");
	      
           
         for(int m=o+1;m<todito.size();m=m+8)
         {
            if(todito.get(m).equals("AquiSi"))
            {
                break;
            }

            else
            {
                salArch.println("<tr>"+
	      "<td><font size="+tamfuente+">"+todito.get(m)+"</font></td>"+
	     "<td><font size="+tamfuente+">"+todito.get(m+1)+"</font></td>"+
	      "<td><font size="+tamfuente+">"+todito.get(m+2)+"</font></td>"+
	      "<td><font size="+tamfuente+">"+todito.get(m+3)+"</font></td>"+
	      "<td><font size="+tamfuente+">"+todito.get(m+4)+"</font></td>"+
	      "<td><font size="+tamfuente+">"+todito.get(m+5)+"</font></td>"+
	      "<td><font size="+tamfuente+">"+todito.get(m+6)+"</font></td>"+
	     "<td><font size="+tamfuente+">"+todito.get(m+7)+"</font></td>"+
	      "</tr>");
             tc += Double.parseDouble(todito.get(m+3).toString());
             tt += Double.parseDouble(todito.get(m+7).toString());
	     ca += Double.parseDouble(todito.get(m+3).toString());
             to += Double.parseDouble(todito.get(m+7).toString());

            }
         }
       } 

      }

    }
salArch.println("<tr>"+
	      "<td><font size="+tamfuente+">"+"Total"+"</font></td>"+
	     "<td><font size="+tamfuente+">"+""+"</font></td>"+
	      "<td><font size="+tamfuente+">"+""+"</font></td>"+
	      "<td><font size="+tamfuente+">"+tc+"</font></td>"+
	      "<td><font size="+tamfuente+">"+""+"</font></td>"+
	      "<td><font size="+tamfuente+">"+""+"</font></td>"+
	      "<td><font size="+tamfuente+">"+""+"</font></td>"+
	     "<td><font size="+tamfuente+">"+tt+"</font></td>"+
	      "</tr>");
 salArch.println("<br>");
 cantidad.add(tc);
             totales.add(tt);
 tc=0;tt=0;
    }
   
}
salArch.println("</table>");
salArch.println("<br>");
salArch.print("<table border='"+bordtab+"' bordercolor='"+colorsito+"'align ='center'><font color='pink'>");

salArch.println("<tr>"+
	      "<td><font size="+tamfuente+">"+"Linea"+"</font></td>"+
	     "<td><font size="+tamfuente+">Total de productos</font></td>"+
	      "<td><font size="+tamfuente+">Total dinero</font></td>"+
	      "</tr>");

for(int p=0;p<valores.size();p++)
{
    salArch.println("<tr>"+
	      "<td><font size="+tamfuente+">"+valores.get(p)+"</font></td>"+
	     "<td><font size="+tamfuente+">"+cantidad.get(p)+"</font></td>"+
	      "<td><font size="+tamfuente+">"+totales.get(p)+"</font></td>"+
	      "</tr>");
}
salArch.println("<tr>"+
	      "<td><font size="+tamfuente+">Total</font></td>"+
	     "<td><font size="+tamfuente+">"+ca+"</font></td>"+
	      "<td><font size="+tamfuente+">"+to+"</font></td>"+
	      "</tr>");
salArch.println("</table>");


 
salArch.println("</body></html>");
salArch.close();





}




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Bnumbers ::= real 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bnumbers",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Bnumbers ::= numb 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bnumbers",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // BCr ::= weight equal Bnumbers NT$18 abrv dot 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pesoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pesoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object peso = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BCr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$18 ::= 
            {
              Object RESULT =null;
		int pesoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pesoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object peso = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
todito.add(peso);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BCr ::= price equal Bnumbers NT$17 dot 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int preleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int preright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BCr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$17 ::= 
            {
              Object RESULT =null;
		int preleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int preright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
todito.add(pre);precios=Double.parseDouble(pre.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BCr ::= colo equal Apos Bcolor NT$16 Apos dot 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int colsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int colsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object cols = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BCr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$16 ::= 
            {
              Object RESULT =null;
		int colsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int colsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cols = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
todito.add(cols);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BCr ::= cant equal numb NT$15 dot 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cantileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cantiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String canti = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BCr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$15 ::= 
            {
              Object RESULT =null;
		int cantileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cantiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String canti = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
todito.add(canti);cantidades=Double.parseDouble(canti);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BCr ::= model equal numb NT$14 dot 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int modleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String mod = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BCr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$14 ::= 
            {
              Object RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int modright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String mod = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
todito.add(mod);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BCr ::= mark equal Apos letters NT$13 Apos dot 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int marksleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int marksright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String marks = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BCr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$13 ::= 
            {
              Object RESULT =null;
		int marksleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int marksright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String marks = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
todito.add(marks);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BCr ::= names equal Apos letters NT$12 Apos dot 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BCr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$12 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
todito.add(nom);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BCa ::= BCr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BCa",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BCa ::= BCa BCr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BCa",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Bpno ::= PrA CaA BCa CaC NT$11 PrC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bpno",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$11 ::= 
            {
              Object RESULT =null;
totalito();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Bpr ::= Bpno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bpr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Bpr ::= Bpr Bpno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bpr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BDr ::= LiA NT$10 Bpr LiC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String li = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BDr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$10 ::= 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String li = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
linea =li.substring(18,li.length()-2);todito.add("AquiSi"); todito.add(linea);lines.add(linea);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BDr ::= hours equal hora2 NT$9 dot 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BDr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$9 ::= 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
hora=h;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BDr ::= dates equal dates2 NT$8 dot 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BDr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$8 ::= 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
fecha=f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BDr ::= place equal place2 NT$7 dot 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BDr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$7 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
lugar=p;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Bfuente ::= courier 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String le = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=le;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bfuente",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Bfuente ::= trebuchet 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String le = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=le;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bfuente",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Bfuente ::= georgia 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String le = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=le;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bfuente",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Bfuente ::= verdana 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String le = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=le;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bfuente",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Bfuente ::= arial 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String le = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=le;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bfuente",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Bcolor ::= celeste 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Bcolor ::= arancione 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Bcolor ::= griggio 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Bcolor ::= nero 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Bcolor ::= bianco 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Bcolor ::= rosato 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Bcolor ::= porpora 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Bcolor ::= verde 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Bcolor ::= blu 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Bcolor ::= rossa 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Btabla ::= error 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Btabla",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Btabla ::= coltable equal Apos Bcolor NT$6 Apos semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int colosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int colosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object colos = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Btabla",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$6 ::= 
            {
              Object RESULT =null;
		int colosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int colosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object colos = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
colorbordes(colos.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Btabla ::= btable equal numb NT$5 semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int boleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int boright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Btabla",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$5 ::= 
            {
              Object RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
bordtab=bo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Bta ::= Btabla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bta",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Bta ::= Bta Btabla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bta",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BAF ::= error 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BAF",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BAF ::= TaA Bta TaC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BAF",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BAF ::= colfont equal Apos Bcolor NT$4 Apos semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int clrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int clrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object clr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BAF",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$4 ::= 
            {
              Object RESULT =null;
		int clrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object clr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
colorfuente(clr.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BAF ::= tmfont equal numb NT$3 semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BAF",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$3 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
tamfuente=n.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BAF ::= font equal Apos Bfuente NT$2 Apos semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int furight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object fu = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BAF",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$2 ::= 
            {
              Object RESULT =null;
		int fuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int furight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fu = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
fuente=fu.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BAF ::= fondo equal Apos Bcolor NT$1 Apos semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cololeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int coloright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object colo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BAF",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$1 ::= 
            {
              Object RESULT =null;
		int cololeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coloright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object colo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
colorfondito(colo.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BDp ::= BDr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BDp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BDp ::= BDp BDr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BDp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BFr ::= BAF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BFr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BFr ::= BFr BAF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BFr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BDef ::= DpA BDp DpC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BDef",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BFor ::= FA BFr FC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BFor",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BA ::= BFor BDef 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Bmain ::= error 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bmain",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Bmain ::= GMA NT$0 BA GMC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bmain",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
fw=new FileWriter(Reporte2);bw = new BufferedWriter(fw);salArch =new PrintWriter(bw); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // lengua ::= Bmain 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lengua",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= lengua EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

