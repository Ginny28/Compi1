
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Apr 16 16:15:05 CST 2013
//----------------------------------------------------

package proy1_compi;

import java_cup.runtime.*;
import java.lang.*;
import java.util.*;
import javax.swing.*;
import java.awt.Color;
import java.awt.Dimension;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Apr 16 16:15:05 CST 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\037\000\002\002\004\000\002\012\002\000\002\002" +
    "\012\000\002\003\004\000\002\003\003\000\002\013\002" +
    "\000\002\004\010\000\002\004\003\000\002\004\003\000" +
    "\002\006\004\000\002\006\003\000\002\014\002\000\002" +
    "\005\010\000\002\015\002\000\002\005\010\000\002\005" +
    "\005\000\002\016\002\000\002\005\010\000\002\005\007" +
    "\000\002\005\003\000\002\010\004\000\002\010\003\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\003\000\002\017\002\000\002\011" +
    "\011\000\002\011\010\000\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\004\024\005\001\002\000\004\002\121\001" +
    "\002\000\004\004\006\001\002\000\004\026\000\001\002" +
    "\000\004\026\010\001\002\000\004\024\011\001\002\000" +
    "\010\003\012\021\013\027\015\001\002\000\012\003\ufff9" +
    "\021\ufff9\025\ufff9\027\ufff9\001\002\000\004\026\ufffc\001" +
    "\002\000\012\003\ufffd\021\ufffd\025\ufffd\027\ufffd\001\002" +
    "\000\012\003\ufffa\021\ufffa\025\ufffa\027\ufffa\001\002\000" +
    "\012\003\012\021\013\025\020\027\015\001\002\000\012" +
    "\003\ufffe\021\ufffe\025\ufffe\027\ufffe\001\002\000\004\025" +
    "\021\001\002\000\004\002\uffff\001\002\000\004\026\023" +
    "\001\002\000\004\024\024\001\002\000\016\003\027\005" +
    "\025\006\032\012\033\015\031\017\034\001\002\000\004" +
    "\026\114\001\002\000\020\003\ufff7\005\ufff7\006\ufff7\012" +
    "\ufff7\015\ufff7\017\ufff7\025\ufff7\001\002\000\020\003\uffee" +
    "\005\uffee\006\uffee\012\uffee\015\uffee\017\uffee\025\uffee\001" +
    "\002\000\020\003\027\005\025\006\032\012\033\015\031" +
    "\017\034\025\113\001\002\000\004\026\105\001\002\000" +
    "\004\026\061\001\002\000\004\026\037\001\002\000\004" +
    "\026\035\001\002\000\004\020\036\001\002\000\020\003" +
    "\ufff2\005\ufff2\006\ufff2\012\ufff2\015\ufff2\017\ufff2\025\ufff2" +
    "\001\002\000\004\024\040\001\002\000\010\003\041\013" +
    "\043\014\044\001\002\000\004\025\uffe3\001\002\000\004" +
    "\025\060\001\002\000\004\026\052\001\002\000\004\026" +
    "\045\001\002\000\004\032\046\001\002\000\004\013\047" +
    "\001\002\000\004\026\050\001\002\000\004\032\051\001" +
    "\002\000\004\025\uffe4\001\002\000\004\032\053\001\002" +
    "\000\004\014\uffe6\001\002\000\004\014\055\001\002\000" +
    "\004\026\056\001\002\000\004\032\057\001\002\000\004" +
    "\025\uffe5\001\002\000\020\003\uffef\005\uffef\006\uffef\012" +
    "\uffef\015\uffef\017\uffef\025\uffef\001\002\000\004\024\062" +
    "\001\002\000\014\003\064\007\070\010\063\011\067\022" +
    "\066\001\002\000\004\026\103\001\002\000\016\003\uffe7" +
    "\007\uffe7\010\uffe7\011\uffe7\022\uffe7\025\uffe7\001\002\000" +
    "\016\003\uffec\007\uffec\010\uffec\011\uffec\022\uffec\025\uffec" +
    "\001\002\000\004\026\101\001\002\000\004\026\077\001" +
    "\002\000\004\026\075\001\002\000\016\003\064\007\070" +
    "\010\063\011\067\022\066\025\ufff1\001\002\000\016\003" +
    "\uffed\007\uffed\010\uffed\011\uffed\022\uffed\025\uffed\001\002" +
    "\000\004\025\074\001\002\000\020\003\ufff0\005\ufff0\006" +
    "\ufff0\012\ufff0\015\ufff0\017\ufff0\025\ufff0\001\002\000\004" +
    "\032\076\001\002\000\016\003\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\022\uffeb\025\uffeb\001\002\000\004\032\100\001\002" +
    "\000\016\003\uffe9\007\uffe9\010\uffe9\011\uffe9\022\uffe9\025" +
    "\uffe9\001\002\000\004\023\102\001\002\000\016\003\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\022\uffe8\025\uffe8\001\002\000" +
    "\004\032\104\001\002\000\016\003\uffea\007\uffea\010\uffea" +
    "\011\uffea\022\uffea\025\uffea\001\002\000\004\030\106\001" +
    "\002\000\004\016\107\001\002\000\004\030\ufff4\001\002" +
    "\000\004\030\111\001\002\000\020\003\ufff3\005\ufff3\006" +
    "\ufff3\012\ufff3\015\ufff3\017\ufff3\025\ufff3\001\002\000\020" +
    "\003\ufff8\005\ufff8\006\ufff8\012\ufff8\015\ufff8\017\ufff8\025" +
    "\ufff8\001\002\000\012\003\ufffb\021\ufffb\025\ufffb\027\ufffb" +
    "\001\002\000\004\030\115\001\002\000\004\031\116\001" +
    "\002\000\004\030\ufff6\001\002\000\004\030\120\001\002" +
    "\000\020\003\ufff5\005\ufff5\006\ufff5\012\ufff5\015\ufff5\017" +
    "\ufff5\025\ufff5\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\015\004\013\001\001\000" +
    "\002\001\001\000\004\013\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\025\006\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\064\010\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\071\016\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public static void main(String args[]) throws Exception {

// La clase Yylex es creada por el analizador léxico

new parser(new Yylex(System.in)).parse();
}
public static ArrayList first = new ArrayList();
public static ArrayList second = new ArrayList();
public static ArrayList third = new ArrayList();
public static ArrayList  four = new ArrayList();

public void syntax_error(Symbol s){ 

System.out.println("Error en la Línea " + (s.left+1) +" Columna "+s.right+ ". Identificador " 
+s.value  ); 
first.add(s.left+1);
second.add(s.right);
third.add(s.value);
four.add("Sintactico");


}

public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " + 
s.value + " no reconocido.");}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


static ListaE  escen = new ListaE();
private String nomes="";
private String tipos="";
private String imagen="";
private String color1="";

private String  vermelho ="";
private String  verde="";
private String  azul="";
private String  hexs="";

private String cuadros="";
private  String dime ="";
static JLabel [][] labe;
static  String  exte;
static String tamanio;
static String cuadradinhos;

public static void vertodo(JComboBox boxi)
{
    NodoE n = escen.primero;
        while(n!=null)
        {
          boxi.addItem(n.escenario);
            n=n.sig;
        }

}
    

public static void CrearLienzo(JComboBox jComboBox1, JPanel pane1,JLabel jLabel1, JPanel pane2,JRadioButton jRadioButton1, JRadioButton jRadioButton2, JRadioButton jRadioButton3,JRadioButton jRadioButton4,JRadioButton jRadioButton5,JRadioButton jRadioButton6)
{
 NodoE  n  = proy1_compi.CUP$parser$actions.escen.primero;
        while(n!=null)
        {
        
	  
        
        
            if(n.escenario.equals(jComboBox1.getSelectedItem()))
            {
            jLabel1.setText("Lienzo:"+n.nombre);
            int d = Integer.parseInt(n.dime);
            int t =  Integer.parseInt(n.cuadro);
            tamanio = n.dime;
            cuadradinhos = n.cuadro;
            exte = n.tipo;
            pane1.removeAll();
            madeIt(d, t, pane1, pane2,n);
           
            pane1.setPreferredSize(new Dimension(d*t, d*t));
            sizes(jRadioButton1,jRadioButton2,jRadioButton3,n);  
            ext(jRadioButton4, jRadioButton5, jRadioButton6, n);
            pane1.setLocation(161, 6);
            }
        
        n= n.sig;
        }

}



public  static void madeIt( int d,int t,JPanel pane1,JPanel pane2,NodoE n)
{
      
    
        
    
        labe = new JLabel[d][d];

        for(int i=0;i<d;i++)
        {
            for(int j=0; j<d;j++)
            {
               

                labe[i][j] = new JLabel();

                labe[i][j].setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, false));
                
                labe[i][j].setBounds(i*t, j*t,t,t);
               
                if(n.hex=="")
          {
          
              
             String col[]= n.color.split(",");
            
              int red = Integer.parseInt(col[0]);
              int blue= Integer.parseInt(col[1]);
              int green= Integer.parseInt(col[2]);
              labe[i][j].setBackground(new java.awt.Color(red, green, blue));
              labe[i][j].setOpaque(true);
         
           
          }
          else 
          {
               if (n.hex.startsWith("#"))
            {   
             String po = n.hex.substring(1, n.hex.length());   
          labe[i][j].setBackground(new Color(Integer.parseInt(po, 16)));
            labe[i][j].setOpaque(true);
         
        
             }
             
          
          }
                
                
                
                
                pane1.add(labe[i][j]);
               labe[i][j].repaint();
               //labe[i][j].updateUI();

            }
           
            pane1.updateUI();
       
        }

       
        pane2.resize(130, 446);
        

}



  public static void  sizes(JRadioButton jRadioButton1, JRadioButton jRadioButton2, JRadioButton jRadioButton3,NodoE n )
   {
   jRadioButton1.removeAll();
       jRadioButton2.removeAll();
       jRadioButton3.removeAll();
    if(n.image.equalsIgnoreCase("P"))
            {
                jRadioButton1.setSelected(true);
                jRadioButton1.setEnabled(true);
                jRadioButton2.setEnabled(false);
                jRadioButton3.setEnabled(false);
                jRadioButton2.setSelected(false);
                jRadioButton3.setSelected(false);
            
            }
             if(n.image.equalsIgnoreCase("G"))
            {
                jRadioButton3.setSelected(true);
                jRadioButton3.setEnabled(true);
                jRadioButton2.setEnabled(false);
                jRadioButton1.setEnabled(false);
                jRadioButton2.setSelected(false);
                jRadioButton1.setSelected(false);
            
            }
              if(n.image.equalsIgnoreCase("N"))
            {
                jRadioButton2.setSelected(true);
                jRadioButton2.setEnabled(true);
                jRadioButton1.setEnabled(false);
                jRadioButton3.setEnabled(false);
                jRadioButton1.setSelected(false);
                jRadioButton3.setSelected(false);
            
            }
   
   
   }
  
    public static void  ext(JRadioButton jRadioButton4, JRadioButton jRadioButton5, JRadioButton jRadioButton6,NodoE n )
   {
       jRadioButton4.removeAll();
       jRadioButton5.removeAll();
       jRadioButton6.removeAll();
            if(n.tipo.equalsIgnoreCase("png"))
            {
                jRadioButton4.setSelected(true);
                jRadioButton4.setEnabled(true);
                jRadioButton5.setEnabled(false);
                jRadioButton6.setEnabled(false);
                jRadioButton5.setSelected(false);
                jRadioButton6.setSelected(false);
            
            }
             if(n.tipo.equalsIgnoreCase("jpg"))
            {
                jRadioButton5.setSelected(true);
                jRadioButton5.setEnabled(true);
                jRadioButton4.setEnabled(false);
                jRadioButton6.setEnabled(false);
                jRadioButton4.setSelected(false);
                jRadioButton6.setSelected(false);
            
            }
              if(n.tipo.equalsIgnoreCase("gif"))
            {
                jRadioButton6.setSelected(true);
                jRadioButton6.setEnabled(true);
                jRadioButton5.setEnabled(false);
                jRadioButton4.setEnabled(false);
                jRadioButton5.setSelected(false);
                jRadioButton4.setSelected(false);
            
            }
   
   
   }
  
  
  

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Btam ::= error 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Btam",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Btam ::= dim dponto numero cuadro dponto numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Btam",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Btam ::= cuadro dponto numero NT$5 dim dponto numero 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		dime= String.valueOf(n2);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Btam",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$5 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 cuadros = String.valueOf(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Baf ::= error 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Baf",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Baf ::= hex dponto hexc 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		hexs =(String) h;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Baf",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Baf ::= green dponto numero 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer g = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 verde = String.valueOf(g); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Baf",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Baf ::= blue dponto numero 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 azul = String.valueOf(b)+"," ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Baf",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Baf ::= red dponto numero 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 vermelho =String.valueOf(r)+","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Baf",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Bafr ::= Baf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bafr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Bafr ::= Bafr Baf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bafr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Baesce ::= error 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Baesce",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Baesce ::= tam dponto abi Btam cer 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Baesce",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Baesce ::= fondo dponto abi Bafr NT$4 cer 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Baesce",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$4 ::= 
            {
              Object RESULT =null;
 color1=vermelho+azul+verde; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Baesce ::= ima dponto kind 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object k = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		imagen=(String)k; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Baesce",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Baesce ::= tipo dponto comi ext NT$3 comi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Baesce",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$3 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tipos= (String)e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Baesce ::= nome dponto comi letras NT$2 comi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Baesce",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 nomes=(String)l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Bae ::= Baesce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bae",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Bae ::= Bae Baesce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bae",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Besce ::= error 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Besce",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Besce ::= coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Besce",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Besce ::= esce NT$1 dponto abi Bae cer 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 escen.insertar(es.toString(),nomes, tipos, imagen,color1,hexs,cuadros,dime);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Besce",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
hexs="";vermelho=""; azul="";verde=""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Be ::= Besce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Be",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Be ::= Be Besce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Be",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lenguaje ::= abi lienzo NT$0 dponto abi Be cer cer 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lenguaje",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
escen.deletes();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= lenguaje EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

