
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 19 03:36:56 CST 2012
//----------------------------------------------------

import java_cup.runtime.*;
import java.lang.*;
import java.util.*;
import javax.swing.*;
import java.awt.Desktop;
import java.io.*;
import java.awt.Color;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 19 03:36:56 CST 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\005\000\002\021" +
    "\002\000\002\003\024\000\002\003\003\000\002\022\002" +
    "\000\002\023\002\000\002\024\002\000\002\011\021\000" +
    "\002\011\003\000\002\014\004\000\002\014\003\000\002" +
    "\015\006\000\002\015\003\000\002\012\004\000\002\012" +
    "\003\000\002\025\002\000\002\013\011\000\002\013\010" +
    "\000\002\026\002\000\002\013\011\000\002\013\010\000" +
    "\002\013\010\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\027\002\000\002\004\011\000\002\030" +
    "\002\000\002\005\006\000\002\006\004\000\002\006\003" +
    "\000\002\031\002\000\002\020\010\000\002\020\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\016\004\000\002\016\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\004\004\005\001\002\000\004\002\215\001" +
    "\002\000\006\003\006\006\007\001\002\000\004\005\ufffd" +
    "\001\002\000\006\003\012\056\013\001\002\000\004\005" +
    "\011\001\002\000\004\002\000\001\002\000\010\003\ufff4" +
    "\007\ufff4\056\ufff4\001\002\000\004\062\212\001\002\000" +
    "\010\003\012\007\016\056\013\001\002\000\010\003\ufff6" +
    "\007\ufff6\056\ufff6\001\002\000\004\010\020\001\002\000" +
    "\010\003\ufff7\007\ufff7\056\ufff7\001\002\000\004\021\021" +
    "\001\002\000\004\053\022\001\002\000\004\055\023\001" +
    "\002\000\004\063\024\001\002\000\004\055\uffff\001\002" +
    "\000\004\055\026\001\002\000\004\057\027\001\002\000" +
    "\006\003\032\022\030\001\002\000\004\052\174\001\002" +
    "\000\022\003\042\014\046\016\037\024\040\025\033\026" +
    "\045\027\035\030\034\001\002\000\022\003\ufff8\014\ufff8" +
    "\016\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\001" +
    "\002\000\004\052\167\001\002\000\004\052\162\001\002" +
    "\000\004\052\141\001\002\000\026\003\uffea\011\uffea\013" +
    "\uffea\014\uffea\016\uffea\024\uffea\025\uffea\026\uffea\027\uffea" +
    "\030\uffea\001\002\000\006\003\uffe5\020\uffe5\001\002\000" +
    "\004\052\120\001\002\000\026\003\uffe9\011\uffe9\013\uffe9" +
    "\014\uffe9\016\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030" +
    "\uffe9\001\002\000\026\003\uffe8\011\uffe8\013\uffe8\014\uffe8" +
    "\016\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\001" +
    "\002\000\024\003\042\011\112\014\046\016\037\024\040" +
    "\025\033\026\045\027\035\030\034\001\002\000\026\003" +
    "\ufff2\011\ufff2\013\ufff2\014\ufff2\016\ufff2\024\ufff2\025\ufff2" +
    "\026\ufff2\027\ufff2\030\ufff2\001\002\000\004\052\076\001" +
    "\002\000\004\055\047\001\002\000\040\003\061\054\052" +
    "\056\051\064\070\065\064\066\063\067\062\070\060\071" +
    "\057\072\056\073\055\074\054\075\066\076\065\077\050" +
    "\001\002\000\042\003\uffbf\054\uffbf\055\uffbf\056\uffbf\064" +
    "\uffbf\065\uffbf\066\uffbf\067\uffbf\070\uffbf\071\uffbf\072\uffbf" +
    "\073\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf\001\002\000" +
    "\042\003\uffcb\054\uffcb\055\uffcb\056\uffcb\064\uffcb\065\uffcb" +
    "\066\uffcb\067\uffcb\070\uffcb\071\uffcb\072\uffcb\073\uffcb\074" +
    "\uffcb\075\uffcb\076\uffcb\077\uffcb\001\002\000\042\003\uffbe" +
    "\054\uffbe\055\uffbe\056\uffbe\064\uffbe\065\uffbe\066\uffbe\067" +
    "\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe" +
    "\076\uffbe\077\uffbe\001\002\000\042\003\061\054\052\055" +
    "\uffe7\056\051\064\070\065\064\066\063\067\062\070\060" +
    "\071\057\072\056\073\055\074\054\075\066\076\065\077" +
    "\050\001\002\000\042\003\uffc2\054\uffc2\055\uffc2\056\uffc2" +
    "\064\uffc2\065\uffc2\066\uffc2\067\uffc2\070\uffc2\071\uffc2\072" +
    "\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2\001\002" +
    "\000\042\003\uffc3\054\uffc3\055\uffc3\056\uffc3\064\uffc3\065" +
    "\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3" +
    "\074\uffc3\075\uffc3\076\uffc3\077\uffc3\001\002\000\042\003" +
    "\uffc4\054\uffc4\055\uffc4\056\uffc4\064\uffc4\065\uffc4\066\uffc4" +
    "\067\uffc4\070\uffc4\071\uffc4\072\uffc4\073\uffc4\074\uffc4\075" +
    "\uffc4\076\uffc4\077\uffc4\001\002\000\042\003\uffc5\054\uffc5" +
    "\055\uffc5\056\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070" +
    "\uffc5\071\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5" +
    "\077\uffc5\001\002\000\042\003\uffc6\054\uffc6\055\uffc6\056" +
    "\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6" +
    "\072\uffc6\073\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6\001" +
    "\002\000\042\003\uffbd\054\uffbd\055\uffbd\056\uffbd\064\uffbd" +
    "\065\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd\072\uffbd\073" +
    "\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\001\002\000\042" +
    "\003\uffc7\054\uffc7\055\uffc7\056\uffc7\064\uffc7\065\uffc7\066" +
    "\uffc7\067\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7" +
    "\075\uffc7\076\uffc7\077\uffc7\001\002\000\042\003\uffc8\054" +
    "\uffc8\055\uffc8\056\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8" +
    "\070\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076" +
    "\uffc8\077\uffc8\001\002\000\042\003\uffc9\054\uffc9\055\uffc9" +
    "\056\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9\071" +
    "\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9\077\uffc9" +
    "\001\002\000\042\003\uffc0\054\uffc0\055\uffc0\056\uffc0\064" +
    "\uffc0\065\uffc0\066\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0" +
    "\073\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0\001\002\000" +
    "\042\003\uffc1\054\uffc1\055\uffc1\056\uffc1\064\uffc1\065\uffc1" +
    "\066\uffc1\067\uffc1\070\uffc1\071\uffc1\072\uffc1\073\uffc1\074" +
    "\uffc1\075\uffc1\076\uffc1\077\uffc1\001\002\000\042\003\uffcc" +
    "\054\uffcc\055\uffcc\056\uffcc\064\uffcc\065\uffcc\066\uffcc\067" +
    "\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc" +
    "\076\uffcc\077\uffcc\001\002\000\042\003\uffca\054\uffca\055" +
    "\uffca\056\uffca\064\uffca\065\uffca\066\uffca\067\uffca\070\uffca" +
    "\071\uffca\072\uffca\073\uffca\074\uffca\075\uffca\076\uffca\077" +
    "\uffca\001\002\000\004\055\073\001\002\000\042\003\uffcd" +
    "\054\uffcd\055\uffcd\056\uffcd\064\uffcd\065\uffcd\066\uffcd\067" +
    "\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd\074\uffcd\075\uffcd" +
    "\076\uffcd\077\uffcd\001\002\000\004\057\074\001\002\000" +
    "\004\015\075\001\002\000\026\003\uffe6\011\uffe6\013\uffe6" +
    "\014\uffe6\016\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030" +
    "\uffe6\001\002\000\004\055\077\001\002\000\016\003\102" +
    "\045\103\046\104\047\106\050\101\051\100\001\002\000" +
    "\004\055\uffcf\001\002\000\004\055\uffd0\001\002\000\004" +
    "\055\uffce\001\002\000\004\055\uffd3\001\002\000\004\055" +
    "\uffd2\001\002\000\004\055\uffee\001\002\000\004\055\uffd1" +
    "\001\002\000\004\055\110\001\002\000\004\057\111\001" +
    "\002\000\026\003\uffed\011\uffed\013\uffed\014\uffed\016\uffed" +
    "\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\001\002\000" +
    "\004\012\114\001\002\000\026\003\ufff3\011\ufff3\013\ufff3" +
    "\014\ufff3\016\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030" +
    "\ufff3\001\002\000\006\003\032\022\030\001\002\000\022" +
    "\003\042\014\046\016\037\024\040\025\033\026\045\027" +
    "\035\030\034\001\002\000\024\003\042\013\117\014\046" +
    "\016\037\024\040\025\033\026\045\027\035\030\034\001" +
    "\002\000\004\005\ufffe\001\002\000\004\055\121\001\002" +
    "\000\004\031\122\001\002\000\004\055\123\001\002\000" +
    "\004\057\124\001\002\000\026\003\uffec\011\uffec\013\uffec" +
    "\014\uffec\016\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030" +
    "\uffec\001\002\000\006\003\126\020\127\001\002\000\010" +
    "\003\uffdf\017\uffdf\020\uffdf\001\002\000\004\055\134\001" +
    "\002\000\010\003\uffe2\017\uffe2\020\uffe2\001\002\000\010" +
    "\003\126\017\132\020\127\001\002\000\026\003\uffe4\011" +
    "\uffe4\013\uffe4\014\uffe4\016\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\001\002\000\010\003\uffe3\017\uffe3\020" +
    "\uffe3\001\002\000\040\003\061\054\052\056\051\064\070" +
    "\065\064\066\063\067\062\070\060\071\057\072\056\073" +
    "\055\074\054\075\066\076\065\077\050\001\002\000\042" +
    "\003\061\054\052\055\uffe1\056\051\064\070\065\064\066" +
    "\063\067\062\070\060\071\057\072\056\073\055\074\054" +
    "\075\066\076\065\077\050\001\002\000\004\055\137\001" +
    "\002\000\004\057\140\001\002\000\010\003\uffe0\017\uffe0" +
    "\020\uffe0\001\002\000\004\055\142\001\002\000\030\003" +
    "\152\033\151\034\154\035\156\036\147\037\143\040\146" +
    "\041\150\042\153\043\155\044\144\001\002\000\004\055" +
    "\uffda\001\002\000\004\055\uffd5\001\002\000\004\055\ufff1" +
    "\001\002\000\004\055\uffd9\001\002\000\004\055\uffdb\001" +
    "\002\000\004\055\uffd8\001\002\000\004\055\uffde\001\002" +
    "\000\004\055\uffd4\001\002\000\004\055\uffd7\001\002\000" +
    "\004\055\uffdd\001\002\000\004\055\uffd6\001\002\000\004" +
    "\055\uffdc\001\002\000\004\055\160\001\002\000\004\057" +
    "\161\001\002\000\026\003\ufff0\011\ufff0\013\ufff0\014\ufff0" +
    "\016\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\001" +
    "\002\000\004\055\163\001\002\000\004\061\164\001\002" +
    "\000\004\055\165\001\002\000\004\057\166\001\002\000" +
    "\026\003\uffeb\011\uffeb\013\uffeb\014\uffeb\016\uffeb\024\uffeb" +
    "\025\uffeb\026\uffeb\027\uffeb\030\uffeb\001\002\000\004\055" +
    "\170\001\002\000\030\003\152\033\151\034\154\035\156" +
    "\036\147\037\143\040\146\041\150\042\153\043\155\044" +
    "\144\001\002\000\004\055\172\001\002\000\004\057\173" +
    "\001\002\000\026\003\uffef\011\uffef\013\uffef\014\uffef\016" +
    "\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\001\002" +
    "\000\004\055\175\001\002\000\004\032\176\001\002\000" +
    "\004\055\ufffc\001\002\000\004\055\200\001\002\000\004" +
    "\057\201\001\002\000\004\023\202\001\002\000\004\053" +
    "\ufffb\001\002\000\004\053\204\001\002\000\004\055\205" +
    "\001\002\000\040\003\061\054\052\056\051\064\070\065" +
    "\064\066\063\067\062\070\060\071\057\072\056\073\055" +
    "\074\054\075\066\076\065\077\050\001\002\000\042\003" +
    "\061\054\052\055\ufffa\056\051\064\070\065\064\066\063" +
    "\067\062\070\060\071\057\072\056\073\055\074\054\075" +
    "\066\076\065\077\050\001\002\000\004\055\210\001\002" +
    "\000\004\057\211\001\002\000\022\003\ufff9\014\ufff9\016" +
    "\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\001\002" +
    "\000\004\060\213\001\002\000\004\057\214\001\002\000" +
    "\010\003\ufff5\007\ufff5\056\ufff5\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\007\001\001\000\002\001\001\000\006\014\013" +
    "\015\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\030\001\001\000\002\001\001" +
    "\000\012\004\035\005\040\012\042\013\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\035\005\040\013\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\052\017\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\071\027\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\114\001\001\000\012\004\035\005\040\012\115\013" +
    "\043\001\001\000\010\004\035\005\040\013\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\130\020\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\134\017\066\001" +
    "\001\000\006\017\071\031\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\205\017\066\001" +
    "\001\000\006\017\071\024\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public static void main(String args[]) throws Exception {

// La clase Yylex es creada por el analizador léxico

new parser(new Yylex(System.in)).parse();
}

public static ArrayList first = new ArrayList();
public static ArrayList second = new ArrayList();
public static ArrayList third = new ArrayList();

public void syntax_error(Symbol s){ 
        System.out.println("Error en la Línea " + (s.left+1) +" Columna "+s.right+ ". Identificador " 
+s.value  ); 
first.add(s.left+1);
second.add(s.right);
third.add(s.value);


}
public static void sinta3()
{
String Reporte= "Sinta3.html";
FileWriter fw = null;
try {
fw = new FileWriter(Reporte);
BufferedWriter bw = new BufferedWriter(fw);
PrintWriter salArch = new PrintWriter(bw);
salArch.println();

//aqui empezas a escribir el html
salArch.print("<html>");
salArch.print("<head>Errores</head>");
salArch.print("<body>");
//definis tu tabla con cada una de las columnas
salArch.print("<table width='200' border='1'><tr><th scope='col'>Numero</th><th scope='col'>Linea</th><th scope='col'>Columna</th><th scope='col'>Error</th></tr>");
int n=0;
//errores,alinea,posicion  son un arrayList del mismo tamano
        for (int i = 0; i<first.size(); i++)
        {
            salArch.print("<tr><td>"+(n+1)+"</td><td>"+first.get(i)+"</td><td>"+second.get(i)+"</td><td>"+third.get(i)+"</td></tr>");
n= n+1;

        }

salArch.println("</table><p>&nbsp;</p><p>&nbsp;</p></body></html>");
salArch.close();
                }
                catch (IOException ex) {
}


try {

            File path = new File("Sinta3.html");
            Desktop.getDesktop().open(path);
        } catch (IOException ex) {
          //  Logger.getLogger(Proyecto1_Compi1View.class.getName()).log(Level.SEVERE, null, ex);
        }

}


public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " + 
s.value + " no reconocido.");}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



public static String nombre,tt,cadenita,aux;
public static String titulo1,ffac,ns,vs,vs2,vs3;
public static String tit,pa;
public static Color cf;
public static ArrayList colo = new ArrayList();
public static ArrayList vi = new ArrayList();
public static void colorfondito(String color)
 {
 
 if(color.equalsIgnoreCase("azul"))
{
cf=Color.blue;
}
else if(color.equalsIgnoreCase("rojo"))
{
cf=Color.red;
}
else if(color.equalsIgnoreCase("verde"))
{
cf=Color.green;
}
else if(color.equalsIgnoreCase("morado"))
{
cf=new java.awt.Color(95,55,130);
}
else if(color.equalsIgnoreCase("rosado"))
{
cf=Color.pink;
}
else if(color.equalsIgnoreCase("negro"))
{
cf=Color.black;
}
else if(color.equalsIgnoreCase("blanco"))
{
cf=Color.white;
}
else if(color.equalsIgnoreCase("gris"))
{
cf=Color.gray;
}
else if(color.equalsIgnoreCase("anaranjado"))
{
cf=Color.orange;
}
else if(color.equalsIgnoreCase("celeste"))
{
cf=new java.awt.Color(42,196,221);
}

 }




public static void panel1(JTabbedPane panel)
{
System.out.print(nombre);
panel.setTitleAt(0, nombre);

}
public static void pintares(JTextPane panelito)
{
colorfondito(colo.get(0).toString());

panelito.setBackground(cf);
panelito.setContentType("text/html");
panelito.setText("<FONT FACE='"+ffac+"'>");
for(int i=0; i<vi.size();i++){

  aux += "<LI>"+vi.get(i);
    }


panelito.setText(tit+ns+vs+aux+vs3);

System.out.println(tit+ns+vs+aux+vs3+"</face>");

vi.clear();
tit="";
ns="";
vs="";
aux="";
vs3="";



}

public static void pinel2(JTextPane panelito2)
{


colorfondito(colo.get(1).toString());

panelito2.setBackground(cf);
panelito2.setContentType("text/html");
panelito2.setText("<FONT FACE='"+ffac+"'>");
for(int i=0; i<vi.size();i++){

  aux += "<LI>"+vi.get(i);
    }


panelito2.setText(tit+ns+vs+aux+vs3);

System.out.println(tit+ns+vs+aux+vs3+"</face>");
    }
public static void nombrar(String nom)
    {
nombre= nom;
}




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Bidr ::= error 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Bidr ::= numerito 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cadenita+=id+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Bidr ::= com 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cadenita+=id+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Bidr ::= s11 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cadenita+=id+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Bidr ::= s10 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cadenita+=id+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Bidr ::= s9 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cadenita+=id+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Bidr ::= s8 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cadenita+=id+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Bidr ::= s7 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cadenita+=id+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Bidr ::= s6 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cadenita+=id+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Bidr ::= s5 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cadenita+=id+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Bidr ::= s4 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cadenita+=id+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Bidr ::= s3 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cadenita+=id+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Bidr ::= s2 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cadenita+=id+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Bidr ::= s1 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cadenita+=id+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Bidr ::= let 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cadenita+=id+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bidr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Bid ::= Bidr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bid",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Bid ::= Bid Bidr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bid",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Bletras ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bletras",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Bletras ::= courier 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bletras",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Bletras ::= verdana 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bletras",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Bletras ::= geor 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bletras",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Bletras ::= arial 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bletras",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Bletras ::= tre 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bletras",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Bcolores ::= error 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Bcolores ::= celeste 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Bcolores ::= laranja 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Bcolores ::= nero 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Bcolores ::= branco 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Bcolores ::= gris 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Bcolores ::= rosa 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Bcolores ::= morado 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Bcolores ::= verde 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Bcolores ::= azul 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Bcolores ::= rojo 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = co;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bcolores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Bvir ::= error 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bvir",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Bvir ::= vine comi Bid NT$8 comi semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bvir",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$8 ::= 
            {
              Object RESULT =null;
 vi.add(cadenita);
                cadenita ="";
vs2="<LI>"+cadenita;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Bvi ::= Bvir 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bvi",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Bvi ::= Bvi Bvir 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bvi",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Bvine ::= vina NT$7 Bvi vinc 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		vs3="</UL>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bvine",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$7 ::= 
            {
              Object RESULT =null;
vs="<UL type = circle >";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Bparr ::= para comi Bid NT$6 comi semi parc 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bparr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$6 ::= 
            {
              Object RESULT =null;
ns="<p align= center>"+cadenita+"<br></p>";  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Boptir ::= error 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Boptir",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Boptir ::= Bvine 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Boptir",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Boptir ::= Bparr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Boptir",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Boptir ::= image igual comi path comi semi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Boptir",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Boptir ::= typefont igual comi typef comi semi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Boptir",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Boptir ::= fuente igual comi Bletras NT$5 comi semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object co = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Boptir",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$5 ::= 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object co = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
ffac= co.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Boptir ::= colf igual comi Bcolores comi semi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Boptir",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Boptir ::= fondo igual comi Bcolores NT$4 comi semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Boptir",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$4 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
colo.add(c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Bopti ::= Boptir 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bopti",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Bopti ::= Bopti Boptir 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bopti",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Bimposr ::= error 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bimposr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Bimposr ::= let dot impo semi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bimposr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Bimpos ::= Bimposr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bimpos",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Bimpos ::= Bimpos Bimposr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bimpos",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Boblig ::= error 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Boblig",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Boblig ::= tamtit igual comi typetxt NT$1 comi semi textti NT$2 dosp comi Bid NT$3 comi semi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Boblig",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
tit = "<"+tt+">"+ cadenita +"</"+ tt +">";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
cadenita="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
tt=t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Bp ::= error 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Bp ::= ima Bimpos imc pan1a np dosp comi ids NT$0 comi semi Boblig Bopti pan1c pan2a Boblig Bopti pan2c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
nombrar(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // lengua ::= xmla Bp xmlc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lengua",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= lengua EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

