
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Apr 17 22:21:01 CST 2013
//----------------------------------------------------

package proy1_compi.Paint;

import java.awt.Color;
import java_cup.runtime.*;
import java.lang.*;
import java.util.*;
import javax.swing.JComboBox;
import javax.swing.JLabel;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Apr 17 22:21:01 CST 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\004\000\002\016\002\000\002\002" +
    "\010\000\002\002\003\000\002\017\002\000\002\012\011" +
    "\000\002\014\004\000\002\014\003\000\002\020\002\000" +
    "\002\021\002\000\002\013\013\000\002\022\002\000\002" +
    "\023\002\000\002\024\002\000\002\025\002\000\002\013" +
    "\017\000\002\013\003\000\002\006\004\000\002\006\003" +
    "\000\002\003\005\000\002\026\002\000\002\027\002\000" +
    "\002\003\013\000\002\003\003\000\002\005\004\000\002" +
    "\005\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\011\007\000\002\011\007\000\002\030\002\000" +
    "\002\031\002\000\002\032\002\000\002\015\011\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\010" +
    "\003\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\006\003\004\004\006\001\002\000\004\002" +
    "\ufffe\001\002\000\004\002\127\001\002\000\004\012\000" +
    "\001\002\000\004\012\010\001\002\000\010\003\011\005" +
    "\013\011\014\001\002\000\012\003\uffea\005\uffea\011\uffea" +
    "\013\uffea\001\002\000\012\003\uffef\005\uffef\011\uffef\013" +
    "\uffef\001\002\000\010\003\120\017\122\025\121\001\002" +
    "\000\004\014\110\001\002\000\012\003\011\005\013\011" +
    "\014\013\017\001\002\000\012\003\ufff0\005\ufff0\011\ufff0" +
    "\013\ufff0\001\002\000\004\010\020\001\002\000\004\016" +
    "\022\001\002\000\004\002\uffff\001\002\000\004\007\023" +
    "\001\002\000\004\012\ufffd\001\002\000\004\012\025\001" +
    "\002\000\010\003\027\010\026\011\031\001\002\000\004" +
    "\014\ufff6\001\002\000\012\003\ufff1\010\ufff1\011\ufff1\013" +
    "\ufff1\001\002\000\012\003\ufffa\010\ufffa\011\ufffa\013\ufffa" +
    "\001\002\000\004\014\035\001\002\000\012\003\027\010" +
    "\026\011\031\013\034\001\002\000\012\003\ufffb\010\ufffb" +
    "\011\ufffb\013\ufffb\001\002\000\004\002\ufffc\001\002\000" +
    "\004\025\036\001\002\000\004\017\ufff9\001\002\000\004" +
    "\017\040\001\002\000\010\003\043\014\042\024\041\001" +
    "\002\000\004\015\uffe4\001\002\000\006\022\051\023\052" +
    "\001\002\000\004\015\uffe2\001\002\000\004\015\uffe3\001" +
    "\002\000\004\015\ufff8\001\002\000\004\015\047\001\002" +
    "\000\004\021\050\001\002\000\012\003\ufff7\010\ufff7\011" +
    "\ufff7\013\ufff7\001\002\000\006\024\053\025\054\001\002" +
    "\000\006\024\053\025\054\001\002\000\014\015\uffd8\017" +
    "\uffd8\020\uffd8\024\uffd8\025\uffd8\001\002\000\014\015\uffd7" +
    "\017\uffd7\020\uffd7\024\uffd7\025\uffd7\001\002\000\006\024" +
    "\053\025\054\001\002\000\004\015\057\001\002\000\006" +
    "\015\uffe1\017\uffe1\001\002\000\006\024\053\025\054\001" +
    "\002\000\004\015\062\001\002\000\006\015\uffe0\017\uffe0" +
    "\001\002\000\004\014\064\001\002\000\004\006\065\001" +
    "\002\000\004\017\ufff5\001\002\000\004\017\067\001\002" +
    "\000\012\003\070\014\042\024\053\025\054\001\002\000" +
    "\006\015\uffd9\017\uffd9\001\002\000\010\015\uffdb\017\uffdb" +
    "\020\uffdf\001\002\000\004\017\ufff4\001\002\000\006\015" +
    "\uffda\017\uffda\001\002\000\004\017\075\001\002\000\012" +
    "\003\070\014\042\024\053\025\054\001\002\000\004\015" +
    "\ufff3\001\002\000\004\015\100\001\002\000\004\021\101" +
    "\001\002\000\012\003\ufff2\010\ufff2\011\ufff2\013\ufff2\001" +
    "\002\000\004\020\103\001\002\000\004\020\uffde\001\002" +
    "\000\004\020\105\001\002\000\006\024\uffdd\025\uffdd\001" +
    "\002\000\006\024\053\025\054\001\002\000\006\015\uffdc" +
    "\017\uffdc\001\002\000\004\025\111\001\002\000\004\017" +
    "\uffed\001\002\000\004\017\113\001\002\000\010\003\043" +
    "\014\042\024\041\001\002\000\004\015\uffec\001\002\000" +
    "\004\015\116\001\002\000\004\021\117\001\002\000\012" +
    "\003\uffeb\005\uffeb\011\uffeb\013\uffeb\001\002\000\012\003" +
    "\uffe5\017\uffe5\021\uffe5\025\uffe5\001\002\000\012\003\uffe7" +
    "\017\uffe7\021\uffe7\025\uffe7\001\002\000\012\003\uffe6\017" +
    "\uffe6\021\uffe6\025\uffe6\001\002\000\012\003\uffe8\017\uffe8" +
    "\021\uffe8\025\uffe8\001\002\000\012\003\120\017\122\021" +
    "\125\025\121\001\002\000\012\003\uffee\005\uffee\011\uffee" +
    "\013\uffee\001\002\000\012\003\uffe9\017\uffe9\021\uffe9\025" +
    "\uffe9\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\006\001\001\000\002\001\001" +
    "\000\006\003\011\006\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\122\005\123\001\001\000\002" +
    "\001\001\000\004\003\015\001\001\000\002\001\001\000" +
    "\004\012\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\023\001\001\000\002\001" +
    "\001\000\006\013\027\014\031\001\001\000\004\022\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\036\001\001\000" +
    "\002\001\001\000\006\007\044\011\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\057\001\001\000" +
    "\004\010\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\065\001\001\000\002\001\001\000\010\010\070\011\072" +
    "\015\071\001\001\000\002\001\001\000\004\030\101\001" +
    "\001\000\004\024\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\070\011\072\015\075\001\001\000" +
    "\004\025\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\103\001" +
    "\001\000\002\001\001\000\004\032\105\001\001\000\004" +
    "\010\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\111\001\001\000\002\001\001\000\006\007\113" +
    "\011\043\001\001\000\004\027\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public static void main(String args[]) throws Exception {

// La clase Yylex es creada por el analizador léxico

new parser(new Yylex(System.in)).parse();
}
public static ArrayList first = new ArrayList();
public static ArrayList second = new ArrayList();
public static ArrayList third = new ArrayList();
public static ArrayList fourth = new ArrayList();



public void syntax_error(Symbol s){ 

System.out.println("Error en la Línea " + (s.left+1) +" Columna "+s.right+ ". Identificador " 
+s.value  ); 
first.add(s.left+1);
second.add(s.right);
third.add(s.value);
fourth.add("sintactico");


}


public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " + 
s.value + " no reconocido.");}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



public static ArrayList  varis = new ArrayList();
public static ArrayList  values = new ArrayList();
static ListaP pint = new ListaP();
int pos=0;
String colores="";
String pox="";
String poy="";
String escen = "";
String pontos ="";


public int position(String var)
{
  for(int j =0;j<varis.size();j++)
  {
	if(varis.get(j).toString().equals(var))
	{
	  return j;
	}
  }
  return 0;

}

public static void vertodo()
{
    
    NodoP  n = pint.primero;
        while(n!=null)
        {
    
          
            n=n.sig;
        }
}

public static void  pintar ( JLabel[][]  matriz,JComboBox boxi,ArrayList co1,ArrayList co )
{
    NodoP n = pint.primero;
    while(n!=null)
    {
        if(n.escenario.equalsIgnoreCase(boxi.getSelectedItem().toString()))
        {
              for(int s=0;s<co1.size();s++)
              {
                  
                 if(n.color.equalsIgnoreCase(co1.get(s).toString()))
                {
                      String color = co.get(s).toString();

                      String x = n.posX;
                      String y = n.posY;
                    
                      pintarMatriz(matriz, x, y, color);
                     
                  }
                  
              }
               
        }
    
    n=n.sig;
    }

}




public static void pintarMatriz(JLabel[][] matriz, String posx , String posy, String colors)
{
            for(int i = 0 ; i<matriz.length; i++)
            {
                for(int j=0; j<matriz.length;j++)
                {
                    if(colors.startsWith("#"))
                    {
                        String po = colors.substring(1, colors.length());   
                        if (posx.contains(".."))
                        {
                            String pts[] = posx.split(",");
                            int p1 = Integer.parseInt(pts[0]);
                            int p2 = Integer.parseInt(pts[2]);
                            int y = Integer.parseInt(posy);
                            for(int k =p1; k<=p2;k++)
                            {
                             matriz[k][y].setBackground(new Color(Integer.parseInt(po, 16)));
                             matriz[k][y].setOpaque(true);
                            }
                            
                          
                        }else if (posy.contains(".."))
                        {
                        String pts[] = posy.split(",");
                            int p1 = Integer.parseInt(pts[0]);
                            int p2 = Integer.parseInt(pts[2]);
                            int x = Integer.parseInt(posx);
                            for(int k =p1; k<=p2;k++)
                            {
                             matriz[x][k].setBackground(new Color(Integer.parseInt(po, 16)));
                             matriz[x][k].setOpaque(true);
                            }
                        
                        }
                        else
                        {
                        int x = Integer.parseInt(posx);
                        int y = Integer.parseInt(posy);
                        matriz[x][y].setBackground(new Color(Integer.parseInt(po, 16)));
                         matriz[x][y].setOpaque(true);
                        }
                        
                        
                        
//                        
          
                    }
                    else{
                     String col[]= colors.split(",");
//             
                      int red = Integer.parseInt(col[0]);
                      int blue= Integer.parseInt(col[1]);
                      int green= Integer.parseInt(col[2]);
              
                        if (posx.contains(".."))
                        {
                            String pts[] = posx.split(",");
                            int p1 = Integer.parseInt(pts[0]);
                            int p2 = Integer.parseInt(pts[2]);
                            int y = Integer.parseInt(posy);
                            for(int k =p1; k<=p2;k++)
                            {
                             matriz[k][y].setBackground(new Color(red, green, blue));
                             matriz[k][y].setOpaque(true);
                            }
                            
                          
                        }else if (posy.contains(".."))
                        {
                            String pts[] = posy.split(",");
                            int p1 = Integer.parseInt(pts[0]);
                            int p2 = Integer.parseInt(pts[2]);
                            int x = Integer.parseInt(posx);
                            for(int k =p1; k<=p2;k++)
                            {
                             matriz[x][k].setBackground(new Color(red, green, blue));
                             matriz[x][k].setOpaque(true);
                            }
                        
                        }
                           else
                        {
                        int x = Integer.parseInt(posx);
                        int y = Integer.parseInt(posy);
                         matriz[x][y].setBackground(new Color(red, green, blue));
                         matriz[x][y].setOpaque(true);
                        }
                 
                    }
                }
            }


}














private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Bs ::= ids 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		int ps = position(v);  RESULT = values.get(ps);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bs",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Bs ::= numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bs",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Bpnt ::= error 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bpnt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Bpnt ::= Bf 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bpnt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Bpnt ::= Bs 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bpnt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Bpnt ::= Bs NT$10 ponto NT$11 ponto NT$12 Bs 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pontos+=s;  RESULT = pontos;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bpnt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 pontos+=p2+",";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 pontos+=p1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$10 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 pontos += b+","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Bf ::= ini minus Bs Bs fin 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= Integer.parseInt(c.toString())-Integer.parseInt(d.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bf",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Bf ::= ini plus Bs Bs fin 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= Integer.parseInt(a.toString())+Integer.parseInt(b.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bf",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // B ::= error 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // B ::= Bf 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // B ::= numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Bvar2 ::= error 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bvar2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Bvar2 ::= coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bvar2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Bvar2 ::= ids 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		varis.add(v); values.add(0);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bvar2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Bvarr ::= Bvar2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bvarr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Bvarr ::= Bvarr Bvar2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bvarr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Bvar ::= error 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bvar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Bvar ::= setvar ini ids NT$8 coma B NT$9 fin pyc 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bvar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
values.set(pos, n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$8 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
pos =position(p);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Bvar ::= var Bvarr pyc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bvar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Bvari ::= Bvar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bvari",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Bvari ::= Bvari Bvar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bvari",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Bap ::= error 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bap",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Bap ::= pintar NT$4 ini color NT$5 coma Bpnt NT$6 coma Bpnt NT$7 fin pyc 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 pint.insertar(escen,colores,pox,poy);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bap",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
poy =  String.valueOf(y); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
pox =  String.valueOf(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 colores=(String)c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$4 ::= 
            {
              Object RESULT =null;
 pontos=""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Bap ::= setvar ini ids NT$2 coma B NT$3 fin pyc 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bap",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
values.set(pos, n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$2 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
pos =position(p);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Bapr ::= Bap 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bapr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Bapr ::= Bapr Bap 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bapr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Bd ::= pintar dponto esce NT$1 abi Bapr cer 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int escleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int escright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object esc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bd",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;
		int escleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int escright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object esc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
escen = String.valueOf(esc);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lenguaje ::= error 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lenguaje",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lenguaje ::= vars NT$0 abi Bvari cer Bd 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lenguaje",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
pos=0; varis.clear();values.clear(); pint.deletes();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= lenguaje EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

