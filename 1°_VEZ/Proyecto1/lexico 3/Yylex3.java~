/* The following code was generated by JFlex 1.4.3 on 9/28/12 9:30 PM */

import java.lang.System;
import java.util.ArrayList;
import java_cup.runtime.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/28/12 9:30 PM from the specification file
 * <tt>LexyMC.lex</tt>
 */
public class Yylex3 implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\47\1\46\2\0\1\47\22\0\1\32\6\0\1\44\4\0"+
    "\1\45\1\34\1\35\1\17\1\23\1\24\1\25\1\26\1\27\1\27"+
    "\1\30\1\30\1\30\1\30\1\31\1\43\1\2\1\42\1\16\2\0"+
    "\1\15\1\37\1\11\1\5\1\12\1\22\1\1\1\36\1\14\2\1"+
    "\1\7\1\3\1\20\1\4\1\33\1\1\1\13\1\40\1\21\1\6"+
    "\1\41\10\1\1\10\1\1\1\15\1\37\1\11\1\5\1\12\1\22"+
    "\1\1\1\36\1\14\2\1\1\7\1\3\1\20\1\4\1\33\1\1"+
    "\1\13\1\40\1\21\1\6\1\41\4\1\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\7\2\5\3\1\4\1\5"+
    "\1\2\1\6\1\7\1\2\1\10\1\11\1\12\1\13"+
    "\1\14\5\0\5\2\1\15\3\2\2\3\1\0\1\3"+
    "\1\16\2\2\10\0\6\2\1\17\2\2\1\3\3\0"+
    "\1\20\3\2\10\0\3\2\1\21\4\2\1\3\5\0"+
    "\2\2\1\22\10\0\6\2\1\23\1\3\3\0\2\2"+
    "\10\0\7\2\1\3\3\0\1\2\1\24\10\0\4\2"+
    "\1\25\2\2\1\3\4\0\1\2\10\0\2\2\1\26"+
    "\1\2\1\27\1\2\1\30\2\0\1\16\1\0\1\31"+
    "\2\0\1\32\4\0\1\33\1\2\1\34\1\35\1\2"+
    "\1\3\1\36\6\0\1\37\1\40\2\2\1\41\1\42"+
    "\4\0\1\43\1\44\25\0\1\45\2\0\1\46\1\0"+
    "\1\47\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118"+
    "\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230\0\u0258"+
    "\0\50\0\u0280\0\u02a8\0\50\0\50\0\u02d0\0\50\0\50"+
    "\0\50\0\50\0\50\0\u02f8\0\u0320\0\u0348\0\u0370\0\u0398"+
    "\0\u03c0\0\u03e8\0\u0410\0\u0438\0\u0460\0\u0488\0\u04b0\0\u04d8"+
    "\0\u0500\0\u0528\0\u0550\0\u0578\0\u05a0\0\120\0\u05c8\0\u05f0"+
    "\0\u0618\0\u0640\0\u0668\0\u0690\0\u06b8\0\u06e0\0\u0708\0\u0730"+
    "\0\u0758\0\u0780\0\u07a8\0\u07d0\0\u07f8\0\u0820\0\120\0\u0848"+
    "\0\u0870\0\u0898\0\u08c0\0\u08e8\0\u0910\0\u0578\0\u0938\0\u0960"+
    "\0\u0988\0\u09b0\0\u09d8\0\u0a00\0\u0a28\0\u0a50\0\u0a78\0\u0aa0"+
    "\0\u0ac8\0\u0af0\0\u0b18\0\u0b40\0\120\0\u0b68\0\u0b90\0\u0bb8"+
    "\0\u0be0\0\u0c08\0\u0c30\0\u0c58\0\u0c80\0\u0ca8\0\u0cd0\0\u0cf8"+
    "\0\u0d20\0\120\0\u0d48\0\u0d70\0\u0d98\0\u0dc0\0\u0de8\0\u0e10"+
    "\0\u0e38\0\u0e60\0\u0e88\0\u0eb0\0\u0ed8\0\u0f00\0\u0f28\0\u0f50"+
    "\0\u0f78\0\u0fa0\0\u0fc8\0\u0ff0\0\u1018\0\u1040\0\u1068\0\u1090"+
    "\0\u10b8\0\u10e0\0\u1108\0\u1130\0\u1158\0\u1180\0\u11a8\0\u11d0"+
    "\0\u11f8\0\u1220\0\u1248\0\u1270\0\u1298\0\u12c0\0\u12e8\0\u1310"+
    "\0\u1338\0\u1360\0\u1388\0\120\0\u13b0\0\u13d8\0\u1400\0\u1428"+
    "\0\u1450\0\u1478\0\u14a0\0\u14c8\0\u14f0\0\u1518\0\u1540\0\u1568"+
    "\0\120\0\u1590\0\u15b8\0\u15e0\0\u1608\0\u1630\0\u1658\0\u1680"+
    "\0\u16a8\0\u16d0\0\u16f8\0\u1720\0\u1748\0\u1770\0\u1798\0\u17c0"+
    "\0\u17e8\0\u1810\0\u1838\0\120\0\u1860\0\120\0\u1888\0\u18b0"+
    "\0\u18d8\0\u1900\0\50\0\u1928\0\120\0\u1950\0\u1978\0\50"+
    "\0\u19a0\0\u19c8\0\u19f0\0\u1a18\0\50\0\u1a40\0\120\0\120"+
    "\0\u1a68\0\u18b0\0\50\0\u1a90\0\u1ab8\0\u1ae0\0\u1b08\0\u1b30"+
    "\0\u1b58\0\50\0\50\0\u1b80\0\u1ba8\0\50\0\50\0\u1bd0"+
    "\0\u1bf8\0\u1c20\0\u1c48\0\120\0\120\0\u1c70\0\u1c98\0\u1cc0"+
    "\0\u1ce8\0\u1d10\0\u1d38\0\u1d60\0\u1d88\0\u1db0\0\u1dd8\0\u1e00"+
    "\0\u1e28\0\u1e50\0\u1e78\0\u1ea0\0\u1ec8\0\u1ef0\0\u1f18\0\u1f40"+
    "\0\u1f68\0\u1f90\0\50\0\u1fb8\0\u1fe0\0\50\0\u2008\0\50"+
    "\0\50";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\3\1\5\3\3\1\6\1\7"+
    "\2\3\1\10\2\2\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\2\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\3\3\1\27\1\30\1\31\1\32\1\33\1\22"+
    "\51\0\1\3\1\0\13\3\2\0\3\3\10\0\1\3"+
    "\2\0\4\3\11\0\1\34\1\0\1\35\3\0\1\36"+
    "\5\0\1\37\2\0\1\40\26\0\1\3\1\0\7\3"+
    "\1\41\1\3\1\42\1\3\2\0\3\3\10\0\1\3"+
    "\2\0\4\3\7\0\1\3\1\0\12\3\1\43\2\0"+
    "\3\3\10\0\1\3\2\0\4\3\7\0\1\3\1\0"+
    "\2\3\1\44\10\3\2\0\3\3\10\0\1\3\2\0"+
    "\4\3\7\0\1\3\1\0\13\3\2\0\3\3\10\0"+
    "\1\45\2\0\4\3\7\0\1\3\1\0\1\3\1\46"+
    "\7\3\1\47\1\3\2\0\3\3\10\0\1\3\2\0"+
    "\4\3\7\0\1\3\1\0\7\3\1\50\3\3\2\0"+
    "\3\3\10\0\1\3\2\0\4\3\7\0\1\3\1\0"+
    "\7\3\1\51\3\3\2\0\3\3\10\0\1\3\2\0"+
    "\4\3\31\0\1\52\5\53\4\0\1\54\35\0\3\53"+
    "\3\55\4\0\1\54\35\0\6\55\4\0\1\54\35\0"+
    "\2\55\4\52\4\0\1\54\35\0\6\52\4\0\1\54"+
    "\44\0\1\22\14\0\1\22\1\0\1\3\1\0\1\56"+
    "\7\3\1\57\2\3\2\0\3\3\10\0\1\3\2\0"+
    "\4\3\7\0\1\3\1\0\1\3\1\60\11\3\2\0"+
    "\3\3\10\0\1\3\2\0\4\3\12\0\1\61\55\0"+
    "\1\62\44\0\1\63\43\0\1\64\1\0\1\65\3\0"+
    "\1\66\10\0\1\67\42\0\1\70\33\0\1\3\1\0"+
    "\13\3\2\0\3\3\10\0\1\3\2\0\2\3\1\71"+
    "\1\3\7\0\1\3\1\0\10\3\1\72\2\3\2\0"+
    "\3\3\10\0\1\3\2\0\4\3\7\0\1\3\1\0"+
    "\13\3\2\0\1\73\2\3\10\0\1\3\2\0\4\3"+
    "\7\0\1\3\1\0\12\3\1\74\2\0\3\3\10\0"+
    "\1\3\2\0\4\3\7\0\1\3\1\0\7\3\1\75"+
    "\3\3\2\0\3\3\10\0\1\3\2\0\4\3\7\0"+
    "\1\3\1\0\1\76\12\3\2\0\3\3\10\0\1\3"+
    "\2\0\4\3\7\0\1\3\1\0\13\3\2\0\1\3"+
    "\1\77\1\3\10\0\1\3\2\0\4\3\7\0\1\3"+
    "\1\0\4\3\1\100\6\3\2\0\3\3\10\0\1\3"+
    "\2\0\4\3\7\0\1\3\1\0\6\3\1\101\4\3"+
    "\2\0\3\3\10\0\1\3\2\0\4\3\31\0\6\102"+
    "\4\0\1\54\31\0\1\103\3\0\6\102\1\104\2\0"+
    "\1\105\1\54\35\0\6\106\36\0\1\103\3\0\6\102"+
    "\3\0\1\105\1\54\13\0\1\3\1\0\1\3\1\107"+
    "\5\3\1\110\3\3\2\0\3\3\10\0\1\3\2\0"+
    "\4\3\7\0\1\3\1\0\10\3\1\111\2\3\2\0"+
    "\3\3\10\0\1\3\2\0\4\3\13\0\1\112\63\0"+
    "\1\113\42\0\1\114\37\0\1\115\55\0\1\116\44\0"+
    "\1\117\55\0\1\120\43\0\1\121\37\0\1\3\1\0"+
    "\6\3\1\122\4\3\2\0\3\3\10\0\1\3\2\0"+
    "\4\3\7\0\1\3\1\0\7\3\1\123\3\3\2\0"+
    "\3\3\10\0\1\3\2\0\4\3\7\0\1\3\1\0"+
    "\13\3\2\0\1\3\1\124\1\3\10\0\1\3\2\0"+
    "\4\3\7\0\1\3\1\0\2\3\1\125\10\3\2\0"+
    "\3\3\10\0\1\3\2\0\4\3\7\0\1\3\1\0"+
    "\4\3\1\126\6\3\2\0\3\3\10\0\1\3\2\0"+
    "\4\3\7\0\1\3\1\0\13\3\2\0\3\3\10\0"+
    "\1\3\2\0\1\3\1\127\2\3\7\0\1\3\1\0"+
    "\7\3\1\130\3\3\2\0\3\3\10\0\1\3\2\0"+
    "\4\3\7\0\1\3\1\0\13\3\2\0\3\3\10\0"+
    "\1\3\2\0\1\131\3\3\31\0\6\132\4\0\1\54"+
    "\35\0\1\133\1\134\46\0\5\135\43\0\1\136\1\137"+
    "\24\0\1\3\1\0\2\3\1\140\10\3\2\0\3\3"+
    "\10\0\1\3\2\0\4\3\7\0\1\3\1\0\6\3"+
    "\1\141\4\3\2\0\3\3\10\0\1\3\2\0\4\3"+
    "\7\0\1\3\1\0\12\3\1\142\2\0\3\3\10\0"+
    "\1\3\2\0\4\3\14\0\1\143\56\0\1\144\44\0"+
    "\1\145\42\0\1\146\63\0\1\147\42\0\1\150\44\0"+
    "\1\151\57\0\1\152\27\0\1\3\1\0\10\3\1\153"+
    "\2\3\2\0\3\3\10\0\1\3\2\0\4\3\7\0"+
    "\1\3\1\0\6\3\1\154\4\3\2\0\3\3\10\0"+
    "\1\3\2\0\4\3\7\0\1\3\1\0\11\3\1\155"+
    "\1\3\2\0\3\3\10\0\1\3\2\0\4\3\7\0"+
    "\1\3\1\0\4\3\1\156\6\3\2\0\3\3\10\0"+
    "\1\3\2\0\4\3\7\0\1\3\1\0\10\3\1\157"+
    "\2\3\2\0\3\3\10\0\1\3\2\0\4\3\7\0"+
    "\1\3\1\0\13\3\2\0\2\3\1\160\10\0\1\3"+
    "\2\0\4\3\7\0\1\3\1\0\12\3\1\161\2\0"+
    "\3\3\10\0\1\3\2\0\4\3\31\0\6\162\4\0"+
    "\1\54\36\0\5\163\42\0\3\163\45\0\6\164\43\0"+
    "\5\165\42\0\3\165\23\0\1\3\1\0\3\3\1\166"+
    "\7\3\2\0\3\3\10\0\1\3\2\0\4\3\7\0"+
    "\1\3\1\0\11\3\1\167\1\3\2\0\3\3\10\0"+
    "\1\3\2\0\4\3\15\0\1\170\47\0\1\171\60\0"+
    "\1\172\35\0\1\173\56\0\1\174\44\0\1\175\56\0"+
    "\1\176\34\0\1\177\42\0\1\3\1\0\11\3\1\200"+
    "\1\3\2\0\3\3\10\0\1\3\2\0\4\3\7\0"+
    "\1\3\1\0\6\3\1\201\4\3\2\0\3\3\10\0"+
    "\1\3\2\0\4\3\7\0\1\3\1\0\2\3\1\202"+
    "\10\3\2\0\3\3\10\0\1\3\2\0\4\3\7\0"+
    "\1\3\1\0\11\3\1\203\1\3\2\0\3\3\10\0"+
    "\1\3\2\0\4\3\7\0\1\3\1\0\7\3\1\204"+
    "\3\3\2\0\3\3\10\0\1\3\2\0\4\3\7\0"+
    "\1\3\1\0\1\3\1\205\11\3\2\0\3\3\10\0"+
    "\1\3\2\0\4\3\7\0\1\3\1\0\5\3\1\206"+
    "\5\3\2\0\3\3\10\0\1\3\2\0\4\3\31\0"+
    "\6\207\4\0\1\54\31\0\1\210\62\0\1\211\51\0"+
    "\1\212\14\0\1\3\1\0\6\3\1\213\4\3\2\0"+
    "\3\3\10\0\1\3\2\0\4\3\7\0\1\3\1\0"+
    "\1\3\1\214\11\3\2\0\3\3\10\0\1\3\2\0"+
    "\4\3\12\0\1\215\52\0\1\216\61\0\1\217\35\0"+
    "\1\220\47\0\1\221\60\0\1\222\35\0\1\223\54\0"+
    "\1\224\35\0\1\3\1\0\13\3\2\0\3\3\10\0"+
    "\1\225\2\0\4\3\7\0\1\3\1\0\11\3\1\226"+
    "\1\3\2\0\3\3\10\0\1\3\2\0\4\3\7\0"+
    "\1\3\1\0\12\3\1\227\2\0\3\3\10\0\1\3"+
    "\2\0\4\3\7\0\1\3\1\0\2\3\1\230\10\3"+
    "\2\0\3\3\10\0\1\3\2\0\4\3\7\0\1\3"+
    "\1\0\13\3\2\0\3\3\10\0\1\3\2\0\2\3"+
    "\1\231\1\3\7\0\1\3\1\0\13\3\2\0\1\232"+
    "\2\3\10\0\1\3\2\0\4\3\7\0\1\3\1\0"+
    "\13\3\2\0\3\3\10\0\1\3\2\0\3\3\1\233"+
    "\31\0\6\234\3\0\1\235\1\54\35\0\6\236\34\0"+
    "\1\237\55\0\6\240\20\0\1\3\1\0\13\3\2\0"+
    "\1\3\1\241\1\3\10\0\1\3\2\0\4\3\16\0"+
    "\1\242\51\0\1\243\47\0\1\244\41\0\1\245\52\0"+
    "\1\246\61\0\1\247\41\0\1\250\51\0\1\251\33\0"+
    "\1\3\1\0\6\3\1\252\4\3\2\0\3\3\10\0"+
    "\1\3\2\0\4\3\7\0\1\3\1\0\1\3\1\253"+
    "\11\3\2\0\3\3\10\0\1\3\2\0\4\3\7\0"+
    "\1\3\1\0\2\3\1\254\10\3\2\0\3\3\10\0"+
    "\1\3\2\0\4\3\7\0\1\3\1\0\1\3\1\255"+
    "\11\3\2\0\3\3\10\0\1\3\2\0\4\3\7\0"+
    "\1\3\1\0\1\3\1\256\11\3\2\0\3\3\10\0"+
    "\1\3\2\0\4\3\7\0\1\3\1\0\7\3\1\257"+
    "\3\3\2\0\3\3\10\0\1\3\2\0\4\3\31\0"+
    "\6\260\4\0\1\54\35\0\6\261\42\0\6\262\22\0"+
    "\1\263\67\0\6\264\20\0\1\3\1\0\1\3\1\265"+
    "\11\3\2\0\3\3\10\0\1\3\2\0\4\3\17\0"+
    "\1\266\46\0\1\267\55\0\1\270\41\0\1\271\51\0"+
    "\1\272\47\0\1\273\52\0\1\274\50\0\1\275\32\0"+
    "\1\3\1\0\11\3\1\276\1\3\2\0\3\3\10\0"+
    "\1\3\2\0\4\3\7\0\1\3\1\0\13\3\2\0"+
    "\1\277\2\3\10\0\1\3\2\0\4\3\7\0\1\3"+
    "\1\0\13\3\2\0\3\3\10\0\1\3\2\0\2\3"+
    "\1\300\1\3\7\0\1\3\1\0\13\3\2\0\1\301"+
    "\2\3\10\0\1\3\2\0\4\3\31\0\6\302\4\0"+
    "\1\54\35\0\6\303\42\0\6\304\42\0\6\305\23\0"+
    "\1\306\65\0\1\307\36\0\1\310\46\0\1\311\55\0"+
    "\1\312\47\0\1\313\32\0\1\3\1\0\1\3\1\314"+
    "\11\3\2\0\3\3\10\0\1\3\2\0\4\3\7\0"+
    "\1\3\1\0\13\3\2\0\1\3\1\315\1\3\10\0"+
    "\1\3\2\0\4\3\31\0\6\316\42\0\6\317\22\0"+
    "\1\320\61\0\1\321\36\0\1\322\65\0\1\323\26\0"+
    "\1\3\1\0\13\3\2\0\1\324\2\3\10\0\1\3"+
    "\2\0\4\3\7\0\1\3\1\0\12\3\1\325\2\0"+
    "\3\3\10\0\1\3\2\0\4\3\20\0\1\326\46\0"+
    "\1\327\41\0\1\330\61\0\1\331\45\0\1\332\55\0"+
    "\1\333\40\0\1\334\46\0\1\335\47\0\1\336\44\0"+
    "\1\337\54\0\1\340\55\0\1\341\42\0\1\342\46\0"+
    "\1\343\45\0\1\344\44\0\1\345\56\0\1\346\47\0"+
    "\1\347\46\0\1\350\46\0\1\351\43\0\1\352\56\0"+
    "\1\353\46\0\1\354\47\0\1\355\50\0\1\356\40\0"+
    "\1\357\56\0\1\360\47\0\1\361\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8240];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\16\1\1\11\2\1\2\11\1\1\5\11"+
    "\5\0\13\1\1\0\4\1\10\0\12\1\3\0\4\1"+
    "\10\0\11\1\5\0\3\1\10\0\10\1\3\0\2\1"+
    "\10\0\10\1\3\0\2\1\10\0\10\1\4\0\1\1"+
    "\10\0\7\1\2\0\1\11\1\0\1\1\2\0\1\11"+
    "\4\0\1\11\5\1\1\11\6\0\2\11\2\1\2\11"+
    "\4\0\2\1\25\0\1\11\2\0\1\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex3(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Yylex3(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 154) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 35: 
          { return new Symbol(sym.desc,new String(yytext()));
          }
        case 41: break;
        case 30: 
          { return new Symbol(sym.nity2,new String(yytext()));
          }
        case 42: break;
        case 19: 
          { return new Symbol(sym.date,new String(yytext()));
          }
        case 43: break;
        case 6: 
          { return new Symbol(sym.gui,new String(yytext()));
          }
        case 44: break;
        case 24: 
          { return new Symbol(sym.tel2,new String(yytext()));
          }
        case 45: break;
        case 38: 
          { return new Symbol(sym.ModA,new String(yytext()));
          }
        case 46: break;
        case 20: 
          { return new Symbol(sym.pre,new String(yytext()));
          }
        case 47: break;
        case 17: 
          { return new Symbol(sym.age,new String(yytext()));
          }
        case 48: break;
        case 8: 
          { return new Symbol(sym.equal,new String(yytext()));
          }
        case 49: break;
        case 2: 
          { return new Symbol(sym.lett,new String(yytext()));
          }
        case 50: break;
        case 39: 
          { return new Symbol(sym.DeC,new String(yytext()));
          }
        case 51: break;
        case 1: 
          { System.out.println("error lexico en "  + yyline + "," + yychar + " No se reconoce " + yytext());
    yychar=0;
          }
        case 52: break;
        case 27: 
          { return new Symbol(sym.FaA,new String(yytext()));
          }
        case 53: break;
        case 26: 
          { return new Symbol(sym.CliA,new String(yytext()));
          }
        case 54: break;
        case 11: 
          { return new Symbol(sym.com,new String(yytext()));
          }
        case 55: break;
        case 3: 
          { return new Symbol(sym.numb,new String(yytext()));
          }
        case 56: break;
        case 28: 
          { return new Symbol(sym.dir,new String(yytext()));
          }
        case 57: break;
        case 16: 
          { return new Symbol(sym.real,new String(yytext()));
          }
        case 58: break;
        case 4: 
          { return new Symbol(sym.ddot,new String(yytext()));
          }
        case 59: break;
        case 33: 
          { return new Symbol(sym.fech2,new String(yytext()));
          }
        case 60: break;
        case 18: 
          { return new Symbol(sym.hour,new String(yytext()));
          }
        case 61: break;
        case 23: 
          { return new Symbol(sym.tel,new String(yytext()));
          }
        case 62: break;
        case 21: 
          { return new Symbol(sym.names,new String(yytext()));
          }
        case 63: break;
        case 25: 
          { return new Symbol(sym.pro,new String(yytext()));
          }
        case 64: break;
        case 29: 
          { return new Symbol(sym.lstna,new String(yytext()));
          }
        case 65: break;
        case 40: 
          { return new Symbol(sym.ModC,new String(yytext()));
          }
        case 66: break;
        case 9: 
          { return new Symbol(sym.semi,new String(yytext()));
          }
        case 67: break;
        case 15: 
          { return new Symbol(sym.nity,new String(yytext()));
          }
        case 68: break;
        case 10: 
          { return new Symbol(sym.Apos,new String(yytext()));
          }
        case 69: break;
        case 34: 
          { return new Symbol(sym.fech3,new String(yytext()));
          }
        case 70: break;
        case 7: 
          { return new Symbol(sym.dot,new String(yytext()));
          }
        case 71: break;
        case 37: 
          { return new Symbol(sym.DeA,new String(yytext()));
          }
        case 72: break;
        case 14: 
          { return new Symbol(sym.hour2,new String(yytext()));
          }
        case 73: break;
        case 32: 
          { return new Symbol(sym.FaC,new String(yytext()));
          }
        case 74: break;
        case 31: 
          { return new Symbol(sym.CliC,new String(yytext()));
          }
        case 75: break;
        case 12: 
          { yychar=0;
          }
        case 76: break;
        case 36: 
          { return new Symbol(sym.fve,new String(yytext()));
          }
        case 77: break;
        case 13: 
          { return new Symbol(sym.numy,new String(yytext()));
          }
        case 78: break;
        case 22: 
          { return new Symbol(sym.can,new String(yytext()));
          }
        case 79: break;
        case 5: 
          { 
          }
        case 80: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
